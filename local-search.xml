<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring 事务传播特性</title>
    <link href="/2022/06/16/Spring%20%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E7%89%B9%E6%80%A7/"/>
    <url>/2022/06/16/Spring%20%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在项目中写出了如下模式的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-meta">@Transactional</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parent</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 期望：parent() 不回滚</span><br>    balabalaService.child();  <br>&#125;  <br>  <br><span class="hljs-meta">@Override</span>    <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">child</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">try</span> &#123;  <br>        balabalaService.grandChild();  <br>    &#125; <span class="hljs-keyword">catch</span> (Exception ignore) &#123;  <br>        <span class="hljs-comment">// 忽略异常  </span><br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-meta">@Override</span>  <br><span class="hljs-meta">@Transactional</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grandChild</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-comment">// 通过抛出异常回滚当前事务  </span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;grandChild&quot;</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码在 <code>parent()</code> 方法中通过 <code>child()</code> 调用了 <code>grandChild()</code> ，期望 <code>grandChild()</code> 回滚时 <code>parent()</code> 不会回滚。</p><p>这段代码实际上是不会按照预期工作的，<code>parent()</code> 方法也会跟着回滚。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>当 <code>grandChild()</code> 抛出异常时，会将当前事务标记为回滚，虽然 <code>child()</code> 中捕获了异常，看似 <code>parent()</code> 不会因为异常而回滚，但由于事务的传播特性，现在 <code>grandChild()</code> 与 <code>parent()</code> 处于一个事务中，因此实际上是 <code>parent()</code> 的事务被 <code>grandChild()</code> 标记为了回滚，导致 <code>parent()</code> 发生回滚。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="NESTED"><a href="#NESTED" class="headerlink" title="NESTED"></a>NESTED</h2><p>既然 <code>parent()</code> 和 <code>grandChild()</code> 两个方法处在一个事务中，我就想能不能在 <code>child()</code> 方法上新建一个嵌套事务，这样 <code>grandChild()</code> 便与 <code>child()</code> 处于同一个事物，因此 <code>grandChild()</code> 回滚时就不会导致 <code>parent()</code> 回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-meta">@Transactional</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parent</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 期望：parent() 不回滚</span><br>    balabalaService.child();  <br>&#125;  <br>  <br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">// 开启嵌套事务</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.NESTED)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">child</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">try</span> &#123;  <br>        balabalaService.grandChild();  <br>    &#125; <span class="hljs-keyword">catch</span> (Exception ignore) &#123;  <br>        <span class="hljs-comment">// 忽略异常  </span><br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-meta">@Override</span>  <br><span class="hljs-meta">@Transactional</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grandChild</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-comment">// 通过抛出异常回滚当前事务  </span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;grandChild&quot;</span>);  <br>&#125; <br></code></pre></td></tr></table></figure><p>这段代码看起来没啥问题，<code>grandChild()</code> 与  <code>child()</code> 处于同一个嵌套事务中，嵌套事务的回滚不会影响外层事务的回滚，同时又在 <code>child()</code> 捕获了所有的异常，因此外部事物也不会因为接收到异常而回滚，然而事实也不是这样的。</p><p><code>grandChild()</code> 方法的事务传播特性为默认值 <code>REQUIRED</code> ，他的特性之一是「支持当前事务」，那么当前事务是什么呢？</p><p>通过[[Spring Boot 打印事务日志]]等方式发现当前事务是 <code>parent()</code> 方法的事务，也就是说 <code>Propagation.NESTED</code> 方式创建的事务不是真正的事务，实际上他只是 MySQL 中的一个「savepoint」，导致 <code>grandChild()</code> 仍然与  <code>child()</code> 处在同一个事物中。</p><blockquote><p>The SAVEPOINT in MySQL is used for dividing (or) breaking a transaction into multiple units so that the user has a chance of roll backing the transaction up to a specified point. That means using Save Point we can roll back a part of a transaction instead of the entire transaction.</p></blockquote><p>可见：<strong>NESTED 中调用带事务的方法可能导致外层事务回滚</strong></p><h2 id="REQUIRES-NEW"><a href="#REQUIRES-NEW" class="headerlink" title="REQUIRES_NEW"></a>REQUIRES_NEW</h2><p>解决办法就是使用 <code>Propagation.REQUIRES_NEW</code> 创建一个真正的事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-meta">@Transactional</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parent</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 期望：parent() 不回滚</span><br>    balabalaService.child();  <br>&#125;  <br>  <br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">// 开启嵌套事务</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.Propagation.REQUIRES_NEW)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">child</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">try</span> &#123;  <br>        balabalaService.grandChild();  <br>    &#125; <span class="hljs-keyword">catch</span> (Exception ignore) &#123;  <br>        <span class="hljs-comment">// 忽略异常  </span><br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-meta">@Override</span>  <br><span class="hljs-meta">@Transactional</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grandChild</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-comment">// 通过抛出异常回滚当前事务  </span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;grandChild&quot;</span>);  <br>&#125; <br></code></pre></td></tr></table></figure><p>这种情况下，Spring 会暂停当前的事务链接，使用一个新的链接启动一个新的事务，也就是说 <code>REQUIRES_NEW</code> 的事务跟普通的事务是完全一样的。</p><h2 id="Catch-Exception"><a href="#Catch-Exception" class="headerlink" title="Catch Exception"></a>Catch Exception</h2><p>此时再运行代码，会发现 <code>child()</code> 方法抛出了一个异常，描述为「Transaction rolled back because it has been marked as rollback-only」，很明显我们已经在 <code>child()</code> 中捕获了所有的异常，那这个异常就不是我们抛出的。由此得知，当事务被标记为 rollback-only 的时候，Spring 会在事务的方法上抛出一个异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-meta">@Transactional</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parent</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 期望：parent() 不回滚</span><br>    <span class="hljs-keyword">try</span> &#123;  <br>        balabalaService.child();  <br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>        e.printStackTrace();  <br>    &#125;<br>&#125;  <br>  <br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">// 开启嵌套事务</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.Propagation.REQUIRES_NEW)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">child</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">try</span> &#123;  <br>        balabalaService.grandChild();  <br>    &#125; <span class="hljs-keyword">catch</span> (Exception ignore) &#123;  <br>        <span class="hljs-comment">// 忽略异常  </span><br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-meta">@Override</span>  <br><span class="hljs-meta">@Transactional</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grandChild</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-comment">// 通过抛出异常回滚当前事务  </span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;grandChild&quot;</span>);  <br>&#125; <br></code></pre></td></tr></table></figure><p>在 <code>parent()</code> 方法中捕获异常后，这段代码终于工作了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>锁库大师</title>
    <link href="/2022/06/16/%E9%94%81%E5%BA%93%E5%A4%A7%E5%B8%88/"/>
    <url>/2022/06/16/%E9%94%81%E5%BA%93%E5%A4%A7%E5%B8%88/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>希望在顾客下单时对库存明细表中的商品进行库存锁定，库存明细表简化后如下所示：</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/202206130943348.png" alt="背景"></p><p>可见一条产品编码有可能存在多条库存明细，客户的订单大致会锁定几十行的库存，要求如下：</p><ul><li>尽可能快，并发也高，支持多节点</li><li>为了数据的一致性，最好不用 redis 扣减的方案</li><li>锁库同时在锁库流水表中插入锁库记录</li></ul><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>通过分析系统现有的方案，发现锁库操作时间主要浪费在更新库存明细的锁库数量上，为了防止超卖，每一条更新必须加上库存校验（如下所示），一旦失败就要回滚，在加之 MySQL 并没有提供原生批量更新方法，只能每行库存执行一条 SQL，导致锁库时间较长。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">WHERE</span> (stock_quantity <span class="hljs-operator">-</span> locking_quantity) <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="提高锁库速度"><a href="#提高锁库速度" class="headerlink" title="提高锁库速度"></a>提高锁库速度</h3><p>优化的第一步就是想要提高批量锁库的速度，有没有方法能够在 MySQL 中模拟批量更新呢？</p><h4 id="WHEN-语句"><a href="#WHEN-语句" class="headerlink" title="WHEN 语句"></a>WHEN 语句</h4><p>答案就是使用 SQL 的 <code>when</code> 语句，在程序中拼接出如下的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs SQL">UPDATE p_stock_instance a  <br><span class="hljs-keyword">SET</span> a.locking_quantity <span class="hljs-operator">=</span> <span class="hljs-keyword">CASE</span> a.id  <br>                             <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;027dbba9c04a4ef0baab3983c64bc0b31123&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">3</span>  <br>                             <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;025d4574cd934b69993703e7e99e8ca43&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">6</span>  <br>                             <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;027dbba9c04a4ef0baab3983c64bc0b313&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">END</span>,  <br>    a.update_date      <span class="hljs-operator">=</span> now()  <br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">CASE</span> a.id  <br>          <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;027dbba9c04a4ef0baab3983c64bc0b31123&#x27;</span> <span class="hljs-keyword">THEN</span> (a.stock_quantity <span class="hljs-operator">-</span> a.locking_quantity) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">3</span><br>          <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;025d4574cd934b69993703e7e99e8ca43&#x27;</span> <span class="hljs-keyword">THEN</span> (a.stock_quantity <span class="hljs-operator">-</span> a.locking_quantity) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">6</span><br>          <span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;027dbba9c04a4ef0baab3983c64bc0b313&#x27;</span> <span class="hljs-keyword">THEN</span> (a.stock_quantity <span class="hljs-operator">-</span> a.locking_quantity) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">2</span><br>          <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><p>SQL 执行完毕后会返回更新行数，在程序中判断更新行数是否与预期相符即可判断是否更新成功，程序示意如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer num = pStockInstanceDao.operationStockSmallData(operationMapping);  <br><span class="hljs-keyword">if</span> (num != operationMapping.size()) &#123;  <br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;操作失败&quot;</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法的更新速度很快，在我的测试中，更新两万行库存记录的耗时大约 17 秒。但其实还有更快的方法。</p><h4 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h4><p>使用<strong>临时表更新库存</strong>的方法在数据量比较大的情况下比 WHEN 语句的性能好很多，测试条件下更新两万行库存记录耗时大约 1 秒</p><p>临时表是 MySQL 中的一种特殊表，他有如下几个特征：</p><ul><li>临时表是线程内可见，线程之间看不到其他线程创建的临时表</li><li>线程推出后临时表就被销毁</li><li>临时表与普通表重名时 MySQL 优先选择临时表操作</li></ul><p>本案例中创建临时表的语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> temporary <span class="hljs-keyword">table</span> temp_stock_operation  <br>(  <br>    stock_instance_id <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">unique</span>   <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;库存实例ID&#x27;</span>,  <br>    op_num            <span class="hljs-type">int</span>                  <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;操作数量&#x27;</span>,  <br>    success           tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">default</span> <span class="hljs-number">0</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否成功&#x27;</span>  <br>);<br></code></pre></td></tr></table></figure><p><code>stock_instance_id</code> 就是库存明细表中的 <code>id</code></p><p><strong>更新库存时</strong>：</p><ol><li>创建临时表</li><li>先将每一行库存明细要锁定的库存数量插入到临时表中</li><li>然后通过 UPDATE JOIN 语句批量更新库存，同时将是否更新成功的信息保存在临时表的 <code>success</code> 字段中</li><li>统计 <code>success</code> 字段，判断是否回滚</li><li>删除临时表</li></ol><p>使用的 UPDATE 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL">update temp_stock_operation o <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> p_stock_instance s  <br>    <span class="hljs-keyword">on</span> o.stock_instance_id <span class="hljs-operator">=</span> s.id  <br><span class="hljs-keyword">set</span> o.success          <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,  <br>    s.locking_quantity <span class="hljs-operator">=</span> s.locking_quantity <span class="hljs-operator">+</span> o.op_num  <br><span class="hljs-keyword">where</span> s.stock_quantity <span class="hljs-operator">-</span> s.locking_quantity <span class="hljs-operator">&gt;=</span> o.op_num  <br>  <span class="hljs-keyword">and</span> o.success <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>检查是否成功，该语句返回值为 0 或 1 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> success  <br><span class="hljs-keyword">from</span> temp_stock_operation  <br><span class="hljs-keyword">where</span> success <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>最后删除临时表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> temporary <span class="hljs-keyword">table</span> temp_stock_operation;<br></code></pre></td></tr></table></figure><h4 id="将二者结合"><a href="#将二者结合" class="headerlink" title="将二者结合"></a>将二者结合</h4><p>虽然使用临时表的方案更新大量数据时很快，但是如果使用这个方法来更新几十条库存时就会发现速度又变慢了，在我的测试中，更新三四十条的耗时几乎与更新两万条相等。</p><p>就是说这条更新语句在数量少的时候性能会下降</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL">update temp_stock_operation o <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> p_stock_instance s  <br>    <span class="hljs-keyword">on</span> o.stock_instance_id <span class="hljs-operator">=</span> s.id  <br><span class="hljs-keyword">set</span> o.success          <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,  <br>    s.locking_quantity <span class="hljs-operator">=</span> s.locking_quantity <span class="hljs-operator">+</span> o.op_num  <br><span class="hljs-keyword">where</span> s.stock_quantity <span class="hljs-operator">-</span> s.locking_quantity <span class="hljs-operator">&gt;=</span> o.op_num  <br>  <span class="hljs-keyword">and</span> o.success <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>分析它的执行计划，发现当更新行数小于 45 时，JOIN 操作便不会走索引，而是全表扫描，导致性能下降。这时候即使使用下面的 SQL 语句强制索引也是<strong>没用的</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">update temp_stock_operation o force index <span class="hljs-keyword">for</span> <span class="hljs-keyword">join</span> (stock_instance_id)<br>    <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> p_stock_instance s  <br>    <span class="hljs-keyword">on</span> o.stock_instance_id <span class="hljs-operator">=</span> s.id  <br><span class="hljs-keyword">set</span> o.success          <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,  <br>    s.locking_quantity <span class="hljs-operator">=</span> s.locking_quantity <span class="hljs-operator">+</span> o.op_num  <br><span class="hljs-keyword">where</span> s.stock_quantity <span class="hljs-operator">-</span> s.locking_quantity <span class="hljs-operator">&gt;=</span> o.op_num  <br>  <span class="hljs-keyword">and</span> o.success <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>所以我们要将这两种方法结合，来获得最佳的性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (operationMapping.size() &lt; <span class="hljs-number">45</span>) &#123;  <br>    <span class="hljs-comment">// WHEN 语句方案</span><br>    Integer num = pStockInstanceDao.operationStockSmallData(operationMapping);  <br>    <span class="hljs-keyword">if</span> (num != operationMapping.size()) &#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;操作失败&quot;</span>);  <br>    &#125;  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>    <span class="hljs-comment">// 临时表方案</span><br>    Boolean success = pStockInstanceDao.operationStockBigData(operationMapping);  <br>    <span class="hljs-keyword">if</span> (!success) &#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;操作失败&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="提高并发量"><a href="#提高并发量" class="headerlink" title="提高并发量"></a>提高并发量</h3><p>由于并发时多个线程间存在竞态条件，可能导致库存扣减失败，而前面说到库存明细表中一件商品可能对应多条库存明细，就是说如果并发导致有一条库存明细扣减失败的话很可能这个商品在其他的库存明细中还有库存。而且由于无论更没更新成功，线程都会占有数据库行的写锁，这就要求我们更新失败时最好能够快速释放锁，这又会导致接口会误报库存不足。</p><h4 id="商品编码锁"><a href="#商品编码锁" class="headerlink" title="商品编码锁"></a>商品编码锁</h4><p>一个解决办法如下</p><ol><li>线程在执行库存数量查询前为订单中的每个商品编码获取一个分布式锁，只有获得全部商品编码的锁时才进行库存的查询操作</li><li>线程在更新完库存后释放所持有的商品编码锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">RLock[] locks = productSids.seream()  <br>        .distinct()  <br>        .map(key -&gt; <span class="hljs-string">&quot;ced:pStockInstance:&quot;</span> + key)  <br>        .sorted()  <br>        .map(key -&gt; redissonClient.getLock(key))  <br>        .toArray(RLock[]::<span class="hljs-keyword">new</span>);  <br>RLock skuLock = redissonClient.getMultiLock(locks);<br><br><span class="hljs-comment">// 加锁</span><br>skuLock.lock();<br><br><span class="hljs-comment">// 解锁</span><br>skuLock.unlockAsync();<br></code></pre></td></tr></table></figure><p>这种方法当所有的订单都锁定同一个商品时就会导致程序退化成串行执行，效率很慢。</p><h4 id="和并请求"><a href="#和并请求" class="headerlink" title="和并请求"></a>和并请求</h4><p>由于前文我们已经将库存更新的方法优化的足够快，因此想高效地解决竞态条件的问题，可以将各个请求的参数在应用程序中合并在一起，然后使用一个线程批量扣减，从而避免线程间扣减冲突。</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/202206130944601.png" alt="合并请求"></p><p>使线程阻塞并被唤醒的关键代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuardedObject</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">K</span>&gt; </span>&#123;  <br>    <span class="hljs-comment">//受保护的对象  </span><br>    T obj;  <br>    <span class="hljs-keyword">final</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();  <br>    <span class="hljs-keyword">final</span> Condition done = lock.newCondition();  <br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> timeout = <span class="hljs-number">60</span>;  <br>    <span class="hljs-comment">//保存所有GuardedObject  </span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Map&lt;Object, GuardedObject&gt; gos = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GuardedObject</span><span class="hljs-params">(K key)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.key = key;  <br>    &#125;  <br>  <br>    K key;  <br>  <br>    <span class="hljs-comment">// 1. 被请求线程通过唯一 key 获得阻塞对象，然后将 key 存入消息，发送到扣减中心  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K&gt; <span class="hljs-function">GuardedObject <span class="hljs-title">create</span><span class="hljs-params">(K key)</span> </span>&#123;  <br>        GuardedObject go = <span class="hljs-keyword">new</span> GuardedObject(key.toString());  <br>        gos.put(key, go);  <br>        <span class="hljs-keyword">return</span> go;  <br>    &#125;   <br>  <br>    <span class="hljs-comment">// 2. 被请求线程稍后调用阻塞对象的该方法，阻塞，等待被唤醒</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Optional&lt;T&gt; <span class="hljs-title">get</span><span class="hljs-params">(Predicate&lt;T&gt; p)</span> </span>&#123;  <br>        lock.lock();  <br>        Long start = System.currentTimeMillis();  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">while</span> (!p.test(obj)) &#123;  <br>                done.await(timeout, TimeUnit.SECONDS);  <br>                <span class="hljs-keyword">if</span> (System.currentTimeMillis() - start &gt;= timeout * <span class="hljs-number">1000</span>) &#123;  <br>                    gos.remove(key);  <br>                    <span class="hljs-keyword">break</span>;  <br>                &#125;  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> Optional.ofNullable(obj);  <br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            lock.unlock();  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-comment">// 3. 结果监听器根据结果消息中的 key 找到对应阻塞对象，传入结果并唤醒对应线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K, T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fireEvent</span><span class="hljs-params">(K key, T obj)</span> </span>&#123;  <br>        GuardedObject go = gos.remove(key);  <br>        <span class="hljs-keyword">if</span> (go != <span class="hljs-keyword">null</span>) &#123;  <br>            go.onChanged(obj);  <br>        &#125;  <br>    &#125; <br>  <br>    <span class="hljs-comment">//事件通知方法  </span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onChanged</span><span class="hljs-params">(T obj)</span> </span>&#123;  <br>        lock.lock();  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">this</span>.obj = obj;  <br>            done.signalAll();  <br>        &#125; <span class="hljs-keyword">finally</span> &#123;  <br>            lock.unlock();  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>实验环境为了获得最坏情况下的性能，在库存明细中存入了两万五千条同一商品，并将每一条的数据的库存数量设置为 1</p><p>在我的电脑中启动两个服务接收请求，启动若干线程对该商品进行扣减，结果如下</p><table><thead><tr><th>请求线程数量</th><th>总计锁库行数</th><th>全部处理耗时</th></tr></thead><tbody><tr><td>100</td><td>1000</td><td>1 S</td></tr><tr><td>500</td><td>5000</td><td>3 S</td></tr><tr><td>1000</td><td>10000</td><td>4 S</td></tr><tr><td>2000</td><td>20000</td><td>8 S</td></tr><tr><td>3000</td><td>25000</td><td>12 S</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>以下是我在编写代码时发现的一些需要注意的点：</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>在创建临时表时 <code>stock_instance_id</code> 要创建唯一索引，因为这个字段要充当 JOIN 语句的条件，实测不加唯一索引性能会很差。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> temporary <span class="hljs-keyword">table</span> temp_stock_operation  <br>(  <br>    stock_instance_id <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">unique</span>   <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;库存实例ID&#x27;</span>, <br></code></pre></td></tr></table></figure><h3 id="加快消息队列读取"><a href="#加快消息队列读取" class="headerlink" title="加快消息队列读取"></a>加快消息队列读取</h3><p>扣减中心的库存扣减线程直接从消息队列读取消息效率较低，在本案例中，可以新建一个本地队列，用其他线程将消息队列中的消息搬运到本地队列，让扣减线程操作本地队列而不是消息队列，这样可以大幅提高扣减效率。</p><hr><p>源码请见：<a href="https://github.com/solidSpoon/inventory-lock-master">https://github.com/solidSpoon/inventory-lock-master</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB 初探</title>
    <link href="/2022/04/11/MongoDB%20%E5%88%9D%E6%8E%A2/"/>
    <url>/2022/04/11/MongoDB%20%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-初探"><a href="#MongoDB-初探" class="headerlink" title="MongoDB 初探"></a>MongoDB 初探</h1><p>对于已经熟悉 MySQL 的同学来说，初次接触 MongoDB 可能会不习惯它的语法，本篇文章将通过一个简单的示例带你入门 MongoDB。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>对于 MongoDB 新手，可以借助 DataGrip 来学习MongoDB 语法。在 MongoDB 中实现准备好两个表 “old” 和 “new”，并随意插入一些数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">db.createCollection(<span class="hljs-string">&quot;new&quot;</span>)  <br>db.createCollection(<span class="hljs-string">&quot;old&quot;</span>)<br><br>db.old.insertOne(&#123;  <br>id: <span class="hljs-number">1</span>,  <br>name: old  <br>&#125;)  <br>db.new.insertOne(&#123;  <br>id: <span class="hljs-number">2</span>,  <br>name: <span class="hljs-number">13</span>,  <br>goods: <span class="hljs-number">1</span>  <br>&#125;)<br><span class="hljs-comment">// 随意插入数据</span><br></code></pre></td></tr></table></figure><p>在 DataGrip 中输入如下的 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> &quot;new&quot; <span class="hljs-keyword">as</span> aleft <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> &quot;old&quot; <span class="hljs-keyword">as</span> bright <span class="hljs-keyword">on</span> aleft.id <span class="hljs-operator">=</span> bright.id;<br></code></pre></td></tr></table></figure><p>然后在这条语句上「右键」，选择 「Show JS Script」，会发现 DataGrip 会帮助我们将 SQL 语句转为 MongoDB 语句，接下来我们通过研究这个语句来体会 MongoDB 的基本思想</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">db.getSiblingDB(<span class="hljs-string">&quot;test&quot;</span>).getCollection(<span class="hljs-string">&quot;new&quot;</span>).aggregate([  <br>  &#123;  <br>    $project: &#123;<span class="hljs-string">&quot;aleft&quot;</span>: <span class="hljs-string">&quot;$$ROOT&quot;</span>, <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">0</span>&#125;  <br>  &#125;,  <br>  &#123;  <br>    $lookup: &#123;  <br>      localField: <span class="hljs-string">&quot;aleft.id&quot;</span>,  <br>      <span class="hljs-keyword">from</span>: <span class="hljs-string">&quot;old&quot;</span>,  <br>      foreignField: <span class="hljs-string">&quot;id&quot;</span>,  <br>      <span class="hljs-keyword">as</span>: <span class="hljs-string">&quot;bright&quot;</span>  <br>    &#125;  <br>  &#125;,  <br>  &#123;  <br>    $unwind: &#123;  <br>      path: <span class="hljs-string">&quot;$bright&quot;</span>,  <br>      preserveNullAndEmptyArrays: <span class="hljs-literal">true</span>  <br>    &#125;  <br>  &#125;,  <br>  &#123;  <br>    $replaceRoot: &#123;  <br>      newRoot: &#123;<span class="hljs-attr">$mergeObjects</span>: [<span class="hljs-string">&quot;$aleft&quot;</span>, <span class="hljs-string">&quot;$bright&quot;</span>, <span class="hljs-string">&quot;$$ROOT&quot;</span>]&#125;  <br>    &#125;  <br>  &#125;,  <br>  &#123;  <br>    $project: &#123;<span class="hljs-string">&quot;aleft&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;bright&quot;</span>: <span class="hljs-number">0</span>&#125;  <br>  &#125;  <br>])<br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h3><p><code>db.collection.aggregate(管道，选项)</code> 方法参数接收一个包含了若干操作的数组，类似于 Linux 中的管道一样，对集合依次进行操作。</p><h3 id="project"><a href="#project" class="headerlink" title="project"></a>project</h3><p>第一个操作为 <code>$project</code> ，这是一个映射操作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br>  $project: &#123;&quot;aleft&quot;: &quot;$$ROOT&quot;, &quot;_id&quot;: 0&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>$$ROOT</code> 即引用顶级文档，效果是将当前文档（行）的所有数据放到 <code>aleft</code> 字段下。<code>&quot;_id&quot;: 0</code> 代表隐藏 <code>_id</code> 行，当设定为 <code>&quot;_id&quot;: 1</code> 时会展示 <code>_id</code> 行，（<code>_id</code> 由 MongoDB 自动生成）结果示意如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">[  <br>  &#123;  <br>    <span class="hljs-attr">&quot;aleft&quot;</span>: &#123;  <br>      <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-number">12</span>  <br>    &#125;  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;624ce445b67f62529d94a83e&quot;</span>&#125;, <span class="hljs-comment">// 当 _id: 1 时会展示 id </span><br>    <span class="hljs-attr">&quot;aleft&quot;</span>: &#123;  <br>      <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;624ce445b67f62529d94a83e&quot;</span>&#125;,  <br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">2</span>,  <br>      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-number">13</span>,  <br>      <span class="hljs-attr">&quot;goods&quot;</span>: <span class="hljs-number">1</span>  <br>    &#125;  <br>  &#125;  <br>]<br></code></pre></td></tr></table></figure><h3 id="lookup"><a href="#lookup" class="headerlink" title="lookup"></a>lookup</h3><p>第二个操作为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br>  $lookup: &#123;  <br>    localField: &quot;aleft.id&quot;,  <br>    from: &quot;old&quot;,  <br>    foreignField: &quot;id&quot;,  <br>    as: &quot;bright&quot; <br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>顾名思义，这是一个查找操作，它根据第一步结果中的 <code>aleft.id</code> 字段，在 <code>old</code> 表中查找 <code>id</code> 与之相等的文档（行），并将所有匹配的结果以数组方式放在 <code>bright</code> 字段下，结果示意如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">[  <br>  &#123;  <br>    <span class="hljs-attr">&quot;aleft&quot;</span>: &#123;  <br>      <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-number">12</span>  <br>     &#125;,  <br>    <span class="hljs-attr">&quot;bright&quot;</span>: [  <br>      &#123;  <br>        <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;624ce82ab67f62529d94a84c&quot;</span>&#125;,  <br>        <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>      &#125;,  <br>      &#123;  <br>        <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;624ce867b67f62529d94a84e&quot;</span>&#125;,  <br>        <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>        <span class="hljs-attr">&quot;vbsss&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>      &#125;  <br>    ]  <br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="unwind"><a href="#unwind" class="headerlink" title="unwind"></a>unwind</h3><p>第三个操作为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br>  $unwind: &#123;  <br>    path: &quot;$bright&quot;,  <br>    preserveNullAndEmptyArrays: true<br>  &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p>这个操作指明了使用 <code>$bright</code> 字段，这个字段是一个数组，<code>$unwind</code> 操作会将 <code>$bright</code> 中的每一个元素与 <code>aleft</code> 组合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json">[  <br>  &#123;  <br>    <span class="hljs-attr">&quot;aleft&quot;</span>: &#123;  <br>      <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-number">12</span>  <br>    &#125;,  <br>    <span class="hljs-attr">&quot;bright&quot;</span>: &#123;  <br>      <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;624ce82ab67f62529d94a84c&quot;</span>&#125;,  <br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>     &#125;  <br>  &#125;,  <br>  &#123;  <br>    <span class="hljs-attr">&quot;aleft&quot;</span>: &#123;  <br>      <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-number">12</span>  <br>     &#125;,  <br>    <span class="hljs-attr">&quot;bright&quot;</span>: &#123;  <br>      <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;624ce867b67f62529d94a84e&quot;</span>&#125;,  <br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>      <span class="hljs-attr">&quot;vbsss&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>     &#125;  <br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>至此，我们已经将两个表中关联的行组合在了一起，接下来需要将这个结构简化一下</p><h3 id="replaceRoot"><a href="#replaceRoot" class="headerlink" title="replaceRoot"></a>replaceRoot</h3><p>第四个操作为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br>  $replaceRoot: &#123;  <br>    newRoot: &#123;$mergeObjects: [&quot;$aleft&quot;, &quot;$bright&quot;, &quot;$$ROOT&quot;]&#125;  <br>  &#125;  <br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="mergeObjects"><a href="#mergeObjects" class="headerlink" title="mergeObjects"></a>mergeObjects</h3><p><code>$mergeObjects</code> 操作会将参数中元素的内容进行合并，如果有重复，后面的值会覆盖前面的值，比如下面的这个文档</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br>  <span class="hljs-attr">&quot;aleft&quot;</span>: &#123;  <br>    <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-number">12</span>  <br>  &#125;,  <br>  <span class="hljs-attr">&quot;bright&quot;</span>: &#123;  <br>    <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;624ce82ab67f62529d94a84c&quot;</span>&#125;,  <br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>   &#125;  <br>&#125;,<br></code></pre></td></tr></table></figure><p>执行 <code>$mergeObjects: [&quot;$aleft&quot;, &quot;$bright&quot;, &quot;$$ROOT&quot;]</code> 操作后结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br>  <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>  <span class="hljs-attr">&quot;aleft&quot;</span>: &#123;  <br>    <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-number">12</span>  <br>  &#125;,  <br>  <span class="hljs-attr">&quot;bright&quot;</span>: &#123;  <br>    <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;624ce82ab67f62529d94a84c&quot;</span>&#125;,  <br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>  &#125;,  <br>  <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="replaceRoot-1"><a href="#replaceRoot-1" class="headerlink" title="replaceRoot"></a>replaceRoot</h3><p><code>$replaceRoot</code> 将指定的文档提升到顶层，并丢弃顶层所有其他字段。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">[  <br>  &#123;  <br>    <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>    <span class="hljs-attr">&quot;aleft&quot;</span>: &#123;  <br>      <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-number">12</span>  <br>    &#125;,  <br>    <span class="hljs-attr">&quot;bright&quot;</span>: &#123;  <br>      <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;624ce82ab67f62529d94a84c&quot;</span>&#125;,  <br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>      <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>    &#125;,  <br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>  &#125;<br>]<br><br></code></pre></td></tr></table></figure><p>至此，只要将 <code>aleft</code> 和 <code>bright</code> 两个参数删掉就得到了最后的结果，操作为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br>  $project: &#123;&quot;aleft&quot;: 0, &quot;bright&quot;: 0&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>结果示意如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">[  <br>  &#123;  <br>    <span class="hljs-attr">&quot;_id&quot;</span>: &#123;<span class="hljs-attr">&quot;$oid&quot;</span>: <span class="hljs-string">&quot;6247f1e253a1be11c3b88d8b&quot;</span>&#125;,  <br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">1</span>,  <br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;haha&quot;</span>  <br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>MongoDB 中的 JOIN 操作还是十分复杂的，与 MySQL 不同， MongoDB 中的文档结构并没有限制，所以可以采用<a href="https://www.mongodb.com/docs/v4.2/tutorial/query-embedded-documents/">嵌套文档</a>的方式将本来需要关联的数据保存在一起，从而避免 JOIN 操作</p>]]></content>
    
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Distributed locks with Redis</title>
    <link href="/2022/03/23/Distributed%20locks%20with%20Redis/"/>
    <url>/2022/03/23/Distributed%20locks%20with%20Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Distributed-locks-with-Redis"><a href="#Distributed-locks-with-Redis" class="headerlink" title="Distributed locks with Redis"></a>Distributed locks with Redis</h1><blockquote><p>原文链接：<a href="https://redis.io/topics/distlock">https://redis.io/topics/distlock</a></p></blockquote><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Distributed locks are a very useful primitive in many environments where different processes must operate with shared resources in a mutually exclusive way.</p><p>分布式锁在许多环境中是非常有用的原语，在这些环境中不同的进程必须以互斥的方式使用共享资源。</p><p>There are a number of libraries and blog posts describing how to implement a DLM (Distributed Lock Manager) with Redis, but every library uses a different approach, and many use a simple approach with lower guarantees compared to what can be achieved with slightly more complex designs.</p><p>有许多库和博客文章描述了如何使用 Redis 实现 DLM（分布式锁管理器），但是每个库都使用不同的方法，并且与稍微复杂一点的库相比，许多库使用的保证较低的简单方法设计。</p><p>This page is an attempt to provide a more canonical algorithm to implement distributed locks with Redis. We propose an algorithm, called <strong>Redlock</strong>, which implements a DLM which we believe to be safer than the vanilla single instance approach. We hope that the community will analyze it, provide feedback, and use it as a starting point for the implementations or more complex or alternative designs.</p><p>本页试图提供一种更规范的算法来使用 Redis 实现分布式锁。我们提出了一种称为 <strong>Redlock</strong> 的算法，它实现了一个我们认为比普通单实例方法更安全的 DLM。我们希望社区能够对其进行分析，提供反馈，并将其用作实施或更复杂或替代设计的起点。</p><h2 id="Implementations"><a href="#Implementations" class="headerlink" title="Implementations"></a>Implementations</h2><p>Before describing the algorithm, here are a few links to implementations already available that can be used for reference.</p><p>在描述算法之前，这里有一些已经可用的实现链接，可供参考。</p><ul><li><a href="https://github.com/antirez/redlock-rb">Redlock-rb</a> (Ruby implementation). There is also a <a href="https://github.com/leandromoreira/redlock-rb">fork of Redlock-rb</a> that adds a gem for easy distribution and perhaps more.</li><li><a href="https://github.com/SPSCommerce/redlock-py">Redlock-py</a> (Python implementation).</li><li><a href="https://github.com/brainix/pottery#redlock">Pottery</a> (Python implementation).</li><li><a href="https://github.com/joanvila/aioredlock">Aioredlock</a> (Asyncio Python implementation).</li><li><a href="https://github.com/ronnylt/redlock-php">Redlock-php</a> (PHP implementation).</li><li><a href="https://github.com/malkusch/lock#phpredismutex">PHPRedisMutex</a> (further PHP implementation)</li><li><a href="https://github.com/cheprasov/php-redis-lock">cheprasov/php-redis-lock</a> (PHP library for locks)</li><li><a href="https://github.com/rtckit/reactphp-redlock">rtckit/react-redlock</a> (Async PHP implementation)</li><li><a href="https://github.com/go-redsync/redsync">Redsync</a> (Go implementation).</li><li><a href="https://github.com/mrniko/redisson">Redisson</a> (Java implementation).</li><li><a href="https://github.com/sbertrang/redis-distlock">Redis::DistLock</a> (Perl implementation).</li><li><a href="https://github.com/jacket-code/redlock-cpp">Redlock-cpp</a> (C++ implementation).</li><li><a href="https://github.com/kidfashion/redlock-cs">Redlock-cs</a> (C#/.NET implementation).</li><li><a href="https://github.com/samcook/RedLock.net">RedLock.net</a> (C#/.NET implementation). Includes async and lock extension support.</li><li><a href="https://github.com/psibernetic/scarletlock">ScarletLock</a> (C# .NET implementation with configurable datastore)</li><li><a href="https://github.com/LiZhenNet/Redlock4Net">Redlock4Net</a> (C# .NET implementation)</li><li><a href="https://github.com/mike-marcacci/node-redlock">node-redlock</a> (NodeJS implementation). Includes support for lock extension.</li></ul><h2 id="Safety-and-Liveness-guarantees"><a href="#Safety-and-Liveness-guarantees" class="headerlink" title="Safety and Liveness guarantees"></a>Safety and Liveness guarantees</h2><p>We are going to model our design with just three properties that, from our point of view, are the minimum guarantees needed to use distributed locks in an effective way.</p><p>我们将仅使用三个属性对我们的设计进行建模，从我们的角度来看，这些属性是有效使用分布式锁所需的最低保证。</p><ol><li><p>Safety property: Mutual exclusion. At any given moment, only one client can hold a lock.</p></li><li><p>Liveness property A: Deadlock free. Eventually it is always possible to acquire a lock, even if the client that locked a resource crashes or gets partitioned.</p></li><li><p>Liveness property B: Fault tolerance. As long as the majority of Redis nodes are up, clients are able to acquire and release locks.</p></li><li><p>安全性：互斥。在任何给定时刻，只有一个客户端可以持有锁。</p></li><li><p>Liveness property A: 无死锁。最终，即使锁定资源的客户端崩溃或被分区，也总是可以获得锁。</p></li><li><p>Liveness property B: 容错。只要大多数 Redis 节点都启动，客户端就可以获取和释放锁。</p></li></ol><h2 id="Why-failover-based-implementations-are-not-enough"><a href="#Why-failover-based-implementations-are-not-enough" class="headerlink" title="Why failover-based implementations are not enough"></a>Why failover-based implementations are not enough</h2><p>To understand what we want to improve, let’s analyze the current state of affairs with most Redis-based distributed lock libraries.</p><p>为了了解我们想要改进的地方，让我们分析一下大多数基于 Redis 的分布式锁库的现状。</p><p>The simplest way to use Redis to lock a resource is to create a key in an instance. The key is usually created with a limited <strong>time to live</strong>, using the Redis expires feature, so that eventually it will get released (property 2 in our list). When the client needs to release the resource, it deletes the key.</p><p>使用 Redis 锁定资源的最简单方法是在实例中创建 key。key 通常是使用 Redis 过期功能在有限的时间内创建的，因此最终它会被释放（我们列表中的属性 2）。当客户端需要释放资源时，它会删除 key。</p><p>Superficially this works well, but there is a problem: this is a single point of failure in our architecture. What happens if the Redis master goes down? Well, let’s add a replica! And use it if the master is unavailable. This is unfortunately not viable. By doing so we can’t implement our safety property of mutual exclusion, because Redis replication is asynchronous.</p><p>从表面上看，这很好用，但有一个问题：这是我们架构中的单点故障。如果 Redis master 宕机了怎么办？好吧，让我们添加一个副本！如果 master 不可用，请使用它。不幸的是，这是不可行的。这样做我们无法实现互斥的安全属性，因为 Redis 复制是异步的。</p><p>There is an obvious race condition with this model:</p><p>这个模型有一个明显的竞争条件：</p><ol><li><p>Client A acquires the lock in the master.</p></li><li><p>The master crashes before the write to the key is transmitted to the replica.</p></li><li><p>The replica gets promoted to master.</p></li><li><p>Client B acquires the lock to the same resource A already holds a lock for. <strong>SAFETY VIOLATION!</strong></p></li><li><p>客户端 A 获取 master 中的锁。</p></li><li><p>master 在对 key 的写入传输到 replica 之前崩溃。</p></li><li><p>replica 被提升为 master。</p></li><li><p>客户端 B 获取 A 已经持有锁的同一资源的锁。 <strong>违反安全规定！</strong></p></li></ol><p>Sometimes it is perfectly fine that under special circumstances, like during a failure, multiple clients can hold the lock at the same time. If this is the case, you can use your replication based solution. Otherwise we suggest to implement the solution described in this document.</p><p>有时在特殊情况下（例如在故障期间），多个客户端可以同时持有锁是完全可以的。如果是这种情况，您可以使用基于复制的解决方案。否则，我们建议实施本文档中描述的解决方案。</p><h2 id="Correct-implementation-with-a-single-instance"><a href="#Correct-implementation-with-a-single-instance" class="headerlink" title="Correct implementation with a single instance"></a>Correct implementation with a single instance</h2><p>Before trying to overcome the limitation of the single instance setup described above, let’s check how to do it correctly in this simple case, since this is actually a viable solution in applications where a race condition from time to time is acceptable, and because locking into a single instance is the foundation we’ll use for the distributed algorithm described here.</p><p>在尝试克服上述单实例设置的限制之前，让我们检查一下如何在这个简单的情况下正确地做到这一点，因为在不时出现竞争条件的应用程序中，这实际上是一个可行的解决方案，并且因为锁定到单个实例是我们将用于此处描述的分布式算法的基础。</p><p>To acquire the lock, the way to go is the following:</p><p>获取锁的方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SET resource_name my_random_value NX PX 30000<br></code></pre></td></tr></table></figure><p>The command will set the key only if it does not already exist (NX option), with an expire of 30000 milliseconds (PX option). The key is set to a value “<code>my_random_value</code>”. This value must be unique across all clients and all lock requests.</p><p>该命令仅在密钥不存在时设置密钥（NX option），过期时间为 30000 毫秒（PX option）。密钥设置为值<code>my_random_value</code>。此值在所有客户端和所有锁定请求中必须是唯一的。</p><p>Basically the random value is used in order to release the lock in a safe way, with a script that tells Redis: remove the key only if it exists and the value stored at the key is exactly the one I expect to be. This is accomplished by the following Lua script:</p><p>基本上，随机值用于以安全的方式释放锁，脚本告诉 Redis：仅当密钥存在并且存储在密钥中的值正是我期望的值时才删除密钥。这是通过以下 Lua 脚本完成的：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&quot;get&quot;</span>,KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>] <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&quot;del&quot;</span>,KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>This is important in order to avoid removing a lock that was created by another client. For example a client may acquire the lock, get blocked in some operation for longer than the lock validity time (the time at which the key will expire), and later remove the lock, that was already acquired by some other client. Using just DEL is not safe as a client may remove the lock of another client. With the above script instead every lock is “signed” with a random string, so the lock will be removed only if it is still the one that was set by the client trying to remove it.</p><p>这对于避免删除由另一个客户端创建的锁很重要。例如，一个客户端可能获取了锁，在某个操作中被阻塞的时间超过了锁的有效时间（密钥过期的时间），然后移除了已经被其他客户端获取的锁。仅使用 DEL 是不安全的，因为客户端可能会删除另一个客户端的锁定。使用上面的脚本，每个锁都用一个随机字符串“签名”，所以只有当它仍然是客户端试图移除它时设置的锁才会被移除。</p><p>What should this random string be? I assume it’s 20 bytes from /dev/urandom, but you can find cheaper ways to make it unique enough for your tasks. For example a safe pick is to seed RC4 with /dev/urandom, and generate a pseudo random stream from that. A simpler solution is to use a combination of unix time with microseconds resolution, concatenating it with a client ID, it is not as safe, but probably up to the task in most environments.</p><p>这个随机字符串应该是什么？我假设它是 /dev/urandom 中的 20 个字节，但您可以找到更便宜的方法来使其对您的任务足够独特。例如，一个安全的选择是使用 /dev/urandom 作为 RC4 的种子，并从中生成一个伪随机流。一个更简单的解决方案是使用 unix 时间与微秒分辨率的组合，将其与客户端 ID 连接起来，它不是那么安全，但可能在大多数环境中都可以胜任。</p><p>The time we use as the key <strong>time to live</strong>, is called the “lock validity time”. It is both the auto release time, and the time the client has in order to perform the operation required before another client may be able to acquire the lock again, without technically violating the mutual exclusion guarantee, which is only limited to a given window of time from the moment the lock is acquired.</p><p>key 的过期时间，称为「锁有效时间」。它既是自动释放时间，也是客户端在另一个客户端可能能够再次获取锁之前执行所需操作的时间，而不会在技术上违反互斥保证，互斥保证仅限于从获得锁的那一刻起的给定时间窗口</p><p>So now we have a good way to acquire and release the lock. The system, reasoning about a non-distributed system composed of a single, always available, instance, is safe. Let’s extend the concept to a distributed system where we don’t have such guarantees.</p><p>所以现在我们有了一个获取和释放锁的好方法。该系统推理由一个始终可用的单个实例组成的非分布式系统是安全的。让我们将这个概念扩展到没有此类保证的分布式系统。</p><h2 id="The-Redlock-algorithm"><a href="#The-Redlock-algorithm" class="headerlink" title="The Redlock algorithm"></a>The Redlock algorithm</h2><p>In the distributed version of the algorithm we assume we have N Redis masters. Those nodes are totally independent, so we don’t use replication or any other implicit coordination system. We already described how to acquire and release the lock safely in a single instance. We take for granted that the algorithm will use this method to acquire and release the lock in a single instance. In our examples we set N=5, which is a reasonable value, so we need to run 5 Redis masters on different computers or virtual machines in order to ensure that they’ll fail in a mostly independent way.</p><p>在算法的分布式版本中，我们假设我们有 N 个 Redis master。这些节点是完全独立的，所以我们不使用复制或任何其他隐式协调系统。我们已经描述了如何在单个实例中安全地获取和释放锁。我们理所当然地认为算法会使用这种方法在单个实例中获取和释放锁。在我们的示例中，我们设置 N=5，这是一个合理的值，因此我们需要在不同的计算机或虚拟机上运行 5 个 Redis 主服务器，以确保它们以几乎独立的方式发生故障。</p><p>In order to acquire the lock, the client performs the following operations:</p><p>为了获取锁，客户端执行以下操作：</p><ol><li><p>It gets the current time in milliseconds.</p></li><li><p>It tries to acquire the lock in all the N instances sequentially, using the same key name and random value in all the instances. During step 2, when setting the lock in each instance, the client uses a timeout which is small compared to the total lock auto-release time in order to acquire it. For example if the auto-release time is 10 seconds, the timeout could be in the ~ 5-50 milliseconds range. This prevents the client from remaining blocked for a long time trying to talk with a Redis node which is down: if an instance is not available, we should try to talk with the next instance ASAP.</p></li><li><p>The client computes how much time elapsed in order to acquire the lock, by subtracting from the current time the timestamp obtained in step 1. If and only if the client was able to acquire the lock in the majority of the instances (at least 3), and the total time elapsed to acquire the lock is less than lock validity time, the lock is considered to be acquired.</p></li><li><p>If the lock was acquired, its validity time is considered to be the initial validity time minus the time elapsed, as computed in step 3.</p></li><li><p>If the client failed to acquire the lock for some reason (either it was not able to lock N/2+1 instances or the validity time is negative), it will try to unlock all the instances (even the instances it believed it was not able to lock).</p></li><li><p>它以毫秒为单位获取当前时间。</p></li><li><p>它尝试顺序获取所有 N 个实例中的锁，在所有实例中使用相同的键名和随机值。在步骤 2 中，当在每个实例中设置锁时，客户端使用一个与锁自动释放总时间相比较小的 timeout 来获取它（防止单点阻塞）。例如，如果锁的自动释放时间为 10 秒，则 timeout 可能在 ~ 5-50 毫秒范围内。这可以防止客户端在尝试与已关闭的 Redis 节点通信时长时间保持阻塞：如果一个实例不可用，我们应该尽快尝试与下一个实例通信。</p></li><li><p>客户端通过从当前时间中减去步骤 1 中获得的时间戳来计算获取锁所用的时间。当且仅当客户端能够在大多数实例中获取锁（至少 3 个） ，且获取锁的总时间小于锁的有效时间，则认为锁已被获取。</p></li><li><p>如果获得了锁，则其有效时间被认为是初始有效时间减去经过的时间，如步骤 3 中计算的那样。</p></li><li><p>如果客户端由于某种原因未能获得锁（它无法锁定 $\frac{N}{2} + 1$ 个实例或有效时间为负数），它将尝试解锁所有实例（甚至是它认为无法锁定的实例）。</p></li></ol><h2 id="Is-the-algorithm-asynchronous"><a href="#Is-the-algorithm-asynchronous" class="headerlink" title="Is the algorithm asynchronous?"></a>Is the algorithm asynchronous?</h2><p>The algorithm relies on the assumption that while there is no synchronized clock across the processes, still the local time in every process flows approximately at the same rate, with an error which is small compared to the auto-release time of the lock. This assumption closely resembles a real-world computer: every computer has a local clock and we can usually rely on different computers to have a clock drift which is small.</p><p>该算法依赖于这样一个假设：虽然进程之间没有同步时钟，但每个进程中的本地时间仍然以大致相同的速率流动，与锁的自动释放时间相比，误差很小。这个假设非常类似于现实世界的计算机：每台计算机都有一个本地时钟，我们通常可以依靠不同的计算机来获得很小的时钟漂移。</p><p>At this point we need to better specify our mutual exclusion rule: it is guaranteed only as long as the client holding the lock will terminate its work within the lock validity time (as obtained in step 3), minus some time (just a few milliseconds in order to compensate for clock drift between processes).</p><p>此时我们需要更好地指定我们的互斥规则：只有持有锁的客户端会在锁的有效期内（如步骤 3 中获得）内终止其工作，减去一些时间（仅几毫秒，才能保证互斥规则为了补偿进程之间的时钟漂移）。</p><p>For more information about similar systems requiring a bound <em>clock drift</em>, this paper is an interesting reference: <a href="http://dl.acm.org/citation.cfm?id=74870">Leases: an efficient fault-tolerant mechanism for distributed file cache consistency</a>.</p><h2 id="Retry-on-failure"><a href="#Retry-on-failure" class="headerlink" title="Retry on failure"></a>Retry on failure</h2><p>When a client is unable to acquire the lock, it should try again after a random delay in order to try to desynchronize multiple clients trying to acquire the lock for the same resource at the same time (this may result in a split brain condition where nobody wins). Also the faster a client tries to acquire the lock in the majority of Redis instances, the smaller the window for a split brain condition (and the need for a retry), so ideally the client should try to send the SET commands to the N instances at the same time using multiplexing.</p><p>当客户端无法获取锁时，它应该在随机延迟后再次尝试，这是为了尽可能同步多个客户端同时尝试获取同一资源的锁（这可能会导致没有人获胜的脑裂状态）。此外，客户端在大多数 Redis 实例中尝试获取锁的速度越快，裂脑条件的窗口就越小（以及重试的需要），因此理想情况下，客户端应该尝试将 SET 命令发送到 N 个实例同时使用多路复用。</p><p>It is worth stressing how important it is for clients that fail to acquire the majority of locks, to release the (partially) acquired locks ASAP, so that there is no need to wait for key expiry in order for the lock to be acquired again (however if a network partition happens and the client is no longer able to communicate with the Redis instances, there is an availability penalty to pay as it waits for key expiration).</p><p>值得强调的是，对于未能获得大部分锁的客户端来说，尽快释放（部分）获得的锁是多么重要，这样就无需等待密钥到期才能再次获得锁（但是，如果发生网络分区并且客户端不再能够与 Redis 实例通信，则需要承担「等待密钥到期」的性能损失）。</p><h2 id="Releasing-the-lock"><a href="#Releasing-the-lock" class="headerlink" title="Releasing the lock"></a>Releasing the lock</h2><p>Releasing the lock is simple and involves just releasing the lock in all instances, whether or not the client believes it was able to successfully lock a given instance.</p><p>释放锁很简单，只涉及在所有实例中释放锁，无论客户端是否相信它能够成功锁定给定实例。</p><h2 id="Safety-arguments"><a href="#Safety-arguments" class="headerlink" title="Safety arguments"></a>Safety arguments</h2><p>Is the algorithm safe? We can try to understand what happens in different scenarios.</p><p>算法安全吗？我们可以尝试了解在不同情况下会发生什么。</p><p>To start let’s assume that a client is able to acquire the lock in the majority of instances. All the instances will contain a key with the same <strong>time to live</strong>. However, the key was set at different times, so the keys will also expire at different times. But if the first key was set at worst at time T1 (the time we sample before contacting the first server) and the last key was set at worst at time T2 (the time we obtained the reply from the last server), we are sure that the first key to expire in the set will exist for at least <code>MIN_VALIDITY=TTL-(T2-T1)-CLOCK_DRIFT</code>(TTL Time To Live). All the other keys will expire later, so we are sure that the keys will be simultaneously set for at least this time.</p><p>首先让我们假设客户端能够在大多数情况下获取锁。所有实例都将包含一个具有相同生存时间的 key。但是，key 是在不同的时间设置的，所以 key 也会在不同的时间过期。但是如果第一个密钥在时间 T1（我们在联系第一台服务器之前采样的时间）设置为最差，而最后一个密钥在时间 T2（我们从最后一个服务器获得回复的时间）设置为最差，我们确定集合中第一个过期的密钥将至少存在 <code>MIN_VALIDITY = TTL-(T2-T1)-CLOCK_DRIFT</code>。所有其他密钥都将在稍后过期，因此我们确信这些 key 将至少在段时间内同时设置。</p><p>During the time that the majority of keys are set, another client will not be able to acquire the lock, since N/2+1 SET NX operations can’t succeed if N/2+1 keys already exist. So if a lock was acquired, it is not possible to re-acquire it at the same time (violating the mutual exclusion property).</p><p>在设置大部分键的时间内，另一个客户端将无法获取锁，因为如果 $\frac{N}{2} + 1$ 个键已经存在，则 $\frac{N}{2} + 1$ 个 <code>SET NX</code> 操作将无法成功。所以如果获得了一个锁，就不可能同时重新获得它（违反互斥属性）。</p><p>However we want to also make sure that multiple clients trying to acquire the lock at the same time can’t simultaneously succeed.</p><p>但是，我们还想确保多个客户端同时尝试获取锁不能同时成功。</p><p>If a client locked the majority of instances using a time near, or greater, than the lock maximum validity time (the TTL we use for SET basically), it will consider the lock invalid and will unlock the instances, so we only need to consider the case where a client was able to lock the majority of instances in a time which is less than the validity time. In this case for the argument already expressed above, for <code>MIN_VALIDITY</code> no client should be able to re-acquire the lock. So multiple clients will be able to lock N/2+1 instances at the same time (with “time” being the end of Step 2) only when the time to lock the majority was greater than the TTL time, making the lock invalid.</p><p>如果客户端使用接近或大于锁最大有效时间（基本上就是我们给 SET 操作设置的的 TTL）的时间锁定大多数实例，它将认为锁无效并解锁实例，所以我们只需要考虑客户端能够在小于有效时间的时间内锁定大多数实例的情况。在这种情况下，对于上面已经表达的参数，对于“MIN_VALIDITY”，没有客户端应该能够重新获取锁。因此，只有当锁定多数的时间大于 TTL 时间时，多个客户端才能同时锁定 $\frac{N}{2} + 1$ 个实例（“时间”是步骤 2 的结束），如前文所述，锁定会被判定为无效。</p><p>Are you able to provide a formal proof of safety, point to existing algorithms that are similar, or find a bug? That would be greatly appreciated.</p><p>您是否能够提供正式的安全证明、指出现有的相似算法或发现错误？那将不胜感激。</p><h2 id="Liveness-arguments"><a href="#Liveness-arguments" class="headerlink" title="Liveness arguments"></a>Liveness arguments</h2><p>The system liveness is based on three main features:</p><p>系统活跃度基于三个主要特征：</p><ol><li><p>The auto release of the lock (since keys expire): eventually keys are available again to be locked.</p></li><li><p>The fact that clients, usually, will cooperate removing the locks when the lock was not acquired, or when the lock was acquired and the work terminated, making it likely that we don’t have to wait for keys to expire to re-acquire the lock.</p></li><li><p>The fact that when a client needs to retry a lock, it waits a time which is comparably greater than the time needed to acquire the majority of locks, in order to probabilistically make split brain conditions during resource contention unlikely.</p></li><li><p>锁的自动释放（因为 key 过期）：最终 key 可以再次被锁定。</p></li><li><p>事实上，客户端通常会在未获取锁或获取锁但工作终止时合作移除锁，这使得我们可能不必等待密钥过期来重新获取锁。</p></li><li><p>事实上，当客户端需要重试锁时，它等待的时间比获取大多数锁所需的时间要长得多，以便在资源争用期间不太可能出现脑裂情况。</p></li></ol><p>However, we pay an availability penalty equal to <a href="/commands/ttl">TTL</a> time on network partitions, so if there are continuous partitions, we can pay this penalty indefinitely. This happens every time a client acquires a lock and gets partitioned away before being able to remove the lock.</p><p>Basically if there are infinite continuous network partitions, the system may become not available for an infinite amount of time.</p><p>基本上，如果有无限连续的网络分区，系统可能会在无限长的时间内变得不可用。</p><h2 id="Performance-crash-recovery-and-fsync"><a href="#Performance-crash-recovery-and-fsync" class="headerlink" title="Performance, crash-recovery and fsync"></a>Performance, crash-recovery and fsync</h2><p>Many users using Redis as a lock server need high performance in terms of both latency to acquire and release a lock, and number of acquire / release operations that it is possible to perform per second. In order to meet this requirement, the strategy to talk with the N Redis servers to reduce latency is definitely multiplexing (or poor man’s multiplexing, which is, putting the socket in non-blocking mode, send all the commands, and read all the commands later, assuming that the RTT(Round-trip delay 往返延误) between the client and each instance is similar).</p><p>许多使用 Redis 作为锁服务器的用户在获取和释放锁的延迟以及每秒可以执行的获取/释放操作的数量方面都需要高性能。为了满足这个需求，与 N 台 Redis 服务器对话以减少延迟的策略肯定是多路复用（或者说穷人的多路复用，也就是将 socket 置于非阻塞模式，发送所有命令，稍后读取所有命令，假设客户端和每个实例之间的 RTT 是相似的）。</p><p>However there is another consideration to do about persistence if we want to target a crash-recovery system model.</p><p>然而，如果我们想要针对崩溃恢复系统模型，还有另一个关于持久性的考虑。</p><p>Basically to see the problem here, let’s assume we configure Redis without persistence at all. A client acquires the lock in 3 of 5 instances. One of the instances where the client was able to acquire the lock is restarted, at this point there are again 3 instances that we can lock for the same resource, and another client can lock it again, violating the safety property of exclusivity of lock.</p><p>基本上看这里的问题，让我们假设我们配置 Redis 时完全没有持久化。客户端在 5 个实例中的 3 个中获得了锁。其中一个客户端能够获得锁的实例被重启，此时我们又可以为同一个资源锁定 3 个实例，另一个客户端可以再次锁定它，违反了锁的排他性的安全属性。</p><p>If we enable AOF persistence, things will improve quite a bit. For example we can upgrade a server by sending SHUTDOWN and restarting it. Because Redis expires are semantically implemented so that virtually the time still elapses when the server is off, all our requirements are fine. However everything is fine as long as it is a clean shutdown. What about a power outage? If Redis is configured, as by default, to fsync on disk every second, it is possible that after a restart our key is missing. In theory, if we want to guarantee the lock safety in the face of any kind of instance restart, we need to enable fsync=always in the persistence setting. This in turn will totally ruin performances to the same level of CP systems that are traditionally used to implement distributed locks in a safe way.</p><p>如果我们启用 [[AOF]] 持久性，事情会改善很多。例如，我们可以通过发送 SHUTDOWN 并重新启动它来升级服务器。因为 Redis 过期是在语义上实现的，所以当服务器关闭时，实际上时间仍然过去，我们所有的要求都很好。但是，只要它是干净的关闭，一切都很好。停电怎么办？如果 Redis 默认配置为每秒在磁盘上 fsync 一次，那么重启后我们的 key 可能会丢失。理论上，如果我们想在任何类型的实例重启时保证锁的安全性，我们需要在持久化设置中启用 fsync=always。这反过来又会完全破坏与传统上用于以安全方式实现分布式锁的 CP 系统相同级别的性能。</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Consistency_model" title="Consistency model">Consistency</a><br>Every read receives the most recent write or an error.</p><p><a href="https://en.wikipedia.org/wiki/Availability" title="Availability">Availability</a><br>Every request receives a (non-error) response, without the guarantee that it contains the most recent write.</p><p><a href="https://en.wikipedia.org/wiki/Network_partitioning" title="Network partitioning">Partition tolerance</a><br>The system continues to operate despite(尽管) an arbitrary number of messages being dropped (or delayed) by the network between nodes.</p></blockquote><p>However things are better than what they look like at a first glance. Basically the algorithm safety is retained as long as when an instance restarts after a crash, it no longer participates to any <strong>currently active</strong> lock, so that the set of currently active locks when the instance restarts, were all obtained by locking instances other than the one which is rejoining the system.</p><p>然而，事情比乍看之下要好。基本上算法安全性只要在实例崩溃后重启时，不再参与任何<strong>当前活动的</strong>锁，因此实例重启时当前活动的锁集合，都是通过锁定实例获得的除了重新加入系统的那个。</p><p>To guarantee this we just need to make an instance, after a crash, unavailable for at least a bit more than the max <a href="/commands/ttl">TTL</a> we use, which is, the time needed for all the keys about the locks that existed when the instance crashed, to become invalid and be automatically released.</p><p>为了保证这一点，我们只需要创建一个实例，在崩溃之后，至少比我们使用的最大 <a href="/commands/ttl">TTL</a> 多一点之后再变得可用，即所有关于锁的键所需的时间实例崩溃时存在的，变为无效并自动释放。</p><p>Using <em>delayed restarts</em> it is basically possible to achieve safety even without any kind of Redis persistence available, however note that this may translate into an availability penalty. For example if a majority of instances crash, the system will become globally unavailable for <a href="/commands/ttl">TTL</a> (here globally means that no resource at all will be lockable during this time).</p><p>使用 <em>delayed restarts</em> 基本上可以实现安全，即使没有任何可用的 Redis 持久性，但是请注意，这可能会转化为可用性损失。例如，如果大多数实例崩溃，系统将在 <a href="/commands/ttl">TTL</a> 期间全局不可用（这里全局意味着在此期间根本没有资源可锁定）。</p><h2 id="Making-the-algorithm-more-reliable-Extending-the-lock"><a href="#Making-the-algorithm-more-reliable-Extending-the-lock" class="headerlink" title="Making the algorithm more reliable: Extending the lock"></a>Making the algorithm more reliable: Extending the lock</h2><p>If the work performed by clients is composed of small steps, it is possible to use smaller lock validity times by default, and extend the algorithm implementing a lock extension mechanism. Basically the client, if in the middle of the computation while the lock validity is approaching a low value, may extend the lock by sending a Lua script to all the instances that extends the TTL of the key if the key exists and its value is still the random value the client assigned when the lock was acquired.</p><p>如果客户端执行的工作由小步骤组成，则可以默认使用较小的锁有效时间，并扩展实现锁扩展机制的算法。基本上客户端，如果在计算过程中锁有效性接近一个低值（快过期了），可以通过向所有实例发送一个 Lua 脚本来扩展锁，条件是密钥存在并且它的值仍然是获取锁时客户端分配的随机值。</p><p>The client should only consider the lock re-acquired if it was able to extend the lock into the majority of instances, and within the validity time (basically the algorithm to use is very similar to the one used when acquiring the lock).</p><p>如果客户端能够将锁扩展到大多数实例，并且在有效时间内（基本上使用的算法与获取锁时使用的算法非常相似），客户端应该只考虑重新获取锁。</p><p>However this does not technically change the algorithm, so the maximum number of lock reacquisition attempts should be limited, otherwise one of the liveness properties is violated.</p><p>然而，这在技术上并没有改变算法，因此应该限制重新获取锁的最大尝试次数，否则会违反 liveness properties 之一。</p><h2 id="Want-to-help"><a href="#Want-to-help" class="headerlink" title="Want to help?"></a>Want to help?</h2><hr><p>If you are into distributed systems, it would be great to have your opinion / analysis. Also reference implementations in other languages could be great.</p><p>如果您进入分布式系统，那么有您的意见/分析会很棒。其他语言的参考实现也可能很棒。</p><p>Thanks in advance!</p><h2 id="Analysis-of-Redlock"><a href="#Analysis-of-Redlock" class="headerlink" title="Analysis of Redlock"></a>Analysis of Redlock</h2><ol><li>Martin Kleppmann <a href="http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html">analyzed Redlock here</a>. I disagree with the analysis and posted <a href="http://antirez.com/news/101">my reply to his analysis here</a>.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ClashForWindows tap 模式无法正常连接网络</title>
    <link href="/2022/02/14/ClashForWindows%20tap%20%E6%A8%A1%E5%BC%8F%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/02/14/ClashForWindows%20tap%20%E6%A8%A1%E5%BC%8F%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<p>ClashForWindows 正常情况下只能代理通过 Http 或 Socks 代理工作。这两种协议工作在网络模型中的较高层级，可能无法代理系统全部的流量，比如对 SSH 或 WSL 等不起作用，使用时需要对这些应用单独配置。其实下面这几个选项可以让 ClashForWindows 有能力在 TCP/IP 层级工作，从而代理系统全部流量，具体的教程参见<a href="https://docs.cfw.lbyczf.com/contents/tun.html#windows">官方文档</a></p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/2021/12/02/20211202-230605.png" alt="image-20211202230604161"></p><p>这里主要提一下通过官方文档操作之后无法正常代理的情况，这种情况 GitHub 的 issue 上已经有了解决方案，<a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/1243">链接</a>。如果你也连不上网，不妨排查一下网卡的驱动或相关应用</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/2021/12/02/20211202-231144.png" alt="image-20211202231142928"></p><p>使用上述方法代理系统全部流量时，可以关闭 ClashForWindows 的 System Proxy 开关，也会正常工作。</p><p>需要提及一下，这种方法虽然可以代理全部系统流量，看起来十分强大，但它的性能不如直接使用 Http 或 Socks 代理，所以还是要看情况使用不同的代理方案。</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 函数式编程详解</title>
    <link href="/2021/09/25/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/09/25/Java%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>首先一个简单的示例展示一下什么是函数式编程</p><p>假设我们有一个「Person」列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Person&gt; people = List.of(<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;John&quot;</span>, MALE),<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Maria&quot;</span>, FEMALE),<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Aisha&quot;</span>, FEMALE),<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alex&quot;</span>, MALE),<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alice&quot;</span>, FEMALE)<br>);<br></code></pre></td></tr></table></figure><p>「Person」的定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> record <span class="hljs-title">Person</span><span class="hljs-params">(String name, Gender gender)</span> </span>&#123;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Gender</span> </span>&#123;<br>    MALE, FEMALE<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们想在列表中找到 FEMALE，我们可以使用这样的命令式方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Person&gt; females = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br><span class="hljs-keyword">for</span> (Person person : people) &#123;<br>    <span class="hljs-keyword">if</span> (FEMALE.equals(person.gender)) &#123;<br>        females.add(person);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (Person female : females) &#123;<br>    System.out.println(female);<br>&#125;<br></code></pre></td></tr></table></figure><p>但它在声明式方法中更简洁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Predicate&lt;Person&gt; personPredicate = person -&gt; FEMALE.equals(person.gender);<br><span class="hljs-keyword">var</span> females2 = people.stream().filter(personPredicate)<br>        .collect(Collectors.toList());<br><span class="hljs-comment">//          .forEach(System.out::println);</span><br>females2.forEach(System.out::println);<br></code></pre></td></tr></table></figure><hr><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Person&gt; people = List.of(<br>                <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;John&quot;</span>, MALE),<br>                <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Maria&quot;</span>, FEMALE),<br>                <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Aisha&quot;</span>, FEMALE),<br>                <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alex&quot;</span>, MALE),<br>                <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alice&quot;</span>, FEMALE)<br>        );<br><br>        System.out.println(<span class="hljs-string">&quot;Imperative approach&quot;</span>);<br>        <span class="hljs-comment">// Imperative approach</span><br>        List&lt;Person&gt; females = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Person person : people) &#123;<br>            <span class="hljs-keyword">if</span> (FEMALE.equals(person.gender)) &#123;<br>                females.add(person);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Person female : females) &#123;<br>            System.out.println(female);<br>        &#125;<br><br>        <span class="hljs-comment">// Declarative approach</span><br>        System.out.println(<span class="hljs-string">&quot;Declarative approach&quot;</span>);<br>        Predicate&lt;Person&gt; personPredicate = person -&gt; FEMALE.equals(person.gender);<br>        <span class="hljs-keyword">var</span> females2 = people.stream().filter(personPredicate)<br>                .collect(Collectors.toList());<br><span class="hljs-comment">//                .forEach(System.out::println);</span><br>        females2.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> record <span class="hljs-title">Person</span><span class="hljs-params">(String name, Gender gender)</span> </span>&#123;&#125;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Gender</span> </span>&#123;<br>        MALE, FEMALE<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Function-and-BiFunction"><a href="#Function-and-BiFunction" class="headerlink" title="Function and BiFunction"></a>Function and BiFunction</h2><p><code>Function</code> 表示接受一个参数 &lt;T&gt; 并产生结果 &lt;R&gt; 的函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Function&lt;T, R&gt;<br></code></pre></td></tr></table></figure><p>以下是 <code>Function</code> 的一些例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Function&lt;Integer, Integer&gt; incrementByOneFunction = number -&gt; number + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">static</span> Function&lt;Integer, Integer&gt; multiplyBy10Function = number -&gt; number * <span class="hljs-number">10</span>;<br>---usage<br><span class="hljs-keyword">var</span> increment2 = incrementByOneFunction.apply(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> multiply = multiplyBy10Function.apply(increment2);<br></code></pre></td></tr></table></figure><p>酷，如果你看不懂，那么我们之前用命令式编程是这么写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">incrementByOne</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> number + <span class="hljs-number">1</span>;<br>&#125;<br>---usage<br><span class="hljs-keyword">var</span> increment = incrementByOne(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>更进一步，我们可以结合两个 Function</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> addBy1AndThenMultiplyBy10 = incrementByOneFunction.andThen(multiplyBy10Function);<br>---usage<br><span class="hljs-keyword">var</span> ans = addBy1AndThenMultiplyBy10.apply(<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><p><code>BiFunction</code> 表示一个接受两个参数并产生结果的函数。</p><p>作为对比，这是一个传统的二参数方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">incrementByOneAndMultiply</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number, <span class="hljs-keyword">int</span> numberToMultiplyBy)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (number + <span class="hljs-number">1</span>) * numberToMultiplyBy;<br>&#125;<br>---usage<br>incrementByOneAndMultiply(<span class="hljs-number">4</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>在函数式编程中，我们这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> BiFunction&lt;Integer, Integer, Integer&gt; incrementByOneAndMultiplyBiFunction =<br>        (numberToIncrementByOne, numberToMultiplyBy)<br>                -&gt; (numberToIncrementByOne + <span class="hljs-number">1</span>) * numberToMultiplyBy;<br>---usage<br>incrementByOneAndMultiplyBiFunction.apply(<span class="hljs-number">4</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><hr><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_Function</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// Function takes 1 argument and produce 1 result</span><br>        <span class="hljs-keyword">var</span> increment = incrementByOne(<span class="hljs-number">1</span>);<br>        System.out.println(increment);<br><br>        <span class="hljs-keyword">var</span> increment2 = incrementByOneFunction.apply(<span class="hljs-number">1</span>);<br>        System.out.println(increment2);<br><br>        <span class="hljs-keyword">var</span> multiply = multiplyBy10Function.apply(increment2);<br>        System.out.println(multiply);<br><br>        <span class="hljs-keyword">var</span> addBy1AndThenMultiplyBy10 = incrementByOneFunction.andThen(multiplyBy10Function);<br>        <span class="hljs-keyword">var</span> ans = addBy1AndThenMultiplyBy10.apply(<span class="hljs-number">4</span>);<br>        System.out.println(ans);<br><br>        <span class="hljs-comment">// BiFunction takes 2 argument and produce 1 result</span><br>        System.out.println(incrementByOneAndMultiply(<span class="hljs-number">4</span>, <span class="hljs-number">100</span>));<br>        System.out.println(incrementByOneAndMultiplyBiFunction.apply(<span class="hljs-number">4</span>, <span class="hljs-number">100</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> Function&lt;Integer, Integer&gt; incrementByOneFunction = number -&gt; number + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">static</span> Function&lt;Integer, Integer&gt; multiplyBy10Function = number -&gt; number * <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">incrementByOne</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> number + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">static</span> BiFunction&lt;Integer, Integer, Integer&gt; incrementByOneAndMultiplyBiFunction =<br>            (numberToIncrementByOne, numberToMultiplyBy)<br>                    -&gt; (numberToIncrementByOne + <span class="hljs-number">1</span>) * numberToMultiplyBy;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">incrementByOneAndMultiply</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number, <span class="hljs-keyword">int</span> numberToMultiplyBy)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (number + <span class="hljs-number">1</span>) * numberToMultiplyBy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Consumer-and-BiConsumer"><a href="#Consumer-and-BiConsumer" class="headerlink" title="Consumer and BiConsumer"></a>Consumer and BiConsumer</h2><p><code>Consumer</code> 表示接受单个输入参数并且不返回结果的操作。与大多数其他 Functional interface 不同，**<code>Consumer</code> 预计通过副作用进行操作**。</p><p>我们的 <code>Customer</code> 定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> record <span class="hljs-title">Customer</span><span class="hljs-params">(String customerName, String customerPhoneNumber)</span> </span>&#123;&#125;<br>---usage<br><span class="hljs-keyword">var</span> maria = <span class="hljs-keyword">new</span> Customer(<span class="hljs-string">&quot;Maria&quot;</span>, <span class="hljs-string">&quot;99999&quot;</span>);<br></code></pre></td></tr></table></figure><p>在命令式编程中，我们这样编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">greetConsumer</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + customer.customerName<br>            + <span class="hljs-string">&quot;, thanks for registering phone number &quot;</span><br>            + customer.customerPhoneNumber);<br>&#125;<br>---usage<br>greetConsumer(maria);<br></code></pre></td></tr></table></figure><p>在函数式编程中，我们这样编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Consumer&lt;Customer&gt; greetCustomerConsumer = customer -&gt;<br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + customer.customerName<br>                + <span class="hljs-string">&quot;, thanks for registering phone number &quot;</span><br>                + customer.customerPhoneNumber);<br>---usage<br>greetCustomerConsumer.accept(maria);<br></code></pre></td></tr></table></figure><p><code>BiConsumer</code> 是 <code>Consumer</code> 的二参数版本，它表示一个接受两个输入参数并且不返回结果的操作。</p><p>我们通常编写下面这种命令式编程方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">greetConsumerV2</span><span class="hljs-params">(Customer customer, <span class="hljs-keyword">boolean</span> showPhoneNumber)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + customer.customerName<br>            + <span class="hljs-string">&quot;, thanks for registering phone number &quot;</span><br>            + (showPhoneNumber ? customer.customerPhoneNumber : <span class="hljs-string">&quot;*********&quot;</span>));<br>&#125;<br>---usage<br>greetConsumerV2(maria, <span class="hljs-keyword">false</span>);<br></code></pre></td></tr></table></figure><p>这是函数式编程版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> BiConsumer&lt;Customer, Boolean&gt; greetCustomerConsumerV2 = (customer, showPhoneNumber) -&gt;<br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + customer.customerName<br>                + <span class="hljs-string">&quot;, thanks for registering phone number &quot;</span><br>                + (showPhoneNumber ? customer.customerPhoneNumber : <span class="hljs-string">&quot;*********&quot;</span>));<br>---usage<br>greetCustomerConsumerV2.accept(maria, <span class="hljs-keyword">false</span>);<br></code></pre></td></tr></table></figure><hr><p>全部代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_Consumer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> maria = <span class="hljs-keyword">new</span> Customer(<span class="hljs-string">&quot;Maria&quot;</span>, <span class="hljs-string">&quot;99999&quot;</span>);<br><br>        <span class="hljs-comment">// Normal java function</span><br>        greetConsumer(maria);<br><br>        <span class="hljs-comment">// Consumer Functional interface</span><br>        greetCustomerConsumer.accept(maria);<br><br>        greetCustomerConsumerV2.accept(maria, <span class="hljs-keyword">false</span>);<br>        greetConsumerV2(maria, <span class="hljs-keyword">false</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> BiConsumer&lt;Customer, Boolean&gt; greetCustomerConsumerV2 = (customer, showPhoneNumber) -&gt;<br>            System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + customer.customerName<br>                    + <span class="hljs-string">&quot;, thanks for registering phone number &quot;</span><br>                    + (showPhoneNumber ? customer.customerPhoneNumber : <span class="hljs-string">&quot;*********&quot;</span>));<br><br>    <span class="hljs-keyword">static</span> Consumer&lt;Customer&gt; greetCustomerConsumer = customer -&gt;<br>            System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + customer.customerName<br>                    + <span class="hljs-string">&quot;, thanks for registering phone number &quot;</span><br>                    + customer.customerPhoneNumber);<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">greetConsumer</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + customer.customerName<br>                + <span class="hljs-string">&quot;, thanks for registering phone number &quot;</span><br>                + customer.customerPhoneNumber);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">greetConsumerV2</span><span class="hljs-params">(Customer customer, <span class="hljs-keyword">boolean</span> showPhoneNumber)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + customer.customerName<br>                + <span class="hljs-string">&quot;, thanks for registering phone number &quot;</span><br>                + (showPhoneNumber ? customer.customerPhoneNumber : <span class="hljs-string">&quot;*********&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> record <span class="hljs-title">Customer</span><span class="hljs-params">(String customerName, String customerPhoneNumber)</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p><code>Predicate</code> 表示一个布尔值函数</p><p>在命令式编程中通过这样写达到相同目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPhoneNumberValid</span><span class="hljs-params">(String phoneNumber)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> phoneNumber.startsWith(<span class="hljs-string">&quot;07&quot;</span>) &amp;&amp; phoneNumber.length() == <span class="hljs-number">11</span>;<br>&#125;<br>---usage<br><span class="hljs-keyword">var</span> phoneNumberValid = isPhoneNumberValid(<span class="hljs-string">&quot;07000000000&quot;</span>);<br></code></pre></td></tr></table></figure><p>在函数式编程中，你可以这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Predicate&lt;String&gt; isPhoneNumberValidPredicate = phoneNumber -&gt;<br>        phoneNumber.startsWith(<span class="hljs-string">&quot;07&quot;</span>) &amp;&amp; phoneNumber.length() == <span class="hljs-number">11</span>;<br><br><span class="hljs-keyword">static</span> Predicate&lt;String&gt; containsNumber3 = phoneNumber -&gt;<br>        phoneNumber.contains(<span class="hljs-string">&quot;3&quot;</span>);<br>---usage<br>System.out.println(isPhoneNumberValidPredicate.test(<span class="hljs-string">&quot;09009877300&quot;</span>));<br><br>System.out.println(<br>        <span class="hljs-string">&quot;Is phone number valid and contains number 3 = &quot;</span> +<br>                isPhoneNumberValidPredicate.and(containsNumber3).test(<span class="hljs-string">&quot;07009877300&quot;</span>)<br>);<br><br><span class="hljs-keyword">var</span> isPhoneNumberValidAndContainsNumber3 = isPhoneNumberValidPredicate.or(containsNumber3);<br>System.out.println(<br>        <span class="hljs-string">&quot;Is phone number valid or contains number 3 = &quot;</span> +<br>                isPhoneNumberValidAndContainsNumber3.test(<span class="hljs-string">&quot;07000000000&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><p>还记得我们在概要中写的代码 <code>stream().filter()</code> 吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> females2 = people.stream().filter(person -&gt; FEMALE.equals(person.gender))<br>        .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><p><code>filter</code> 接收的参数就是 <code>Predicate</code> ，在 idea 中使用快捷键 「Ctrl + Alt + V」将它的参数提取成变量，我们就会看到 <code>Predicate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Predicate&lt;Person&gt; personPredicate = person -&gt; FEMALE.equals(person.gender);<br><span class="hljs-keyword">var</span> females2 = people.stream().filter(personPredicate)<br>        .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><hr><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_Predicate</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Without predicate&quot;</span>);<br>        <span class="hljs-keyword">var</span> phoneNumberValid = isPhoneNumberValid(<span class="hljs-string">&quot;07000000000&quot;</span>);<br>        System.out.println(phoneNumberValid);<br>        System.out.println(isPhoneNumberValid(<span class="hljs-string">&quot;0700000000&quot;</span>));<br>        System.out.println(isPhoneNumberValid(<span class="hljs-string">&quot;09009877300&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;With Predicate&quot;</span>);<br>        System.out.println(isPhoneNumberValidPredicate.test(<span class="hljs-string">&quot;07000000000&quot;</span>));<br>        System.out.println(isPhoneNumberValidPredicate.test(<span class="hljs-string">&quot;0700000000&quot;</span>));<br>        System.out.println(isPhoneNumberValidPredicate.test(<span class="hljs-string">&quot;09009877300&quot;</span>));<br><br>        System.out.println(<br>                <span class="hljs-string">&quot;Is phone number valid and contains number 3 = &quot;</span> +<br>                        isPhoneNumberValidPredicate.and(containsNumber3).test(<span class="hljs-string">&quot;07009877300&quot;</span>)<br>        );<br><br>        <span class="hljs-keyword">var</span> isPhoneNumberValidAndContainsNumber3 = isPhoneNumberValidPredicate.or(containsNumber3);<br>        System.out.println(<br>                <span class="hljs-string">&quot;Is phone number valid or contains number 3 = &quot;</span> +<br>                        isPhoneNumberValidAndContainsNumber3.test(<span class="hljs-string">&quot;07000000000&quot;</span>)<br>        );<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPhoneNumberValid</span><span class="hljs-params">(String phoneNumber)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> phoneNumber.startsWith(<span class="hljs-string">&quot;07&quot;</span>) &amp;&amp; phoneNumber.length() == <span class="hljs-number">11</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> Predicate&lt;String&gt; isPhoneNumberValidPredicate = phoneNumber -&gt;<br>            phoneNumber.startsWith(<span class="hljs-string">&quot;07&quot;</span>) &amp;&amp; phoneNumber.length() == <span class="hljs-number">11</span>;<br><br>    <span class="hljs-keyword">static</span> Predicate&lt;String&gt; containsNumber3 = phoneNumber -&gt;<br>            phoneNumber.contains(<span class="hljs-string">&quot;3&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p><code>Supplier</code> 不接收任何参数并提供一个结果</p><p>在命令式编程中我们可以这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">getDbConnectionUrl</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jdbc://localhost:5432/users&quot;</span>;<br>&#125;<br>---usage<br>System.out.println(getDbConnectionUrl());<br></code></pre></td></tr></table></figure><p>函数式编程的版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Supplier&lt;String&gt; getDbConnectionUrlSupplier = () -&gt;<br>        <span class="hljs-string">&quot;jdbc://localhost:5432/users&quot;</span>;<br><br><span class="hljs-keyword">static</span> Supplier&lt;List&lt;String&gt;&gt; getDbConnectionListUrlSupplier = () -&gt;<br>        List.of(<br>                <span class="hljs-string">&quot;jdbc://localhost:5432/users&quot;</span>,<br>                <span class="hljs-string">&quot;jdbc://localhost:5432/customer&quot;</span><br>        );<br>---usage<br>System.out.println(getDbConnectionUrlSupplier.get());<br>System.out.println(getDbConnectionListUrlSupplier.get());<br></code></pre></td></tr></table></figure><hr><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_Supplier</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(getDbConnectionUrl());<br>        System.out.println(getDbConnectionUrlSupplier.get());<br>        System.out.println(getDbConnectionListUrlSupplier.get());<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">getDbConnectionUrl</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jdbc://localhost:5432/users&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> Supplier&lt;String&gt; getDbConnectionUrlSupplier = () -&gt;<br>            <span class="hljs-string">&quot;jdbc://localhost:5432/users&quot;</span>;<br>    <span class="hljs-keyword">static</span> Supplier&lt;List&lt;String&gt;&gt; getDbConnectionListUrlSupplier = () -&gt;<br>            List.of(<br>                    <span class="hljs-string">&quot;jdbc://localhost:5432/users&quot;</span>,<br>                    <span class="hljs-string">&quot;jdbc://localhost:5432/customer&quot;</span><br>            );<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>首先将前文的定义 Persion 的代码复制过来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> record <span class="hljs-title">Person</span><span class="hljs-params">(String name, Gender gender)</span> </span>&#123;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Gender</span> </span>&#123;<br>    MALE, FEMALE, PREFER_NOT_TO_SAY<br>&#125;<br><br>List&lt;Person&gt; people = List.of(<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;John&quot;</span>, MALE),<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Maria&quot;</span>, FEMALE),<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Aisha&quot;</span>, FEMALE),<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alex&quot;</span>, MALE),<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alice&quot;</span>, FEMALE),<br>        <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bob&quot;</span>, PREFER_NOT_TO_SAY)<br>);<br></code></pre></td></tr></table></figure><p>通过 Stream 来调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">people.stream()<br>        .map(Person::name)<br>        .mapToInt(String::length)<br><span class="hljs-comment">//        .collect(Collectors.toSet())</span><br>        .forEach(System.out::println);<br></code></pre></td></tr></table></figure><p>我们可以把每一步的参数提取成变量，方便观察它们的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Function&lt;Person, String&gt; personStringFunction = Person::name;<br>        ToIntFunction&lt;String&gt; length = String::length;<br>        IntConsumer println = System.out::println;<br>        people.stream()<br>                .map(personStringFunction)<br>                .mapToInt(length)<br><span class="hljs-comment">//                .collect(Collectors.toSet())</span><br>                .forEach(println);<br></code></pre></td></tr></table></figure><p>Stream 的其他用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Predicate&lt;Person&gt; personPredicate = person -&gt; FEMALE.equals(person.gender);<br><span class="hljs-keyword">var</span> containOnlyFemales = people.stream()<br>        .allMatch(personPredicate);<br>System.out.println(containOnlyFemales);<br><br><span class="hljs-keyword">var</span> personHaveFemales = people.stream()<br>        .anyMatch(personPredicate);<br><span class="hljs-comment">//      .noneMatch(personPredicate);</span><br>System.out.println(personHaveFemales);<br></code></pre></td></tr></table></figure><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p><code>Optional</code> 会改变你处理空指针的方式</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> value = Optional.ofNullable(<span class="hljs-keyword">null</span>)<br>        .orElseGet(() -&gt; <span class="hljs-string">&quot;default value&quot;</span>);<br><span class="hljs-keyword">var</span> value2 = Optional.ofNullable(<span class="hljs-string">&quot;hello&quot;</span>)<br>        .orElseGet(() -&gt; <span class="hljs-string">&quot;default value&quot;</span>);<br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Supplier&lt;IllegalStateException&gt; exception = () -&gt; <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;exception&quot;</span>);<br><span class="hljs-keyword">var</span> value3 = Optional.ofNullable(<span class="hljs-string">&quot;hello&quot;</span>)<br>        .orElseThrow(exception);<br></code></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional.ofNullable(<span class="hljs-string">&quot;john.gmail.com&quot;</span>)<br>        .ifPresent(email -&gt;<br>                System.out.println(<span class="hljs-string">&quot;Sending email to &quot;</span> + email));<br>Optional.ofNullable(<span class="hljs-keyword">null</span>)<br>        .ifPresentOrElse(email -&gt; System.out.println(<span class="hljs-string">&quot;Sending email to &quot;</span> + email),<br>                () -&gt; System.out.println(<span class="hljs-string">&quot;Can not send email&quot;</span>));<br></code></pre></td></tr></table></figure><hr><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> value = Optional.ofNullable(<span class="hljs-keyword">null</span>)<br>                .orElseGet(() -&gt; <span class="hljs-string">&quot;default value&quot;</span>);<br>        <span class="hljs-keyword">var</span> value2 = Optional.ofNullable(<span class="hljs-string">&quot;hello&quot;</span>)<br>                .orElseGet(() -&gt; <span class="hljs-string">&quot;default value&quot;</span>);<br>        System.out.println(value2);<br>        Supplier&lt;IllegalStateException&gt; exception = () -&gt; <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;exception&quot;</span>);<br>        <span class="hljs-keyword">var</span> value3 = Optional.ofNullable(<span class="hljs-string">&quot;hello&quot;</span>)<br>                .orElseThrow(exception);<br>        Optional.ofNullable(<span class="hljs-string">&quot;john.gmail.com&quot;</span>)<br>                .ifPresent(email -&gt;<br>                        System.out.println(<span class="hljs-string">&quot;Sending email to &quot;</span> + email));<br>        Optional.ofNullable(<span class="hljs-keyword">null</span>)<br>                .ifPresentOrElse(email -&gt; System.out.println(<span class="hljs-string">&quot;Sending email to &quot;</span> + email),<br>                        () -&gt; System.out.println(<span class="hljs-string">&quot;Can not send email&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Combinator-Pattern"><a href="#Combinator-Pattern" class="headerlink" title="Combinator Pattern"></a>Combinator Pattern</h2><p>我们有一个 Customer 类定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> record <span class="hljs-title">Customer</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">        String name,</span></span><br><span class="hljs-function"><span class="hljs-params">        String email,</span></span><br><span class="hljs-function"><span class="hljs-params">        String phoneNumber,</span></span><br><span class="hljs-function"><span class="hljs-params">        LocalDate dob</span></span><br><span class="hljs-function"><span class="hljs-params">)</span> </span>&#123;&#125;<br>---usage<br>Customer customer = <span class="hljs-keyword">new</span> Customer(<br>        <span class="hljs-string">&quot;Alice&quot;</span>,<br>        <span class="hljs-string">&quot;alice@gmail.com&quot;</span>,<br>        <span class="hljs-string">&quot;+089998879&quot;</span>,<br>        LocalDate.of(<span class="hljs-number">2000</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>);<br></code></pre></td></tr></table></figure><p>我们想验证此人的信息是否合法。在命令式编程中，我们可以这样验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerValidatorService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmailValid</span><span class="hljs-params">(String email)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> email.contains(<span class="hljs-string">&quot;@&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPhoneNumberValid</span><span class="hljs-params">(String phoneNumber)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> phoneNumber.startsWith(<span class="hljs-string">&quot;+0&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAdult</span><span class="hljs-params">(LocalDate dob)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Period.between(dob, LocalDate.now()).getYears() &gt; <span class="hljs-number">16</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> isEmailValid(customer.email())<br>                &amp;&amp; isPhoneNumberValid(customer.phoneNumber())<br>                &amp;&amp; isAdult(customer.dob());<br>    &#125;<br>&#125;<br>---usage<br>System.out.println(<span class="hljs-keyword">new</span> CustomerValidatorService().isValid(customer));<br></code></pre></td></tr></table></figure><p>可以看到，当我们需要添加验证项或者需要根据不同的用户启用不同的验证策略时，上面的方法需要改动太多的代码。这种方法的另一个缺点是：当验证失败时，我们无法知道对象的哪个属性没有通过验证，该方法只是返回一个失败的结果，这个结果并不包含细节。</p><p>我这里介绍的解决方案叫做 Combinator Pattern</p><p>为了能够返回方法的详细信息，我们首先定义一个枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ValidationResult</span> </span>&#123;<br>    SUCCESS,<br>    PHONE_NUMBER_NOT_VALID,<br>    EMAIL_NOT_VALID,<br>    IS_NOT_AN_ADULT<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用 <code>CustomerRegistrationValidator interface</code> 扩展 <code>Functional interface</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CustomerRegistrationValidator</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">Function</span>&lt;<span class="hljs-title">Customer</span>, <span class="hljs-title">ValidationResult</span>&gt; </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> CustomerRegistrationValidator <span class="hljs-title">isEmailValid</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt; customer.email().contains(<span class="hljs-string">&quot;@&quot;</span>) ?<br>                SUCCESS : EMAIL_NOT_VALID;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> CustomerRegistrationValidator <span class="hljs-title">isPhoneNumberValid</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt; customer.phoneNumber().startsWith(<span class="hljs-string">&quot;+0&quot;</span>) ?<br>                SUCCESS : PHONE_NUMBER_NOT_VALID;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> CustomerRegistrationValidator <span class="hljs-title">isAnAdult</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt;<br>                Period.between(customer.dob(), LocalDate.now()).getYears() &gt; <span class="hljs-number">16</span> ?<br>                        SUCCESS : IS_NOT_AN_ADULT;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * test lazy load</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> CustomerRegistrationValidator <span class="hljs-title">printSomething</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;print something&quot;</span>);<br>            <span class="hljs-keyword">return</span> SUCCESS;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> CustomerRegistrationValidator <span class="hljs-title">and</span> <span class="hljs-params">(CustomerRegistrationValidator other)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt; &#123;<br>            ValidationResult result = <span class="hljs-keyword">this</span>.apply(customer);<br>            <span class="hljs-keyword">return</span> result.equals(SUCCESS) ? other.apply(customer) : result;<br>        &#125;;<br><br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ValidationResult</span> </span>&#123;<br>        SUCCESS,<br>        PHONE_NUMBER_NOT_VALID,<br>        EMAIL_NOT_VALID,<br>        IS_NOT_AN_ADULT<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用法很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> result = isEmailValid()<br>        .and(isPhoneNumberValid())<br>        .and(isAnAdult())<br>        .apply(customer);<br>System.out.println(result);<br><span class="hljs-keyword">if</span> (result != ValidationResult.SUCCESS) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(result.name());<br>&#125;<br></code></pre></td></tr></table></figure><p>使用这种方法，我们可以灵活地组合多个验证。当验证失败时，该方法会返回失败的原因</p><p>此外，它是延迟加载，也就是直到调用 <code>apply()</code> 时才会真正执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">var</span> result2 = isEmailValid()<br>        .and(isPhoneNumberValid())<br>        .and(isAnAdult())<br>        .and(printSomething());<br>System.out.println(<span class="hljs-string">&quot;not load before apply()&quot;</span>);<br>result2.apply(customer);<br></code></pre></td></tr></table></figure><hr><p>完整代码</p><p>调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Customer customer = <span class="hljs-keyword">new</span> Customer(<br>                <span class="hljs-string">&quot;Alice&quot;</span>,<br>                <span class="hljs-string">&quot;alice@gmail.com&quot;</span>,<br>                <span class="hljs-string">&quot;+089998879&quot;</span>,<br>                LocalDate.of(<span class="hljs-number">2000</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        );<br><br>        System.out.println(<span class="hljs-keyword">new</span> CustomerValidatorService().isValid(customer));<br><br>        <span class="hljs-comment">// If valid we can store customer in db</span><br>        <span class="hljs-comment">// ...</span><br><br>        <span class="hljs-comment">// Using combinator pattern</span><br>        <span class="hljs-keyword">var</span> result = isEmailValid()<br>                .and(isPhoneNumberValid())<br>                .and(isAnAdult())<br>                .apply(customer);<br>        System.out.println(result);<br>        <span class="hljs-keyword">if</span> (result != ValidationResult.SUCCESS) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(result.name());<br>        &#125;<br><br>        <span class="hljs-comment">// Lazy lode</span><br>        <span class="hljs-keyword">var</span> result2 = isEmailValid()<br>                .and(isPhoneNumberValid())<br>                .and(isAnAdult())<br>                .and(printSomething());<br>        System.out.println(<span class="hljs-string">&quot;not load before apply()&quot;</span>);<br>        result2.apply(customer);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>命令式编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerValidatorService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmailValid</span><span class="hljs-params">(String email)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> email.contains(<span class="hljs-string">&quot;@&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPhoneNumberValid</span><span class="hljs-params">(String phoneNumber)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> phoneNumber.startsWith(<span class="hljs-string">&quot;+0&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAdult</span><span class="hljs-params">(LocalDate dob)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Period.between(dob, LocalDate.now()).getYears() &gt; <span class="hljs-number">16</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> isEmailValid(customer.email())<br>                &amp;&amp; isPhoneNumberValid(customer.phoneNumber())<br>                &amp;&amp; isAdult(customer.dob());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>函数式编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CustomerRegistrationValidator</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">Function</span>&lt;<span class="hljs-title">Customer</span>, <span class="hljs-title">ValidationResult</span>&gt; </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> CustomerRegistrationValidator <span class="hljs-title">isEmailValid</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt; customer.email().contains(<span class="hljs-string">&quot;@&quot;</span>) ?<br>                SUCCESS : EMAIL_NOT_VALID;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> CustomerRegistrationValidator <span class="hljs-title">isPhoneNumberValid</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt; customer.phoneNumber().startsWith(<span class="hljs-string">&quot;+0&quot;</span>) ?<br>                SUCCESS : PHONE_NUMBER_NOT_VALID;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> CustomerRegistrationValidator <span class="hljs-title">isAnAdult</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt;<br>                Period.between(customer.dob(), LocalDate.now()).getYears() &gt; <span class="hljs-number">16</span> ?<br>                        SUCCESS : IS_NOT_AN_ADULT;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * test lazy load</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> CustomerRegistrationValidator <span class="hljs-title">printSomething</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;print something&quot;</span>);<br>            <span class="hljs-keyword">return</span> SUCCESS;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> CustomerRegistrationValidator <span class="hljs-title">and</span> <span class="hljs-params">(CustomerRegistrationValidator other)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer -&gt; &#123;<br>            ValidationResult result = <span class="hljs-keyword">this</span>.apply(customer);<br>            <span class="hljs-keyword">return</span> result.equals(SUCCESS) ? other.apply(customer) : result;<br>        &#125;;<br><br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ValidationResult</span> </span>&#123;<br>        SUCCESS,<br>        PHONE_NUMBER_NOT_VALID,<br>        EMAIL_NOT_VALID,<br>        IS_NOT_AN_ADULT<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>entity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> record <span class="hljs-title">Customer</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">        String name,</span></span><br><span class="hljs-function"><span class="hljs-params">        String email,</span></span><br><span class="hljs-function"><span class="hljs-params">        String phoneNumber,</span></span><br><span class="hljs-function"><span class="hljs-params">        LocalDate dob</span></span><br><span class="hljs-function"><span class="hljs-params">)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h2><p>由于 Java 的函数式接口，我们现在可以像 JavaScript 一样使用 callback</p><p>在 JavaScript 中，我们像这样定义带有回调的函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span>(<span class="hljs-params">firstName, lastName,callback</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(firstName);<br>    <span class="hljs-keyword">if</span> (lastName) &#123;<br>        <span class="hljs-built_in">console</span>.log(lastName);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        callback();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以在 Chrome 控制台中调用它</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">hello(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;no lastname provided&quot;</span>)&#125;)<br></code></pre></td></tr></table></figure><p>现在我们可以在 Java 中做同样的事情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">(String firstName, String lastName, Consumer&lt;String&gt; callback)</span> </span>&#123;<br>    System.out.println(firstName);<br>    <span class="hljs-keyword">if</span> (lastName != <span class="hljs-keyword">null</span>) &#123;<br>        System.out.println(lastName);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        callback.accept(firstName);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello2</span><span class="hljs-params">(String firstName, String lastName, Runnable callback)</span> </span>&#123;<br>    System.out.println(firstName);<br>    <span class="hljs-keyword">if</span> (lastName != <span class="hljs-keyword">null</span>) &#123;<br>        System.out.println(lastName);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        callback.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>usage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">hello(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Montana&quot;</span>, <span class="hljs-keyword">null</span>);<br>hello(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-keyword">null</span>, value -&gt; &#123;<br>    System.out.println(<span class="hljs-string">&quot;no lastName provided for &quot;</span> + value);<br>&#125;);<br><br>hello2(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-keyword">null</span>,<br>        () -&gt; System.out.println(<span class="hljs-string">&quot;no lastName provided&quot;</span>));<br></code></pre></td></tr></table></figure><hr><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Callbacks</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        hello(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Montana&quot;</span>, <span class="hljs-keyword">null</span>);<br>        hello(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-keyword">null</span>, value -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;no lastName provided for &quot;</span> + value);<br>        &#125;);<br>        hello2(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-keyword">null</span>,<br>                () -&gt; System.out.println(<span class="hljs-string">&quot;no lastName provided&quot;</span>));<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">(String firstName, String lastName, Consumer&lt;String&gt; callback)</span> </span>&#123;<br>        System.out.println(firstName);<br>        <span class="hljs-keyword">if</span> (lastName != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(lastName);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            callback.accept(firstName);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello2</span><span class="hljs-params">(String firstName, String lastName, Runnable callback)</span> </span>&#123;<br>        System.out.println(firstName);<br>        <span class="hljs-keyword">if</span> (lastName != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(lastName);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            callback.run();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Callback function in js:</span><br><span class="hljs-comment">    function hello(firstName, lastName,callback) &#123;</span><br><span class="hljs-comment">        console.log(firstName);</span><br><span class="hljs-comment">        if (lastName) &#123;</span><br><span class="hljs-comment">            console.log(lastName);</span><br><span class="hljs-comment">        &#125; else &#123;</span><br><span class="hljs-comment">            callback();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Invoke it:</span><br><span class="hljs-comment">    hello(&quot;john&quot;, null, function()&#123;console.log(&quot;no lastname provided&quot;)&#125;)</span><br><span class="hljs-comment">     */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数式编程的特性"><a href="#函数式编程的特性" class="headerlink" title="函数式编程的特性"></a>函数式编程的特性</h2><ul><li>无状态</li><li>纯函数</li><li>无副作用</li><li>高阶特性<ul><li>函数将一个或多个函数作为参数。</li><li>函数返回另一个函数作为结果。</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Soul 网关 5：Dubbo 请求是怎么被处理的</title>
    <link href="/2021/03/10/Soul-%E7%BD%91%E5%85%B3-5%EF%BC%9ADubbo-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84/"/>
    <url>/2021/03/10/Soul-%E7%BD%91%E5%85%B3-5%EF%BC%9ADubbo-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前文我们已经搭建了 Dubbo 和 Http 的示例，并且大致了解了 Soul 对 Http 的处理流程，本节我们来看看 Soul 网关对于 Dubbo 和 Http 的处理有什么异同。</p><p>前文我们知道，Soul 网关的 Plugin 链式处理核心是 SoulWebHandler，并且知道了调用链中的插件的用途。</p><blockquote><p><a href="https://solidspoon.xyz/2021/03/06/Soul-%E7%BD%91%E5%85%B3-3%EF%BC%9AHttp-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84%EF%BC%9F/#%E6%80%BB%E7%BB%93">https://solidspoon.xyz/2021/03/06/Soul-%E7%BD%91%E5%85%B3-3%EF%BC%9AHttp-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84%EF%BC%9F/#%E6%80%BB%E7%BB%93</a></p></blockquote><p>这是本次示例中 <code>SoulWebHandler</code> 持有的插件链，与上文同理，同样红色的插件被 Soul 跳过了。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210312161204.png" alt="本文插件链"><br>下面的图片是前文分析 Http 的 Divide 插件时的插件链，对比二者还是有区别的，例如 Divide 插件被我们禁用了，所以没了。原本的好多 <code>AlibabaDubbo</code> 的 Plugin  变成了 <code>ApacheDubbo</code> 的 Plugin（注：红色部分指的是前文分析时那些插件被 Soul 跳过了）<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310210344.png" alt="前文插件链"></p><p>这么对比一看发现似乎本文重点应该放在 <code>ApacheDubboBodyPlugin</code>，<code>ApacheDubboPlugin</code>，<code>DubboResponsePlugin</code> 上面。</p><h2 id="ApacheDubboPlugin"><a href="#ApacheDubboPlugin" class="headerlink" title="ApacheDubboPlugin"></a>ApacheDubboPlugin</h2><p><code>ApacheDubboPlugin</code>，该插件在调用链的第 9 位，因为前面进行了 <code>index++</code>，所以条件断点应该设置为 <code>index == 10</code><br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310210826.png"><br>顺便说一下，<code>SoulWebHandler</code> 判断是否跳过的逻辑在对应插件中实现的，<code>skip()</code> 是 <code>SoulPlugin</code> 接口定义的方法。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210312161231.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// SoulWebHandler:execute()</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Delegate to the next &#123;<span class="hljs-doctag">@code</span> WebFilter&#125; in the chain.</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> exchange the current server exchange</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request handling is complete</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> Mono.defer(() -&gt; &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.index &lt; plugins.size()) &#123;<br>                    SoulPlugin plugin = plugins.get(<span class="hljs-keyword">this</span>.index++);<br>                    <span class="hljs-comment">// 跳过逻辑在对应的插件中实现</span><br>                    Boolean skip = plugin.skip(exchange);<br>                    <span class="hljs-keyword">if</span> (skip) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.execute(exchange);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> plugin.execute(exchange, <span class="hljs-keyword">this</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> Mono.empty();<br>            &#125;);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后会进入到 <code>AbstractSoulPlugin</code> 的 <code>execute()</code> 方法。如下图所示，该方法实际上继承自 <code>SoulPlugin</code><br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310210852.png"><br>按照前文经验，<code>AbstractSoulPlugin</code> 会在此处判断是否开启了该插件（<code>ApacheDubboPlugin</code>），也会判断当前网络包是否能匹配该插件注册的规则。如果上面条件都成立，就会调用该插件的 <code>doExecute()</code> 方法，这个方法是该插件继承自 <code>AbstractSoulPlugin</code>的。</p><blockquote><p>前文：<br><a href="https://solidspoon.xyz/2021/03/06/Soul-%E7%BD%91%E5%85%B3-3%EF%BC%9AHttp-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84%EF%BC%9F/#%E8%B0%83%E7%94%A8%E9%93%BE">https://solidspoon.xyz/2021/03/06/Soul-%E7%BD%91%E5%85%B3-3%EF%BC%9AHttp-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84%EF%BC%9F/#%E8%B0%83%E7%94%A8%E9%93%BE</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Process the Web request and (optionally) delegate to the next</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> SoulPlugin&#125; through the given &#123;<span class="hljs-doctag">@link</span> SoulPluginChain&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange the current server exchange</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain    provides a way to delegate to the next plugin</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> SoulPluginChain chain)</span> </span>&#123;<br>    String pluginName = named();<br>    <span class="hljs-keyword">final</span> PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName);<br>    <span class="hljs-comment">// 此处判断插件是否启用</span><br>    <span class="hljs-keyword">if</span> (pluginData != <span class="hljs-keyword">null</span> &amp;&amp; pluginData.getEnabled()) &#123;<br>        <span class="hljs-keyword">final</span> Collection&lt;SelectorData&gt; selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName);<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(selectors)) &#123;<br>            <span class="hljs-keyword">return</span> handleSelectorIsNull(pluginName, exchange, chain);<br>        &#125;<br>        <span class="hljs-comment">// 匹配选择器</span><br>        <span class="hljs-keyword">final</span> SelectorData selectorData = matchSelector(exchange, selectors);<br>        <span class="hljs-keyword">if</span> (Objects.isNull(selectorData)) &#123;<br>            <span class="hljs-keyword">return</span> handleSelectorIsNull(pluginName, exchange, chain);<br>        &#125;<br>        <span class="hljs-comment">// 打印日志</span><br>        selectorLog(selectorData, pluginName);<br>        <span class="hljs-keyword">final</span> List&lt;RuleData&gt; rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId());<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(rules)) &#123;<br>            <span class="hljs-keyword">return</span> handleRuleIsNull(pluginName, exchange, chain);<br>        &#125;<br>        <span class="hljs-comment">// 匹配选择器规则</span><br>        RuleData rule;<br>        <span class="hljs-keyword">if</span> (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) &#123;<br>            <span class="hljs-comment">//get last</span><br>            rule = rules.get(rules.size() - <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 匹配规则</span><br>            rule = matchRule(exchange, rules);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Objects.isNull(rule)) &#123;<br>            <span class="hljs-keyword">return</span> handleRuleIsNull(pluginName, exchange, chain);<br>        &#125;<br>        <span class="hljs-comment">// 日志</span><br>        ruleLog(rule, pluginName);<br>        <span class="hljs-comment">// 进入插件的处理方法</span><br>        <span class="hljs-keyword">return</span> doExecute(exchange, chain, selectorData, rule);<br>    &#125;<br>    <span class="hljs-keyword">return</span> chain.execute(exchange);<br>&#125;<br></code></pre></td></tr></table></figure><p>实际调试发现果然和我们预想的一样，来到了 <code>ApacheDubboPlugin:doExecute()</code> ,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Mono&lt;Void&gt; <span class="hljs-title">doExecute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> SoulPluginChain chain, <span class="hljs-keyword">final</span> SelectorData selector, <span class="hljs-keyword">final</span> RuleData rule)</span> </span>&#123;<br>    String body = exchange.getAttribute(Constants.DUBBO_PARAMS);<br>    SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);<br>    <span class="hljs-keyword">assert</span> soulContext != <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">// 取得 Dubbo 请求相关数据</span><br>    MetaData metaData = exchange.getAttribute(Constants.META_DATA);<br>    <span class="hljs-keyword">if</span> (!checkMetaData(metaData)) &#123;<br>        <span class="hljs-keyword">assert</span> metaData != <span class="hljs-keyword">null</span>;<br>        log.error(<span class="hljs-string">&quot; path is :&#123;&#125;, meta data have error.... &#123;&#125;&quot;</span>, soulContext.getPath(), metaData.toString());<br>        exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);<br>        Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> WebFluxResultUtils.result(exchange, error);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (StringUtils.isNoneBlank(metaData.getParameterTypes()) &amp;&amp; StringUtils.isBlank(body)) &#123;<br>        exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);<br>        Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> WebFluxResultUtils.result(exchange, error);<br>    &#125;<br>    <span class="hljs-comment">// 向真实后端发送请求，获得结果</span><br>    <span class="hljs-keyword">final</span> Mono&lt;Object&gt; result = dubboProxyService.genericInvoker(body, metaData, exchange);<br>    <span class="hljs-keyword">return</span> result.then(chain.execute(exchange));<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下<code>genericInvoker()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ApacheDubboProxyService:genericInvoker()</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Generic invoker object.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> body     the body</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metaData the meta data</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange the exchange</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the object</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SoulException the soul exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Object&gt; <span class="hljs-title">genericInvoker</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String body, <span class="hljs-keyword">final</span> MetaData metaData, <span class="hljs-keyword">final</span> ServerWebExchange exchange)</span> <span class="hljs-keyword">throws</span> SoulException </span>&#123;<br>        <span class="hljs-comment">// issue(https://github.com/dromara/soul/issues/471), add dubbo tag route</span><br>        String dubboTagRouteFromHttpHeaders = exchange.getRequest().getHeaders().getFirst(Constants.DUBBO_TAG_ROUTE);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(dubboTagRouteFromHttpHeaders)) &#123;<br>            RpcContext.getContext().setAttachment(CommonConstants.TAG_KEY, dubboTagRouteFromHttpHeaders);<br>        &#125;<br>        <span class="hljs-comment">// metaData.getPath()== &quot;/dubbo/findAll&quot;</span><br>        <span class="hljs-comment">// 大概是用 metaData.getPath() 作为键来获取值</span><br>        ReferenceConfig&lt;GenericService&gt; reference = ApplicationConfigCache.getInstance().get(metaData.getPath());<br>        <span class="hljs-keyword">if</span> (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) &#123;<br>            ApplicationConfigCache.getInstance().invalidate(metaData.getPath());<br>            reference = ApplicationConfigCache.getInstance().initRef(metaData);<br>        &#125;<br>        <span class="hljs-comment">// 生成 RPC 对象</span><br>        GenericService genericService = reference.get();<br>        Pair&lt;String[], Object[]&gt; pair;<br>        <span class="hljs-keyword">if</span> (ParamCheckUtils.dubboBodyIsEmpty(body)) &#123;<br>            pair = <span class="hljs-keyword">new</span> ImmutablePair&lt;&gt;(<span class="hljs-keyword">new</span> String[]&#123;&#125;, <span class="hljs-keyword">new</span> Object[]&#123;&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pair = dubboParamResolveService.buildParameter(body, metaData.getParameterTypes());<br>        &#125;<br>        <span class="hljs-comment">// 在此处调用真实后端</span><br>        CompletableFuture&lt;Object&gt; future = genericService.$invokeAsync(metaData.getMethodName(), pair.getLeft(), pair.getRight());<br>        <span class="hljs-keyword">return</span> Mono.fromFuture(future.thenApply(ret -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (Objects.isNull(ret)) &#123;<br>                ret = Constants.DUBBO_RPC_RESULT_EMPTY;<br>            &#125;<br>            exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret);<br>            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;)).onErrorMap(exception -&gt; exception <span class="hljs-keyword">instanceof</span> GenericException ? <span class="hljs-keyword">new</span> SoulException(((GenericException) exception).getExceptionMessage()) : <span class="hljs-keyword">new</span> SoulException(exception));<br>    &#125;<br></code></pre></td></tr></table></figure><p>看一下 <code>reference.get()</code> 看到了一个懒加载的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// class ReferenceConfig&lt;T&gt; extends ReferenceConfigBase&lt;T&gt;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 判断是否被毁</span><br>        <span class="hljs-keyword">if</span> (destroyed) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;The invoker of ReferenceConfig(&quot;</span> + url + <span class="hljs-string">&quot;) has already destroyed!&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 延迟加载</span><br>        <span class="hljs-keyword">if</span> (ref == <span class="hljs-keyword">null</span>) &#123;<br>            init();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ref;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="DubboResponsePlugin"><a href="#DubboResponsePlugin" class="headerlink" title="DubboResponsePlugin"></a>DubboResponsePlugin</h2><p>再次从 <code>SoulWebHandler</code> 的调用链进来，到达 <code>DubbleResponsePlugin</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// DubboResponsePlugin</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Process the Web request and (optionally) delegate to the next</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> WebFilter&#125; through the given &#123;<span class="hljs-doctag">@link</span> SoulPluginChain&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange the current server exchange</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain    provides a way to delegate to the next filter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> SoulPluginChain chain)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> chain.execute(exchange).then(Mono.defer(() -&gt; &#123;<br>            <span class="hljs-comment">// 从 exchange 中拿到结果</span><br>            <span class="hljs-keyword">final</span> Object result = exchange.getAttribute(Constants.DUBBO_RPC_RESULT);<br>            <span class="hljs-keyword">if</span> (Objects.isNull(result)) &#123;<br>                Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), <span class="hljs-keyword">null</span>);<br>                <span class="hljs-keyword">return</span> WebFluxResultUtils.result(exchange, error);<br>            &#125;<br>            Object success = SoulResultWrap.success(SoulResultEnum.SUCCESS.getCode(), SoulResultEnum.SUCCESS.getMsg(), JsonUtils.removeClass(result));<br>            <span class="hljs-comment">// 这个方法里使用了之前见过的 wirteWith() 方法返回响应给客户端</span><br>            <span class="hljs-keyword">return</span> WebFluxResultUtils.result(exchange, success);<br>        &#125;));<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个方法之前见过，之前认为是在 Http 那里用来构建错误响应，注释里也写着 Erro mono，但是似乎在这里不局限于错误响应，先留个疑惑。</p></blockquote><blockquote><p>前文链接<br><a href="https://solidspoon.xyz/2021/03/06/Soul-%E7%BD%91%E5%85%B3-3%EF%BC%9AHttp-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84%EF%BC%9F/#DividePlugin">https://solidspoon.xyz/2021/03/06/Soul-%E7%BD%91%E5%85%B3-3%EF%BC%9AHttp-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84%EF%BC%9F/#DividePlugin</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// WebFluxResultUtils</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Error mono.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange the exchange</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> result    the result</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the mono</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mono&lt;Void&gt; <span class="hljs-title">result</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> Object result)</span> </span>&#123;<br>        exchange.getResponse().getHeaders().setContentType(MediaType.APPLICATION_JSON);<br>        <span class="hljs-comment">// writeWith() 来自 HttpMessage，如下图</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().writeWith(Mono.just(exchange.getResponse()<br>                .bufferFactory().wrap(Objects.requireNonNull(JsonUtils.toJson(result)).getBytes())));<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>writeWith()</code> 来自 HttpMessage，如下图</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310210934.png"></p><h2 id="ApacheDubboBodyPlugin"><a href="#ApacheDubboBodyPlugin" class="headerlink" title="ApacheDubboBodyPlugin"></a>ApacheDubboBodyPlugin</h2><p>该插件直接继承 <code>SoulPlugin</code>，而不是继承 <code>AbstractSoulPlugin</code>。<br><code>BodyParamPlugin</code> 也是直接继承自 <code>SoulPlugin</code>，因为 <code>AbstractSoulPlugin</code> 主要进行了规则的匹配，可能这几个插件不需要。况且 soul-admin 也没有这些插件的界面。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310211108.png"><br>前文说过修改路径为真实后端服务 RPC 路径，多个 RPC 会有多个相同的这个插件，本次示例 Soul 开启了两个 <code>DubboBodyParamPlugin</code></p><ul><li>ApacheDubboBodyParamPlugin -&gt; Dubbo</li><li>DubboBodyParamPlugin -&gt; SOFA</li></ul><p>暂时不知道为什么要开启 SOFA RPC</p><p><code>ApacheDubboBodyParamPlugin</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ApacheDubboBodyParamPlugin</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> SoulPluginChain chain)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> ServerHttpRequest request = exchange.getRequest();<br>        <span class="hljs-keyword">final</span> SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);<br>        <span class="hljs-comment">// DUBBO</span><br>        <span class="hljs-keyword">if</span> (Objects.nonNull(soulContext) &amp;&amp; RpcTypeEnum.DUBBO.getName().equals(soulContext.getRpcType())) &#123;<br>            MediaType mediaType = request.getHeaders().getContentType();<br>            ServerRequest serverRequest = ServerRequest.create(exchange, messageReaders);<br>            <span class="hljs-keyword">if</span> (MediaType.APPLICATION_JSON.isCompatibleWith(mediaType)) &#123;<br>                <span class="hljs-keyword">return</span> body(exchange, serverRequest, chain);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)) &#123;<br>                <span class="hljs-keyword">return</span> formData(exchange, serverRequest, chain);<br>            &#125;<br>            <span class="hljs-keyword">return</span> query(exchange, serverRequest, chain);<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.execute(exchange);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>BodyParamPlugin</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// BodyParamPlugin</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> SoulPluginChain chain)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> ServerHttpRequest request = exchange.getRequest();<br>        <span class="hljs-keyword">final</span> SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);<br>        <span class="hljs-comment">// SOFA</span><br>        <span class="hljs-keyword">if</span> (Objects.nonNull(soulContext) &amp;&amp; RpcTypeEnum.SOFA.getName().equals(soulContext.getRpcType())) &#123;<br>            MediaType mediaType = request.getHeaders().getContentType();<br>            ServerRequest serverRequest = ServerRequest.create(exchange, messageReaders);<br>            <span class="hljs-keyword">if</span> (MediaType.APPLICATION_JSON.isCompatibleWith(mediaType)) &#123;<br>                <span class="hljs-keyword">return</span> body(exchange, serverRequest, chain);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)) &#123;<br>                <span class="hljs-keyword">return</span> formData(exchange, serverRequest, chain);<br>            &#125;<br>            <span class="hljs-keyword">return</span> query(exchange, serverRequest, chain);<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.execute(exchange);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>插件的调用都类似，所以本节验证了很多上节的猜想，也提出了新的猜想等待日后验证。</p>]]></content>
    
    
    <categories>
      
      <category>Soul 学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Soul</tag>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Soul 网关 4：Dubbo 插件的使用</title>
    <link href="/2021/03/10/Soul-%E7%BD%91%E5%85%B3-4%EF%BC%9ADubbo-%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/03/10/Soul-%E7%BD%91%E5%85%B3-4%EF%BC%9ADubbo-%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>文档地址：</p><blockquote><p><a href="https://dromara.org/zh/projects/soul/dubbo-plugin/">https://dromara.org/zh/projects/soul/dubbo-plugin/</a></p></blockquote><h2 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h2><p>本次实例需要 ZK，这里提供 Docker 和下载压缩文件两种方式。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -dit --name zk -p 2181:2181 zookeeper<br></code></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载地址</p><blockquote><p><a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p></blockquote><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130616.png"><br>撰写本文时 ZooKepper 版本为 3.6.2，下载后解压。</p><p>将 conf 文件夹下的 zoo_sample.cfg 文件复制一份，命名为 zoo.cfg。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130636.png"><br>新建用于存放 data 和 dataLog 的目录，然后编辑 zoo.cfg 文件，指定 dataDir 和 dataLogDir。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130652.png"><br>运行 bin 目录下 zkServer.cmd 启动 ZooKeeper。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130717.png" alt="image.png"><br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130729.png"></p><h2 id="运行-SouAdminBootstrap"><a href="#运行-SouAdminBootstrap" class="headerlink" title="运行 SouAdminBootstrap"></a>运行 SouAdminBootstrap</h2><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130742.png"><br>启动 soul-admin 之后，进入管理页面，关闭 divide 插件，打开 dubbo 插件。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130801.png"><br>如果在这个界面找不到 dubbo 插件，那可能被隐藏了，直接搜索就会出来<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130814.png"></p><h2 id="运行-soul-bootstarp"><a href="#运行-soul-bootstarp" class="headerlink" title="运行 soul-bootstarp"></a>运行 soul-bootstarp</h2><p>根据文档</p><blockquote><p><a href="https://dromara.org/zh/projects/soul/dubbo-proxy/">https://dromara.org/zh/projects/soul/dubbo-proxy/</a></p></blockquote><p>修改soul-bootstrap 的 pom.xml 。Dubbo 插件的依赖在 <code>&lt;!-- soul  apache dubbo plugin start--&gt;</code> 和 <code>&lt;!-- soul  apache dubbo plugin end--&gt;</code> 之间。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130845.png"><br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130858.png" alt="image.png"><br>本次实需要将该部分下面这几行取消注释</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--soul  apache dubbo plugin start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dromara<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>soul-spring-boot-starter-plugin-apache-dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Dubbo zookeeper registry dependency start --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-framework<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将之前的 Http 插件注释掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">        <span class="hljs-comment">&lt;!--if you use http proxy start this--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;groupId&gt;org.dromara&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;artifactId&gt;soul-spring-boot-starter-plugin-divide&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;groupId&gt;org.dromara&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;artifactId&gt;soul-spring-boot-starter-plugin-httpclient&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;$&#123;last.version&#125;&lt;/version&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--if you use http proxy end this--&gt;</span><br></code></pre></td></tr></table></figure><p>运行 soulBootstrapApplication<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130919.png"></p><h2 id="运行-soul-examples-apache-dubbo-service"><a href="#运行-soul-examples-apache-dubbo-service" class="headerlink" title="运行 soul-examples-apache-dubbo-service"></a>运行 soul-examples-apache-dubbo-service</h2><p>这是本次演示的示例程序<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130932.png"></p><h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p>打开 soul-admin 的 dubbo 界面，发现已经注册了好多路径，随便找一个测试一下<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130946.png" alt="image.png"><br>如下所示：代理成功！<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210310130957.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>Soul 学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Soul</tag>
      
      <tag>Dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Java 的动态代理实现 AOP</title>
    <link href="/2021/03/08/%E4%BD%BF%E7%94%A8-Java-%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0-AOP/"/>
    <url>/2021/03/08/%E4%BD%BF%E7%94%A8-Java-%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0-AOP/</url>
    
    <content type="html"><![CDATA[<p>Spring 的 AOP 是基于动态代理实现的，本文基于 Java 里的动态代理，实现一个简单的 AOP。</p><h2 id="要代理的接口"><a href="#要代理的接口" class="headerlink" title="要代理的接口"></a>要代理的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ExampleService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打印信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h2><p>本文就会通过动态代理增加该实例的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ExampleService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Print example info&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现代理的类"><a href="#实现代理的类" class="headerlink" title="实现代理的类"></a>实现代理的类</h2><p>该实例负责实现接口方法的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        before();<br>        method.invoke(object, args);<br>        after();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Object object;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyHandler</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.object = object;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;proxy before method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;proxy after method&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>主要就是通过 <code>Proxy.newProxyInstance()</code> 创建 <code>interface</code> 实例，该方法需要 3 个参数：</p><ul><li>接口类的 ClassLoader</li><li>一个存放实现的接口的数组</li><li>处理接口方法调用的 <code>InvocationHandler</code> 实例</li></ul><p>注意 <code>Proxy.newProxyInstance()</code> 返回的是 <code>Object</code> ，需要强转成接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicProxyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ExampleServiceImpl exampleService = <span class="hljs-keyword">new</span> ExampleServiceImpl();<br>        ClassLoader classLoader = exampleService.getClass().getClassLoader();<br>        Class[] interfaces = exampleService.getClass().getInterfaces();<br>        InvocationHandler handler = <span class="hljs-keyword">new</span> ProxyHandler(exampleService);<br>        ExampleService proxy = (ExampleService) Proxy.newProxyInstance(classLoader, interfaces, handler);<br>        proxy.info();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>运行结果如下，我们的实现类被成功增强了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">proxy before methid<br>Print example info<br>proxy after method<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 线程间协作方法总结</title>
    <link href="/2021/03/07/Java-%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%8D%8F%E4%BD%9C%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2021/03/07/Java-%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%8D%8F%E4%BD%9C%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>本文总结一下我知道的 Java 线程间协作的方式，以计算斐波那契数列为例，新线程负责计算，主线程取得结果。</p><h2 id="不使用多线程并发工具"><a href="#不使用多线程并发工具" class="headerlink" title="不使用多线程并发工具"></a>不使用多线程并发工具</h2><h3 id="使用循环判断"><a href="#使用循环判断" class="headerlink" title="使用循环判断"></a>使用循环判断</h3><p>指定一个变量作为信号，用循环的方式监控这个变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用循环不断判断</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoLockMethod</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Integer valve = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sum</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        valve = fibo(num);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibo(a - <span class="hljs-number">1</span>) + fibo(a - <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (valve == <span class="hljs-keyword">null</span>) &#123;&#125;<br>        <span class="hljs-keyword">return</span> valve;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-comment">// 再这里创建一个线程或线城池</span><br>        <span class="hljs-comment">// 异步执行 下面方法</span><br><br>        <span class="hljs-keyword">final</span> NoLockMethod method = <span class="hljs-keyword">new</span> NoLockMethod();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            method.sum(<span class="hljs-number">45</span>);<br>        &#125;);<br>        thread.start();<br>        <span class="hljs-keyword">int</span> result = method.getValue(); <span class="hljs-comment">// 这是得到的返回值</span><br><br>        <span class="hljs-comment">// 确保拿到 resut 并输出</span><br>        System.out.println(<span class="hljs-string">&quot;异步计算的结果为：&quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;使用时间：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot; ms&quot;</span>);<br><br>        <span class="hljs-comment">// 然后退出 main 线程</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步计算的结果为：1836311903</span><br><span class="hljs-comment">使用时间：6438 ms</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="使用-thread-join"><a href="#使用-thread-join" class="headerlink" title="使用 thread.join()"></a>使用 thread.join()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 Thread Join</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadJoinMethod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-comment">// 在这里创建一个线程或线程池</span><br>        <span class="hljs-comment">// 异步执行下面方法</span><br>        AtomicInteger value = <span class="hljs-keyword">new</span> AtomicInteger();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>            value.set(sum());<br>        &#125;);<br>        thread.start();<br>        thread.join();<br><br>        <span class="hljs-keyword">int</span> result = value.get(); <span class="hljs-comment">// 这是拿到的返回值</span><br><br>        <span class="hljs-comment">// 确保 拿到 result 并输出</span><br>        System.out.println(<span class="hljs-string">&quot;异步计算结果为：&quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;使用时间：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot; ms&quot;</span>);<br>        <span class="hljs-comment">// 然后退出 main 线程</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span> <span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fibo(<span class="hljs-number">45</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibo(a - <span class="hljs-number">1</span>) + fibo(a - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步计算结果为：1836311903</span><br><span class="hljs-comment">使用时间：5413 ms</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="使用多线程并发工具"><a href="#使用多线程并发工具" class="headerlink" title="使用多线程并发工具"></a>使用多线程并发工具</h2><h3 id="不使用-Future（使用类似等待-通知机制）"><a href="#不使用-Future（使用类似等待-通知机制）" class="headerlink" title="不使用 Future（使用类似等待-通知机制）"></a>不使用 Future（使用类似等待-通知机制）</h3><h4 id="Synchronized-wait-notify"><a href="#Synchronized-wait-notify" class="headerlink" title="Synchronized-wait-notify"></a>Synchronized-wait-notify</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过的管程等待-通知机制，来获取值</span><br><span class="hljs-comment"> * wait() notify()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynchronizedMethod</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Integer value = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sum</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        value = fibo(num);<br>        notifyAll();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( a &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibo(a-<span class="hljs-number">1</span>) + fibo(a-<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">while</span> (value == <span class="hljs-keyword">null</span>) &#123;<br>            wait();<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-comment">// 在这里创建一个线程或线程池</span><br>        <span class="hljs-comment">// 异步执行下面方法</span><br>        <span class="hljs-keyword">final</span> SynchronizedMethod method = <span class="hljs-keyword">new</span> SynchronizedMethod();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            method.sum(<span class="hljs-number">45</span>);<br>        &#125;);<br>        thread.start();<br><br>        <span class="hljs-keyword">int</span> result = method.getValue();<span class="hljs-comment">// 这是得到的返回值</span><br><br>        <span class="hljs-comment">// 确保拿到 result 并输出</span><br>        System.out.println(<span class="hljs-string">&quot;异步计算的结果为：&quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;使用时间：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot; ms&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步计算的结果为：1836311903</span><br><span class="hljs-comment">使用时间：5198 ms</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Semaphore 方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SemaphoreMethod</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Integer value = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">final</span> Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = fibo(num);<br>        semaphore.release();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibo(a - <span class="hljs-number">1</span>) + fibo(a - <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">int</span> result;<br>        semaphore.acquire();<br>        result = <span class="hljs-keyword">this</span>.value;<br>        semaphore.release();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-comment">// 在这里创建一个线程或线程池</span><br>        <span class="hljs-comment">// 异步执行下面方法</span><br><br>        <span class="hljs-keyword">final</span> SemaphoreMethod method = <span class="hljs-keyword">new</span> SemaphoreMethod();<br>        method.semaphore.acquire();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                method.sum(<span class="hljs-number">45</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>        thread.start();<br>        <span class="hljs-keyword">int</span> result = method.getValue();<br>        System.out.println(<span class="hljs-string">&quot;异步计算结果为&quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;使用时间：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot; ms&quot;</span>);<br>        <span class="hljs-comment">// 然后退出 main 线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Lock-Condition"><a href="#Lock-Condition" class="headerlink" title="Lock-Condition"></a>Lock-Condition</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LockConditionMethod</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Integer value = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> Condition calComplete = lock.newCondition();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        lock.lock();<br>        value = fibo(num);<br>        calComplete.signal();<br>        lock.unlock();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibo(a - <span class="hljs-number">1</span>) + fibo(a - <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">while</span> (value == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                calComplete.await();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-comment">// 在这里创建一个线程或线程池</span><br>        <span class="hljs-comment">// 异步执行下面方法</span><br>        <span class="hljs-keyword">final</span> LockConditionMethod method = <span class="hljs-keyword">new</span> LockConditionMethod();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            method.sum(<span class="hljs-number">45</span>);<br>        &#125;);<br>        thread.start();<br>        <span class="hljs-keyword">int</span> result = method.getValue(); <span class="hljs-comment">// 这是得到的返回值</span><br><br>        <span class="hljs-comment">// 确保拿到 result 并输出</span><br>        System.out.println(<span class="hljs-string">&quot;异步计算的结果为：&quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;使用时间：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot; ms&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步计算的结果为：1836311903</span><br><span class="hljs-comment">使用时间：5402 ms</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CyclicBarrierMethod 方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CyclicBarrierMethod</span> </span>&#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">volatile</span> Integer value = <span class="hljs-keyword">null</span>;<br>    CyclicBarrier barrier;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBarrier</span><span class="hljs-params">(CyclicBarrier barrier)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.barrier = barrier;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> <span class="hljs-keyword">throws</span> BrokenBarrierException, InterruptedException </span>&#123;<br>        value = fibo(num);<br>        System.out.println(barrier.await());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(a &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibo(a-<span class="hljs-number">1</span>) + fibo(a-<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">final</span> CyclicBarrierMethod method = <span class="hljs-keyword">new</span> CyclicBarrierMethod();<br>        CyclicBarrier barrier = <span class="hljs-keyword">new</span> CyclicBarrier(<span class="hljs-number">1</span>, () -&gt; &#123;<br>            <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>; <span class="hljs-comment">// 这是得到的反回值</span><br>            result = method.getValue();<br><br>            <span class="hljs-comment">// 确保拿到 result 并输出</span><br>            System.out.println(<span class="hljs-string">&quot;异步计算结果为：&quot;</span> + result);<br>            System.out.println(<span class="hljs-string">&quot;使用时间为：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot; ms&quot;</span>);<br>        &#125;);<br>        method.setBarrier(barrier);<br><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                method.sum(<span class="hljs-number">45</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>        thread.start();<br><br>        <span class="hljs-comment">// 然后退出 main 线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CountDownLatchMethod</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Integer value = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> CountDownLatch latch;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        value = fibo(num);<br>        latch.countDown();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibo(a - <span class="hljs-number">1</span>)  + fibo(a - <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        latch.await();<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * latch 没有重置功能，这个函数用来传入新的</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> latch</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLatch</span><span class="hljs-params">(CountDownLatch latch)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.latch = latch;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-comment">// 在这里创建一个线程或线程池</span><br>        <span class="hljs-comment">// 异步执行下面方法</span><br>        CountDownLatch latch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">final</span> CountDownLatchMethod method = <span class="hljs-keyword">new</span> CountDownLatchMethod();<br>        method.setLatch(latch);<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>            method.sum(<span class="hljs-number">45</span>);<br>        &#125;);<br>        thread.start();<br>        <span class="hljs-keyword">int</span> result = method.getValue(); <span class="hljs-comment">// 这是得到的返回值</span><br><br>        <span class="hljs-comment">// 确保 拿到 result 并输出</span><br>        System.out.println(<span class="hljs-string">&quot;异步计算结果为：&quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;使用时间：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot; ms&quot;</span>);<br>        <span class="hljs-comment">// 然后退出 main 线程</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步计算结果为：1836311903</span><br><span class="hljs-comment">使用时间：5318 ms</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="使用-Future（使用线程池的-submit）"><a href="#使用-Future（使用线程池的-submit）" class="headerlink" title="使用 Future（使用线程池的 submit）"></a>使用 Future（使用线程池的 submit）</h3><h4 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Future</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FutureMethod</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fibo(num);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibo(a - <span class="hljs-number">1</span>) + fibo(a - <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> sum(<span class="hljs-number">45</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-comment">// 在这里创建一个线程或线程池</span><br>        <span class="hljs-comment">// 异步执行 下面方法</span><br>        ExecutorService executorService = Executors.newFixedThreadPool(<span class="hljs-number">1</span>);<br>        Future&lt;Long&gt; future = executorService.submit(<span class="hljs-keyword">new</span> FutureMethod());<br>        <span class="hljs-keyword">long</span> result = future.get(); <span class="hljs-comment">// 这是得到的返回值i</span><br>        <span class="hljs-comment">// 确保 拿到 result 并输出</span><br>        System.out.println(<span class="hljs-string">&quot;异步计算结果为：&quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;使用时间：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot;ms&quot;</span>);<br>        <span class="hljs-comment">// 然后退出 main 线程</span><br>        executorService.shutdown();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">异步计算结果为：1836311903</span><br><span class="hljs-comment">使用时间：5277ms</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * FutureTask</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FutureTaskMethod</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Get</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>        FutureTask&lt;Integer&gt; sum;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Get</span><span class="hljs-params">(FutureTask&lt;Integer&gt; sum)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.sum = sum;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            <span class="hljs-keyword">return</span> sum.get();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 求结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            <span class="hljs-keyword">return</span> fibo(<span class="hljs-number">45</span>);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> fibo(a - <span class="hljs-number">1</span>) + fibo(a - <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-comment">// 在这里创建一个线程或线程池</span><br>        <span class="hljs-comment">// 异步执行下面方法</span><br>        FutureTask&lt;Integer&gt; sum = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(<span class="hljs-keyword">new</span> Sum());<br>        FutureTask&lt;Integer&gt; get = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(<span class="hljs-keyword">new</span> Get(sum));<br><br>        Thread sumT = <span class="hljs-keyword">new</span> Thread(sum);<br>        sumT.start();<br>        Thread getT = <span class="hljs-keyword">new</span> Thread(get);<br>        getT.start();<br><br>        <span class="hljs-keyword">int</span> result = get.get(); <span class="hljs-comment">// 这是得到的返回值</span><br><br>        <span class="hljs-comment">// 确保拿到 result 并输出</span><br>        System.out.println(<span class="hljs-string">&quot;异步计算的结果为：&quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;使用时间：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot; ms&quot;</span>);<br><br>        <span class="hljs-comment">// 然后退出 main 线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>call()</code> 没有输入参数，所以用两个 <code>call()</code> ，一个用来指定固定的输入参数，令一个用来获取结果。</p><h4 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CompletableFuture 方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompleteableMethod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-comment">// 在这里创建一个线程或线程池</span><br>        <span class="hljs-comment">// 异步执行下面方法</span><br><br>        <span class="hljs-keyword">int</span> result = CompletableFuture.supplyAsync(() -&gt; sum()).join();<br><br>        <span class="hljs-comment">// 确保 拿到 result 并输出</span><br>        System.out.println(<span class="hljs-string">&quot;异步计算的结果为：&quot;</span> + result);<br>        System.out.println(<span class="hljs-string">&quot;使用时间：&quot;</span> + (System.currentTimeMillis() - start) + <span class="hljs-string">&quot; ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fibo(<span class="hljs-number">45</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibo(a - <span class="hljs-number">1</span>) + fibo(a - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Soul 网关 3：Http 请求是怎么被处理的？</title>
    <link href="/2021/03/06/Soul-%E7%BD%91%E5%85%B3-3%EF%BC%9AHttp-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84%EF%BC%9F/"/>
    <url>/2021/03/06/Soul-%E7%BD%91%E5%85%B3-3%EF%BC%9AHttp-%E8%AF%B7%E6%B1%82%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>前文体验了使用 divide 插件转发 Http 请求，本文来分析一个 Http 网络包在 Soul 网关中都经历了什么。</p><h2 id="粗略观察"><a href="#粗略观察" class="headerlink" title="粗略观察"></a>粗略观察</h2><p>用 PostMan 发送网络包，观察日志，摘要如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">2021-03-05 19:34:12.367  INFO 21748 --- [work-threads-20] o.d.soul.plugin.base.AbstractSoulPlugin  : divide selector success match , selector name :/http<br>2021-03-05 19:34:12.367  INFO 21748 --- [work-threads-20] o.d.soul.plugin.base.AbstractSoulPlugin  : divide rule success match , rule name :/http/order/findById<br></code></pre></td></tr></table></figure><p>这些日志与 divide 插件有关，是 <code>AbstractSoulPlugin</code> 打印出来的<br>双击 Shift 打开 Search Everywhere 窗口搜索 <code>AbstractSoulPlugin</code> ，跳转到对应代码，点击左侧向下箭头，查看实现类，可以看到我们要找的 <code>DividePlugin</code><br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306134447.png"><br><code>DividePlugin</code> 中有一个很大的 <code>doExecute</code> 方法，在这打个断点，使用 PostMan 发起请求，通过调用栈定位到了 <code>SoulWebHandler</code> 的 <code>execute()</code> 方法<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210328105206.png"><br>大概就是遍历所有的 <code>plugin</code> 来处理 <code>ServerWebExchange</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Delegate to the next &#123;<span class="hljs-doctag">@code</span> WebFilter&#125; in the chain.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange the current server exchange</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request handling is complete</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Mono.defer(() -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.index &lt; plugins.size()) &#123;<br>                SoulPlugin plugin = plugins.get(<span class="hljs-keyword">this</span>.index++);<br>                Boolean skip = plugin.skip(exchange);<br>                <span class="hljs-keyword">if</span> (skip) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.execute(exchange);<br>                &#125;<br>                <span class="hljs-keyword">return</span> plugin.execute(exchange, <span class="hljs-keyword">this</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> Mono.empty();<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着往上翻阅代码，发现是 <code>SoulWebHandler</code> 的 <code>handle()</code> 方法调用的上面这个 <code>execute()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Handle the web server exchange.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exchange the current server exchange</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request handling is complete</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">handle</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> ServerWebExchange exchange)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultSoulPluginChain(plugins).execute(exchange).subscribeOn(scheduler);<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的函数上打断点，再次调试，进入了 <code>DefaultWebFilterChain</code> 类的 <code>filter()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> Mono.defer(() -&gt;<br>      <span class="hljs-keyword">this</span>.currentFilter != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.chain != <span class="hljs-keyword">null</span> ?<br>          invokeFilter(<span class="hljs-keyword">this</span>.currentFilter, <span class="hljs-keyword">this</span>.chain, exchange) :<br>          <span class="hljs-keyword">this</span>.handler.handle(exchange));<br>&#125;<br></code></pre></td></tr></table></figure><p>再次在上面方法上打断点<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306134621.png"><br>来到 <code>FilteringWebHandler</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">handle</span><span class="hljs-params">(ServerWebExchange exchange)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.chain.filter(exchange);<br>&#125;<br></code></pre></td></tr></table></figure><p>来到 <code>WebHandlerDecorator</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">handle</span><span class="hljs-params">(ServerWebExchange exchange)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.delegate.handle(exchange);<br>&#125;<br></code></pre></td></tr></table></figure><p>来到 <code>ExceptionHandlingWebHandler</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">handle</span><span class="hljs-params">(ServerWebExchange exchange)</span> </span>&#123;<br>  Mono&lt;Void&gt; completion;<br>  <span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">// 当前位置</span><br>    completion = <span class="hljs-keyword">super</span>.handle(exchange);<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>    completion = Mono.error(ex);<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (WebExceptionHandler handler : <span class="hljs-keyword">this</span>.exceptionHandlers) &#123;<br>    completion = completion.onErrorResume(ex -&gt; handler.handle(exchange, ex));<br>  &#125;<br>  <span class="hljs-keyword">return</span> completion;<br>&#125;<br></code></pre></td></tr></table></figure><p>来到 <code>HttpWebHandlerAdapter</code> 类，之前一直在传递的 <code>ServerWebExchange</code> 就是在这生成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">handle</span><span class="hljs-params">(ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.forwardedHeaderTransformer != <span class="hljs-keyword">null</span>) &#123;<br>    request = <span class="hljs-keyword">this</span>.forwardedHeaderTransformer.apply(request);<br>  &#125;<br>  <br>  <span class="hljs-comment">// 生成 exchange</span><br>  ServerWebExchange exchange = createExchange(request, response);<br><br>  LogFormatUtils.traceDebug(logger, traceOn -&gt;<br>      exchange.getLogPrefix() + formatRequest(exchange.getRequest()) +<br>          (traceOn ? <span class="hljs-string">&quot;, headers=&quot;</span> + formatHeaders(exchange.getRequest().getHeaders()) : <span class="hljs-string">&quot;&quot;</span>));<br><br>  <span class="hljs-comment">// 在这调用</span><br>  <span class="hljs-keyword">return</span> getDelegate().handle(exchange)<br>      .doOnSuccess(aVoid -&gt; logResponse(exchange))<br>      .onErrorResume(ex -&gt; handleUnresolvedError(exchange, ex))<br>      .then(Mono.defer(response::setComplete));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>来到 <code>ReactiveWebServerApplicationContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">handle</span><span class="hljs-params">(ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.handler.handle(request, response);<br>&#125;<br></code></pre></td></tr></table></figure><p>来到 <code>ReactorHttpHandlerAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">apply</span><span class="hljs-params">(HttpServerRequest reactorRequest, HttpServerResponse reactorResponse)</span> </span>&#123;<br>  NettyDataBufferFactory bufferFactory = <span class="hljs-keyword">new</span> NettyDataBufferFactory(reactorResponse.alloc());<br>  <span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">// 生成了 exchange 需要的 request 和 response</span><br>    ReactorServerHttpRequest request = <span class="hljs-keyword">new</span> ReactorServerHttpRequest(reactorRequest, bufferFactory);<br>    ServerHttpResponse response = <span class="hljs-keyword">new</span> ReactorServerHttpResponse(reactorResponse, bufferFactory);<br><br>    <span class="hljs-keyword">if</span> (request.getMethod() == HttpMethod.HEAD) &#123;<br>      response = <span class="hljs-keyword">new</span> HttpHeadResponseDecorator(response);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.httpHandler.handle(request, response)<br>        .doOnError(ex -&gt; logger.trace(request.getLogPrefix() + <span class="hljs-string">&quot;Failed to complete: &quot;</span> + ex.getMessage()))<br>        .doOnSuccess(aVoid -&gt; logger.trace(request.getLogPrefix() + <span class="hljs-string">&quot;Handling completed&quot;</span>));<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (URISyntaxException ex) &#123;<br>    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>      logger.debug(<span class="hljs-string">&quot;Failed to get request URI: &quot;</span> + ex.getMessage());<br>    &#125;<br>    reactorResponse.status(HttpResponseStatus.BAD_REQUEST);<br>    <span class="hljs-keyword">return</span> Mono.empty();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来到 <code>HttpServerHandle</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStateChange</span><span class="hljs-params">(Connection connection, State newState)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (newState == HttpServerState.REQUEST_RECEIVED) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        log.debug(format(connection.channel(), <span class="hljs-string">&quot;Handler is being applied: &#123;&#125;&quot;</span>), handler);<br>      &#125;<br>      HttpServerOperations ops = (HttpServerOperations) connection;<br>      Mono.fromDirect(handler.apply(ops, ops))<br>          .subscribe(ops.disposeSubscriber());<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      log.error(format(connection.channel(), <span class="hljs-string">&quot;&quot;</span>), t);<br>      connection.channel()<br>                .close();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来到 <code>TcpServerBind</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStateChange</span><span class="hljs-params">(Connection connection, State newState)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (newState == State.DISCONNECTING) &#123;<br>      <span class="hljs-keyword">if</span> (connection.channel()<br>                    .isActive() &amp;&amp; !connection.isPersistent()) &#123;<br>        connection.dispose();<br>      &#125;<br>    &#125;<br><br>    childObs.onStateChange(connection, newState);<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>来到 <code>HttpServerOperations</code> 再然后就是 Netty 的东西了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onInboundNext</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> HttpRequest) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      listener().onStateChange(<span class="hljs-keyword">this</span>, HttpServerState.REQUEST_RECEIVED);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      onInboundError(e);<br>      ReferenceCountUtil.release(msg);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> FullHttpRequest) &#123;<br>      <span class="hljs-keyword">super</span>.onInboundNext(ctx, msg);<br>      <span class="hljs-keyword">if</span> (isHttp2()) &#123;<br>        onInboundComplete();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> HttpContent) &#123;<br>    <span class="hljs-keyword">if</span> (msg != LastHttpContent.EMPTY_LAST_CONTENT) &#123;<br>      <span class="hljs-keyword">super</span>.onInboundNext(ctx, msg);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> LastHttpContent) &#123;<br>      onInboundComplete();<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">super</span>.onInboundNext(ctx, msg);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>HttpServerOperations : 接受 Netty 请求的地方</li><li>TcpServerBind</li><li>HttpServerHandle</li><li>ReactorHttpHandlerAdapter ：生成 response 和 request</li><li>ReactiveWebServerApplicationContext</li><li>HttpWebHandlerAdapter ：exchange 的生成</li><li>ExceptionHandlingWebHandler</li><li>WebHandlerDecorator</li><li>FilteringWebHandler</li><li>DefaultWebFilterChain</li><li>SoulWebHandler ：plugins 调用链</li><li>DividePlugin ：plugin 具体处理<h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2>接下来看看<br><code>SoulWebHandler</code> 的 plugins 调用链，在下面的函数上打断点分析 plugin 的执行情况<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306134700.png"><br>下图红色的插件被跳过了<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306134715.png"><br>下面是 <code>AbstractSoulPlugin</code> 的 <code>execute()</code>，注释位置要判断是否 enable，我们只启用了  <code>DividePlugin</code>，<code>WafPlugin</code> ，所以只有这两个插件会运行这个方法的 <code>if</code> 部分，在 <code>if</code> 中进行了一些规则的匹配。</li></ul><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306160806.png"></p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306134730.png"></p><p>看一下 SoulAdmin 的界面</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306160829.png"></p><p>每个插件界面都有「选择器列表」和「选择器规则列表」，就是在这个地方匹配的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> SoulPluginChain chain)</span> </span>&#123;<br>    String pluginName = named();<br>    <span class="hljs-keyword">final</span> PluginData pluginData = BaseDataCache.getInstance().obtainPluginData(pluginName);<br>    <span class="hljs-comment">// 此处判断插件是否启用</span><br>    <span class="hljs-keyword">if</span> (pluginData != <span class="hljs-keyword">null</span> &amp;&amp; pluginData.getEnabled()) &#123;<br>        <span class="hljs-keyword">final</span> Collection&lt;SelectorData&gt; selectors = BaseDataCache.getInstance().obtainSelectorData(pluginName);<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(selectors)) &#123;<br>            <span class="hljs-keyword">return</span> handleSelectorIsNull(pluginName, exchange, chain);<br>        &#125;<br>        <span class="hljs-comment">// 匹配选择器</span><br>        <span class="hljs-keyword">final</span> SelectorData selectorData = matchSelector(exchange, selectors);<br>        <span class="hljs-keyword">if</span> (Objects.isNull(selectorData)) &#123;<br>            <span class="hljs-keyword">return</span> handleSelectorIsNull(pluginName, exchange, chain);<br>        &#125;<br>        <span class="hljs-comment">// 打印日志</span><br>        selectorLog(selectorData, pluginName);<br>        <span class="hljs-keyword">final</span> List&lt;RuleData&gt; rules = BaseDataCache.getInstance().obtainRuleData(selectorData.getId());<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(rules)) &#123;<br>            <span class="hljs-keyword">return</span> handleRuleIsNull(pluginName, exchange, chain);<br>        &#125;<br>        <span class="hljs-comment">// 匹配选择器规则</span><br>        RuleData rule;<br>        <span class="hljs-keyword">if</span> (selectorData.getType() == SelectorTypeEnum.FULL_FLOW.getCode()) &#123;<br>            <span class="hljs-comment">//get last</span><br>            rule = rules.get(rules.size() - <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 匹配规则</span><br>            rule = matchRule(exchange, rules);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Objects.isNull(rule)) &#123;<br>            <span class="hljs-keyword">return</span> handleRuleIsNull(pluginName, exchange, chain);<br>        &#125;<br>        <span class="hljs-comment">// 日志</span><br>        ruleLog(rule, pluginName);<br>        <span class="hljs-comment">// 进入插件的处理方法</span><br>        <span class="hljs-keyword">return</span> doExecute(exchange, chain, selectorData, rule);<br>    &#125;<br>    <span class="hljs-keyword">return</span> chain.execute(exchange);<br>&#125;<br></code></pre></td></tr></table></figure><p>以 divide 插件为例，上面方法会打印日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">2021-03-06 15:06:51.105  INFO 22368 --- [-work-threads-1] o.d.soul.plugin.base.AbstractSoulPlugin  : divide selector success match , selector name :/http<br>2021-03-06 15:07:03.683  INFO 22368 --- [-work-threads-1] o.d.soul.plugin.base.AbstractSoulPlugin  : divide rule success match , rule name :/http/order/findById<br></code></pre></td></tr></table></figure><p>然后再 <code>WebClientPlugin</code> 中看到了似乎发送了网络请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> SoulPluginChain chain)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);<br>    <span class="hljs-keyword">assert</span> soulContext != <span class="hljs-keyword">null</span>;<br>    String urlPath = exchange.getAttribute(Constants.HTTP_URL);<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(urlPath)) &#123;<br>        Object error = SoulResultWrap.error(SoulResultEnum.CANNOT_FIND_URL.getCode(), SoulResultEnum.CANNOT_FIND_URL.getMsg(), <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> WebFluxResultUtils.result(exchange, error);<br>    &#125;<br>    <span class="hljs-keyword">long</span> timeout = (<span class="hljs-keyword">long</span>) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_TIME_OUT)).orElse(<span class="hljs-number">3000L</span>);<br>    <span class="hljs-keyword">int</span> retryTimes = (<span class="hljs-keyword">int</span>) Optional.ofNullable(exchange.getAttribute(Constants.HTTP_RETRY)).orElse(<span class="hljs-number">0</span>);<br>    log.info(<span class="hljs-string">&quot;The request urlPath is &#123;&#125;, retryTimes is &#123;&#125;&quot;</span>, urlPath, retryTimes);<br>    HttpMethod method = HttpMethod.valueOf(exchange.getRequest().getMethodValue());<br>    WebClient.RequestBodySpec requestBodySpec = webClient.method(method).uri(urlPath);<br>    <span class="hljs-keyword">return</span> handleRequestBody(requestBodySpec, exchange, timeout, retryTimes, chain);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Mono&lt;Void&gt; <span class="hljs-title">handleRequestBody</span><span class="hljs-params">(<span class="hljs-keyword">final</span> WebClient.RequestBodySpec requestBodySpec,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-keyword">final</span> ServerWebExchange exchange,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> timeout,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> retryTimes,</span></span><br><span class="hljs-function"><span class="hljs-params">                                     <span class="hljs-keyword">final</span> SoulPluginChain chain)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> requestBodySpec.headers(httpHeaders -&gt; &#123;<br>        httpHeaders.addAll(exchange.getRequest().getHeaders());<br>        httpHeaders.remove(HttpHeaders.HOST);<br>    &#125;)<br>            .contentType(buildMediaType(exchange))<br>            .body(BodyInserters.fromDataBuffers(exchange.getRequest().getBody()))<br>            .exchange()<br>            .doOnError(e -&gt; log.error(e.getMessage()))<br>            .timeout(Duration.ofMillis(timeout))<br>            .retryWhen(Retry.onlyIf(x -&gt; x.exception() <span class="hljs-keyword">instanceof</span> ConnectTimeoutException)<br>                .retryMax(retryTimes)<br>                .backoff(Backoff.exponential(Duration.ofMillis(<span class="hljs-number">200</span>), Duration.ofSeconds(<span class="hljs-number">20</span>), <span class="hljs-number">2</span>, <span class="hljs-keyword">true</span>)))<br>            .flatMap(e -&gt; doNext(e, exchange, chain));<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> Mono&lt;Void&gt; <span class="hljs-title">doNext</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ClientResponse res, <span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> SoulPluginChain chain)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (res.statusCode().is2xxSuccessful()) &#123;<br>        exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.ERROR.getName());<br>    &#125;<br>    exchange.getAttributes().put(Constants.CLIENT_RESPONSE_ATTR, res);<br>    <span class="hljs-keyword">return</span> chain.execute(exchange);<br>&#125;<br></code></pre></td></tr></table></figure><p>来到 <code>WebClientResponsePlugin</code> ，好像返回了一个 response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Process the Web request and (optionally) delegate to the next</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> WebFilter&#125; through the given &#123;<span class="hljs-doctag">@link</span> SoulPluginChain&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exchange the current server exchange</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> chain    provides a way to delegate to the next filter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; to indicate when request processing is complete</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">execute</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> SoulPluginChain chain)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> chain.execute(exchange).then(Mono.defer(() -&gt; &#123;<br>        ServerHttpResponse response = exchange.getResponse();<br>        ClientResponse clientResponse = exchange.getAttribute(Constants.CLIENT_RESPONSE_ATTR);<br>        <span class="hljs-keyword">if</span> (Objects.isNull(clientResponse)<br>                || response.getStatusCode() == HttpStatus.BAD_GATEWAY<br>                || response.getStatusCode() == HttpStatus.INTERNAL_SERVER_ERROR) &#123;<br>            Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_RESULT_ERROR.getCode(), SoulResultEnum.SERVICE_RESULT_ERROR.getMsg(), <span class="hljs-keyword">null</span>);<br>            <span class="hljs-keyword">return</span> WebFluxResultUtils.result(exchange, error);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (response.getStatusCode() == HttpStatus.GATEWAY_TIMEOUT) &#123;<br>            Object error = SoulResultWrap.error(SoulResultEnum.SERVICE_TIMEOUT.getCode(), SoulResultEnum.SERVICE_TIMEOUT.getMsg(), <span class="hljs-keyword">null</span>);<br>            <span class="hljs-keyword">return</span> WebFluxResultUtils.result(exchange, error);<br>        &#125;<br>        response.setStatusCode(clientResponse.statusCode());<br>        response.getCookies().putAll(clientResponse.cookies());<br>        response.getHeaders().putAll(clientResponse.headers().asHttpHeaders());<br>        <span class="hljs-keyword">return</span> response.writeWith(clientResponse.body(BodyExtractors.toDataBuffers()));<br>    &#125;));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="复查"><a href="#复查" class="headerlink" title="复查"></a>复查</h2><p>详细看一下 WafPlugin、DividePlugin 、WebClientPlugin 、 WebClientResponsePlugin 等</p><h3 id="DividePlugin"><a href="#DividePlugin" class="headerlink" title="DividePlugin"></a>DividePlugin</h3><p>发送一个错误请求试试，这个请求多打了一个字母 <code>d</code></p><ul><li><a href="http://localhost:9195/http/order/findByIdd?id=1">http://localhost:9195/http/order/findByIdd?id=1</a></li></ul><p>发现下面这俩东西</p><p><code>FallbackUtils</code> 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get no rule result.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pluginName the plugin name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exchange   the exchange</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the mono</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mono&lt;Void&gt; <span class="hljs-title">getNoRuleResult</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String pluginName, <span class="hljs-keyword">final</span> ServerWebExchange exchange)</span> </span>&#123;<br>    log.error(<span class="hljs-string">&quot;can not match rule data: &#123;&#125;&quot;</span>, pluginName);<br>    Object error = SoulResultWrap.error(SoulResultEnum.RULE_NOT_FIND.getCode(), SoulResultEnum.RULE_NOT_FIND.getMsg(), <span class="hljs-keyword">null</span>);<br>    <span class="hljs-keyword">return</span> WebFluxResultUtils.result(exchange, error);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>WebFluxResultUtils</code>，这里构建错误响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Error mono.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exchange the exchange</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> result    the result</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the mono</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mono&lt;Void&gt; <span class="hljs-title">result</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ServerWebExchange exchange, <span class="hljs-keyword">final</span> Object result)</span> </span>&#123;<br>    exchange.getResponse().getHeaders().setContentType(MediaType.APPLICATION_JSON);<br>    <span class="hljs-keyword">return</span> exchange.getResponse().writeWith(Mono.just(exchange.getResponse()<br>            .bufferFactory().wrap(Objects.requireNonNull(JsonUtils.toJson(result)).getBytes())));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210328105232.png"><br>这是 PostMan 得到的响应，与上图匹配<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306134834.png" alt="image.png"></p><h3 id="WafPlugin"><a href="#WafPlugin" class="headerlink" title="WafPlugin"></a>WafPlugin</h3><p>发送一条可以被 WafPlugin 拒绝的请求。同样会到 <code>WebFluxResultUtils</code> 来构建错误响应。</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306161025.png"></p><h3 id="WebClientPlugin"><a href="#WebClientPlugin" class="headerlink" title="WebClientPlugin"></a>WebClientPlugin</h3><p>前面猜测 <code>WebClientPlugin</code> 的 <code>handleRequestBody</code> 会给真正的后台服务发送请求，<code>doNext()</code>，会做接下来的处理，为了验证这个猜测，首先定位到 <code>soul-examples-http</code> - <code>controller</code> - 的 <code>OrderController</code> 类，里面的 <code>findById()</code> 就是我们之前请求的方法，给他加上个日志功能。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306134850.png"><br>然后在 <code>WebClientPlugin</code> 的 <code>handleRequestBody</code> 和 <code>doNext()</code> 上打上断点，再发送一个正确的请求，发现日志的确是在这个时候打印出来的。</p><h3 id="WebClientResponsePlugin"><a href="#WebClientResponsePlugin" class="headerlink" title="WebClientResponsePlugin"></a>WebClientResponsePlugin</h3><p>之前猜测 <code>WebClientResponsePlugin</code> 的 <code>execute()</code> 方法会返回请求的数据给 <code>postman()</code>，打断点，发现<code>execute()</code> 执行完后会返回到 <code>SoulWebHandler</code> 也就是前文调用链的地方。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306134902.png" alt="image.png"><br>之分析调用链的时候已经知道 <code>WebClientResponsePlugin</code> 是最后一个插件，它后边两个都是跳过的状态，在之后就是一些 reactor 和 Netty 的东西了，相信应该是刚刚那个地方给 PostMan 返回的结果。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306134917.png"></p><h3 id="DefaultWebFilterChain"><a href="#DefaultWebFilterChain" class="headerlink" title="DefaultWebFilterChain"></a>DefaultWebFilterChain</h3><p>还记得 DefaultWebFilterChain 的这个方法吗？在这打个断点看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">@Override<br>public Mono&lt;Void&gt; filter(ServerWebExchange exchange) &#123;<br>  <span class="hljs-built_in">return</span> Mono.defer(() -&gt;<br>      this.currentFilter != null &amp;&amp; this.chain != null ?<br>          invokeFilter(this.currentFilter, this.chain, exchange) :<br>          this.handler.handle(exchange));<br>&#125;<br></code></pre></td></tr></table></figure><p>发现了下面几个相关类，也就跟据名字猜测一下意思吧。</p><ul><li><p>MetricsWebFilter</p></li><li><p>HealthFilter</p></li><li><p>FileSizeFilter</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li><li><p>HttpServerOperations : 接收 Netty 请求的地方</p></li><li><p>ReactorHttpHandlerAdapter ：生成 response 和 request</p></li><li><p>HttpWebHandlerAdapter ：exchange 的生成</p></li><li><p>DefaultWebFilterChain </p></li><li><p>SoulWebHandler：plugins 调用链</p></li></ul><p>请求由 Netty 收到后，来到 Filter，这里进行一些处理：健康检查，文件大小检查等待，然后来到核心的 plugins，这里实现了 Soul 的核心功能：过滤，转发，返回等等。</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210306161215.png" alt="Soul plugins 调用链"></p>]]></content>
    
    
    <categories>
      
      <category>Soul 学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Soul</tag>
      
      <tag>Http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Soul 网关 2：divide 插件与 Http 代理</title>
    <link href="/2021/03/05/Soul-%E7%BD%91%E5%85%B3-2%EF%BC%9Adivide-%E6%8F%92%E4%BB%B6%E4%B8%8E-Http-%E4%BB%A3%E7%90%86/"/>
    <url>/2021/03/05/Soul-%E7%BD%91%E5%85%B3-2%EF%BC%9Adivide-%E6%8F%92%E4%BB%B6%E4%B8%8E-Http-%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>divide 插件是进行 http 正向代理的插件，所有 http 类型的请求，都是由该插件进行负载均衡的调用。</p></blockquote><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>文档：<a href="https://dromara.org/zh/projects/soul/divide-plugin/">https://dromara.org/zh/projects/soul/divide-plugin/</a><br>据文档描述，在 soul-bootsrap 的 <code>pom.xml</code> 引入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--if you use http proxy start this--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dromara<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>soul-spring-boot-starter-plugin-divide<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;last.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dromara<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>soul-spring-boot-starter-plugin-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;last.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在 soul-admin 界面开启 divide 插件<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195835.png"></p><h2 id="运行示例代码"><a href="#运行示例代码" class="headerlink" title="运行示例代码"></a>运行示例代码</h2><p>示例代码在下面这个位置<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195846.png"><br>如果运行不了就在项目设置中导入这个模块<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195903.png"><br>看一下配置文件，该服务运行在 <code>localhost:8188</code><br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195939.png"><br>整理一下思路</p><ul><li>soul-admin 端口 9095</li><li>soul-bootstrap 端口 9195</li><li>examples 下的 http 服务端口 8188</li></ul><p>用 PostMan 构建一个请求，发往 8188 测试一下<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195959.png"></p><ul><li><a href="http://localhost:8188/order/findById?id=1">http://localhost:8188/order/findById?id=1</a></li></ul><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200018.png"><br>现在将请求发往网关试一下，根据 soul-admin 提示，应该构建如下请求<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200036.png"></p><ul><li><a href="http://localhost:9195/http/order/findById?id=1">http://localhost:9195/http/order/findById?id=1</a></li></ul><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200054.png"><br>可见网关成功的转发了我们的请求</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>测试一下负载均衡<br>修改一下配置，允许并行<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200114.png"><br>端口改成 8189<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200131.png"><br>在 soul-admin divide 界面点击修改<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200150.png"><br>发现有两个配置，权重都是 50<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200208.png"><br>用 PostMan 发送几次请求，观察日志发现请求均匀的打到了两个地址<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200221.png"></p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>通过 waf 界面可以对流量进行过滤<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200234.png"><br>这个界面的选择器会对流量进行初始匹配，匹配通过后会由选择器规则列表进行最终匹配</p><p>在选择器列表和选择器规则列表都添加下面的规则，设置返回状态码 504<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210328110046.png"><br>使用 PostMan 测试，成功拦截<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305200306.png"></p>]]></content>
    
    
    <categories>
      
      <category>Soul 学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Soul</tag>
      
      <tag>Http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Soul 网关 1：初步运行</title>
    <link href="/2021/03/05/Soul-%E7%BD%91%E5%85%B3-1%EF%BC%9A%E5%88%9D%E6%AD%A5%E8%BF%90%E8%A1%8C/"/>
    <url>/2021/03/05/Soul-%E7%BD%91%E5%85%B3-1%EF%BC%9A%E5%88%9D%E6%AD%A5%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>官网：<a href="https://dromara.org/">https://dromara.org/</a><br>GitHub：<a href="https://github.com/dromara/soul">https://github.com/dromara/soul</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>拉取代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:dromara/soul.git<br></code></pre></td></tr></table></figure><p>新建临时分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b <span class="hljs-built_in">read</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean package install -Dmaven.test.skip=<span class="hljs-literal">true</span> -Dmaven.javadoc.skip=<span class="hljs-literal">true</span> -Drat.skip=<span class="hljs-literal">true</span> -Dcheckstyle.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>SoulAdmin 需要配置数据源，使用 Docker 启动一个 MySQL。</p><ul><li>username: root</li><li>password: 123456<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest<br></code></pre></td></tr></table></figure>然后修改 SoulAdmin  配置文件<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195101.png"></li></ul><p><strong>或者</strong>直接启动一个内存数据库 H2，只需去掉下图配置文件的注释部分<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195118.png"></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="soul-admin"><a href="#soul-admin" class="headerlink" title="soul-admin"></a>soul-admin</h3><p>运行 soul-admin 模块下的启动类 SoulAdminBootstrap<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195131.png"><br>此时可以浏览器访问 Soul 管理界面</p><ul><li>localhost:9095</li><li>admin</li><li>123456</li></ul><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195157.png"></p><h3 id="soul-bootstarp"><a href="#soul-bootstarp" class="headerlink" title="soul-bootstarp"></a>soul-bootstarp</h3><p>现在还什么也干不了，因为还需要启动 soul-bootstarp，这个模块是 soul 的核心<br>运行  soul-bootstarp 模块下的启动类 SoulBootstrapApplication<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210305195234.png"><br>可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">websocket reconnect is successful.....<br></code></pre></td></tr></table></figure><p>启动成功！</p>]]></content>
    
    
    <categories>
      
      <category>Soul 学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Soul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义 ClassLoader 加载一个加密 class 文件</title>
    <link href="/2021/03/05/%E8%87%AA%E5%AE%9A%E4%B9%89-ClassLoader-%E5%8A%A0%E8%BD%BD%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%AF%86-class-%E6%96%87%E4%BB%B6/"/>
    <url>/2021/03/05/%E8%87%AA%E5%AE%9A%E4%B9%89-ClassLoader-%E5%8A%A0%E8%BD%BD%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%AF%86-class-%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>跟着我体验一下传说中非常厉害的类加载器吧！</p><h2 id="制作加密-class"><a href="#制作加密-class" class="headerlink" title="制作加密 class"></a>制作加密 class</h2><h3 id="目标类"><a href="#目标类" class="headerlink" title="目标类"></a>目标类</h3><p>我们要加载的类很简单，它只有一个 <code>hello()</code> 方法。编译这个类生成 class 文件，待会要用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123; <br>        System.out.println(<span class="hljs-string">&quot;Hello, classLoader!&quot;</span>); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>下面这段代码读取了刚才生成的 Hello.class ，加密之后保存为 Hello.xlass</p><p><code>encode()</code> 实现了一个简单的加密，加载类的时候使用同样的方法就可以解密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ClassLoader;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : solidSpoon</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : 2021/3/5 1:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EncodeFile</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String name = <span class="hljs-string">&quot;Hello&quot;</span>;<br>        EncodeFile ef = <span class="hljs-keyword">new</span> EncodeFile();<br>        <span class="hljs-keyword">byte</span>[] fileByteArray = ef.loadFile(name);<br>        fileByteArray = ef.encode(fileByteArray);;<br>        ef.storeFile(fileByteArray, name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] loadFile(String name)&#123;<br>        File f = <span class="hljs-keyword">new</span> File(<span class="hljs-keyword">this</span>.getClass().getResource(name + <span class="hljs-string">&quot;.class&quot;</span>).getPath());<br>        <span class="hljs-keyword">byte</span>[] fileByteArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[(<span class="hljs-keyword">int</span>)f.length()];<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> FileInputStream(f).read(fileByteArray);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> fileByteArray;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">storeFile</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] fileByteArray, String name)</span> </span>&#123;<br>        String p = <span class="hljs-keyword">this</span>.getClass().getResource(<span class="hljs-string">&quot;&quot;</span>).getPath();<br>        File file = <span class="hljs-keyword">new</span> File(p + <span class="hljs-string">&quot;/&quot;</span> + name + <span class="hljs-string">&quot;.xlass&quot;</span>);<br>        <span class="hljs-keyword">try</span> (FileOutputStream fop = <span class="hljs-keyword">new</span> FileOutputStream(file)) &#123;<br>            <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>                file.createNewFile();<br>            &#125;<br>            fop.write(fileByteArray);<br>            fop.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] encode (<span class="hljs-keyword">byte</span>[] fileToEncode)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; fileToEncode.length; i++)&#123;<br>            fileToEncode[i] = (<span class="hljs-keyword">byte</span>) (<span class="hljs-number">255</span> - fileToEncode[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> fileToEncode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>接下来我们定义自己的加载器，把刚才的 xlass 文件解密之后加载到 JVM 中，并反射运行它的 <code>hello()</code> 方法。</p><p>具体方法是继承 <code>ClassLoader</code> 类，覆盖它的 <code>findClass()</code> 方法，在该方法中使用 <code>defineClass()</code> 将字节流转成 <code>Class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ClassLoader;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : solidSpoon</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> : 2021/3/5 1:30</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; clazz = <span class="hljs-keyword">new</span>  MyClassLoader().findClass(<span class="hljs-string">&quot;Hello&quot;</span>);<br>            Object obj = clazz.getConstructor().newInstance();<br>            Method method = clazz.getMethod(<span class="hljs-string">&quot;hello&quot;</span>);<br>            method.invoke(obj);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        File f = <span class="hljs-keyword">new</span> File(<span class="hljs-keyword">this</span>.getClass().getResource(name + <span class="hljs-string">&quot;.xlass&quot;</span>).getPath());<br>        <span class="hljs-keyword">byte</span>[] fileByteArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[(<span class="hljs-keyword">int</span>)f.length()];<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> FileInputStream(f).read(fileByteArray);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        fileByteArray = decode(fileByteArray);<br>        String pack = <span class="hljs-keyword">this</span>.getClass().getPackage().getName();<br>        <span class="hljs-keyword">return</span> defineClass(pack + <span class="hljs-string">&quot;.&quot;</span> + name, fileByteArray, <span class="hljs-number">0</span>, fileByteArray.length);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将编码过的字节数组解码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileToDecode 要解码的字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解码的字节数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] decode (<span class="hljs-keyword">byte</span>[] fileToDecode)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; fileToDecode.length; i++)&#123;<br>            fileToDecode[i] = (<span class="hljs-keyword">byte</span>) (<span class="hljs-number">255</span> - fileToDecode[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> fileToDecode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>我们的类加载器解密了 xlass 并将它加载到了 JVM 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Hello, classLoader!<br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>类加载的原则是双亲委派模型：如果一个类加载器收到了类加载的请求，它首先会把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p><p>我们定义的这个 <code>findClass()</code> 方法会在下面这个地方调用，如代码所示，如果该类还没有被加载并且父加载器无法加载个类（当然肯定不能加载），就会调用我们定义的 <code>findClass()</code> 去加载这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java.lang ClassLoader</span><br><br><span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-keyword">boolean</span> resolve)<br>        <span class="hljs-keyword">throws</span> ClassNotFoundException<br>    &#123;<br>        <span class="hljs-keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<br>            <span class="hljs-comment">// First, check if the class has already been loaded</span><br>            Class&lt;?&gt; c = findLoadedClass(name);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">long</span> t0 = System.nanoTime();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>                        c = parent.loadClass(name, <span class="hljs-keyword">false</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        c = findBootstrapClassOrNull(name);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                    <span class="hljs-comment">// ClassNotFoundException thrown if class not found</span><br>                    <span class="hljs-comment">// from the non-null parent class loader</span><br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">// If still not found, then invoke findClass in order</span><br>                    <span class="hljs-comment">// to find the class.</span><br>                    <span class="hljs-keyword">long</span> t1 = System.nanoTime();<br>                    c = findClass(name);<br><br>                    <span class="hljs-comment">// this is the defining class loader; record the stats</span><br>                    PerfCounter.getParentDelegationTime().addTime(t1 - t0);<br>                    PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);<br>                    PerfCounter.getFindClasses().increment();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (resolve) &#123;<br>                resolveClass(c);<br>            &#125;<br>            <span class="hljs-keyword">return</span> c;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
      <tag>类加载器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你读一个 Java 文件的字节码</title>
    <link href="/2021/03/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E8%AF%BB%E4%B8%80%E4%B8%AAJava%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2021/03/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E8%AF%BB%E4%B8%80%E4%B8%AAJava%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>想要读懂 Java 的字节码其实没那么难。当然，如果你有汇编语言的经验就会更好上手。本文手把手教你阅读一个简单 Java 文件的字节码。</p><h2 id="如何得到字节码？"><a href="#如何得到字节码？" class="headerlink" title="如何得到字节码？"></a>如何得到字节码？</h2><p>以下面这段示例代码为例，他存放在一个包中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo.a<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>通过下面这几个方法就可以查看代码的字节码：</p><h3 id="方法-1-、命令行"><a href="#方法-1-、命令行" class="headerlink" title="方法 1 、命令行"></a>方法 1 、命令行</h3><p>相关命令如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">javac demo/a/B.java <span class="hljs-comment">// 编译</span><br>jvavp -c demo.a.B   <span class="hljs-comment">// 输出字节码</span><br>javap -c -verbose demo.a.B <span class="hljs-comment">// 详细输出</span><br></code></pre></td></tr></table></figure><h3 id="方法-2-、idea-插件"><a href="#方法-2-、idea-插件" class="headerlink" title="方法 2 、idea 插件"></a>方法 2 、idea 插件</h3><p>下载个插件：「jclasslib Bytecode Viewer」，网址如下</p><blockquote><p><a href="https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer">https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer</a></p></blockquote><p>安装该插件后，首先编译代码，然后<br>菜单 👉 「view」 👉 「Show Bytecode With jclasslib」<br>结果如下：<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210402103711.png"></p><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><p>我们使用下面这段代码，你可以将其输入 IDE 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">130</span>;<br>        <span class="hljs-keyword">int</span> num3 = num1 + num2;<br>        <span class="hljs-keyword">int</span> num4 = num2 - num1;<br>        <span class="hljs-keyword">int</span> num5 = num1 * num2;<br>        <span class="hljs-keyword">int</span> num6 = num2 / num1;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> num7 = <span class="hljs-number">5</span>;<br>        Integer num88 = <span class="hljs-number">6</span>;<br><br>        <span class="hljs-comment">//看装箱指令</span><br>        <span class="hljs-keyword">if</span>(num88 == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(num1);<br>        &#125;<br><br>        List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        nums.add(<span class="hljs-number">1</span>);<br>        nums.add(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums)&#123;<br>            System.out.println(num);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (nums.size() == num2) &#123;<br>            System.out.println(num2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是由 idea 反编译得到的代码，可以观察到 <code>for</code> 循环被改成了 <code>while</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">130</span>;<br>        <span class="hljs-keyword">int</span> var10000 = num1 + num2;<br>        var10000 = num2 - num1;<br>        var10000 = num1 * num2;<br>        var10000 = num2 / num1;<br>        <span class="hljs-keyword">int</span> num7 = <span class="hljs-keyword">true</span>;<br>        Integer num88 = <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">if</span> (num88 == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(num1);<br>        &#125;<br><br>        List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> ArrayList();<br>        nums.add(<span class="hljs-number">1</span>);<br>        nums.add(<span class="hljs-number">2</span>);<br>        Iterator var10 = nums.iterator();<br><br>        <span class="hljs-keyword">while</span>(var10.hasNext()) &#123;<br>            <span class="hljs-keyword">int</span> num = (Integer)var10.next();<br>            System.out.println(num);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (nums.size() == num2) &#123;<br>            System.out.println(num2);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="阅读字节码"><a href="#阅读字节码" class="headerlink" title="阅读字节码"></a>阅读字节码</h2><p>为了方便解释，我将字节码文件拆成小段，首先使用下面这个命令输出字节码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PS C:\Users\cedar\Desktop\ReadBytecode\code\target\classes&gt; javap -c .\Hello.class<br></code></pre></td></tr></table></figure><p>一开始就说明了这是「Hello.java」的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Compiled from <span class="hljs-string">&quot;Hello.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br></code></pre></td></tr></table></figure><p>紧接着自动创建了无参构造方法，调用了父类 <code>Object</code> 的初始化函数。 <code>aload_0</code> 是说把本地变亮表位置 0 的对象加载出来，而这个位置保存的是对自身的引用。</p><p>你会发现字节码每条命令前面也有一个数字，比如 <code>0: aload_0</code> 前面有一个 <code>0</code> ，它代表 <code>aload_0</code> 这条指令在第 0 个位置。接着观察 <code>4: return</code>，它的位置怎么突然变成 4 了？那是因为 <code>invokespecial</code> 这个指令还有两个输入参数，一共占用三个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">-- 字节码<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span>;<br>    Code:<br>       <span class="hljs-number">0</span>: aload_0<br>       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V<br>       <span class="hljs-number">4</span>: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p> <code>1: invokespecial #1</code> 的 <code>#1</code>，代表常量池位置 1.常量池通过 <code>javap -c -verbose demo.a.B</code> 就可以显示出来，如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Constant pool:<br>   <span class="hljs-comment">#1 = Methodref          #15.#48        // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   <span class="hljs-comment">#2 = Methodref          #12.#49        // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br>   <span class="hljs-comment">#3 = Methodref          #12.#50        // java/lang/Integer.intValue:()I</span><br>   ......<br></code></pre></td></tr></table></figure><p>接下来就是 <code>main</code> 方法了，还记得我们在 <code>main</code> 方法中干了什么吗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 源码</span><br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">130</span>;<br>        <span class="hljs-keyword">int</span> num3 = num1 + num2;<br>        <span class="hljs-keyword">int</span> num4 = num2 - num1;<br>        <span class="hljs-keyword">int</span> num5 = num1 * num2;<br>        <span class="hljs-keyword">int</span> num6 = num2 / num1;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> num7 = <span class="hljs-number">5</span>;<br>        Integer num88 = <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure><p>它对应的字节码是下面这样的，具体内容我已经标注出来了，稍微解释一下 <code>iconst_1</code> ，代表常量 <code>int 1</code> ，也就是代码中有个常量 「1」加载到栈顶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(java.lang.String[])</span></span>;<br>  Code:<br><br>  -- 初始化 num1 = <span class="hljs-number">1</span>;保存到变量表 <span class="hljs-number">1</span><br>     <span class="hljs-number">0</span>: iconst_1<br>     <span class="hljs-number">1</span>: istore_1<br><br>  -- 初始化 num2 = <span class="hljs-number">130</span>; 保存到 变量表<span class="hljs-number">2</span>，以下同理<br>     <span class="hljs-number">2</span>: sipush        <span class="hljs-number">130</span><br>     <span class="hljs-number">5</span>: istore_2<br><br>  -- 计算 num3(匿名了) = num1 + num2;<br>     <span class="hljs-number">6</span>: iload_1<br>     <span class="hljs-number">7</span>: iload_2<br>     <span class="hljs-number">8</span>: iadd<br>     <span class="hljs-number">9</span>: istore_3<br><br>  -- 计算 num4(匿名了) = num2 - num1;  <br>    <span class="hljs-number">10</span>: iload_2<br>    <span class="hljs-number">11</span>: iload_1<br>    <span class="hljs-number">12</span>: isub<br>    <span class="hljs-number">13</span>: istore        <span class="hljs-number">4</span><br><br>  -- 计算 num5(匿名了) = num1 * num2; <br>    <span class="hljs-number">15</span>: iload_1<br>    <span class="hljs-number">16</span>: iload_2<br>    <span class="hljs-number">17</span>: imul<br>    <span class="hljs-number">18</span>: istore        <span class="hljs-number">5</span><br><br>  -- 计算 num6(匿名了) = num2 / num1;<br>    <span class="hljs-number">20</span>: iload_2<br>    <span class="hljs-number">21</span>: iload_1<br>    <span class="hljs-number">22</span>: idiv<br>    <span class="hljs-number">23</span>: istore        <span class="hljs-number">6</span><br><br>  -- <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> num7 = <span class="hljs-number">5</span>;<br>    <span class="hljs-number">25</span>: iconst_5<br>    <span class="hljs-number">26</span>: istore        <span class="hljs-number">7</span><br><br>  -- Integer num88 = <span class="hljs-number">6</span>;<br>    <span class="hljs-number">28</span>: bipush        <span class="hljs-number">6</span><br>    30: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;<br>    <span class="hljs-number">33</span>: astore        <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>然后是这个 <code>if</code> 语句 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (num88 == <span class="hljs-number">0</span>) &#123;<br>    System.out.println(num1);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意上文 <code>num88</code> 被保存到变量表位置 8，所以此处把位置 8 加载出来</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">-- 字节码<br>      <span class="hljs-number">35</span>: aload         <span class="hljs-number">8</span><br>      37: invokevirtual #3                  // Method java/lang/Integer.intValue:()I<br>      <span class="hljs-number">40</span>: ifne          <span class="hljs-number">50</span> -- 如果不等于 <span class="hljs-number">0</span> 就跳转到 <span class="hljs-number">50</span><br>      43: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>      <span class="hljs-number">46</span>: iload_1          -- 存储 num1 的地方<br>      47: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V<br></code></pre></td></tr></table></figure><p>然后我们操作了一个 <code>List</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 源码</span><br>        List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        nums.add(<span class="hljs-number">1</span>);<br>        nums.add(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">-- 初始化 List 对象<br>  50: new           #6                  // class java/util/ArrayList<br>  <span class="hljs-number">53</span>: dup              -- 把栈顶的值复制一份再压回去，此时栈顶有两份一样的值，分别被 <span class="hljs-number">54</span> 和 <span class="hljs-number">57</span> 指令消耗了<br>  54: invokespecial #7                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V<br>  <span class="hljs-number">57</span>: astore        <span class="hljs-number">9</span> -- 将初始化的对象存到寄存器 <span class="hljs-number">9</span><br><br>-- list -&gt; add(<span class="hljs-number">1</span>);<br>  <span class="hljs-number">59</span>: aload         <span class="hljs-number">9</span><br>  <span class="hljs-number">61</span>: iconst_1<br>  62: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;<br>  65: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z<br>  <span class="hljs-number">70</span>: pop           -- 丢弃了 add 返回值<br><br>-- list -&gt; add(<span class="hljs-number">2</span>)<br>  <span class="hljs-number">71</span>: aload         <span class="hljs-number">9</span><br>  <span class="hljs-number">73</span>: iconst_2<br>  74: invokestatic  #2                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;<br>  77: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z<br>  <span class="hljs-number">82</span>: pop           -- 丢弃了 add 返回值<br></code></pre></td></tr></table></figure><p>遍历 <code>List</code> ，这里 JVM 把 <code>for</code> 改成了 <code>while</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 源代码</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums)&#123;<br>        System.out.println(num);<br>    &#125;<br><br><span class="hljs-comment">//被 JVM 该成如下代码</span><br>    Iterator var10 = nums.iterator();<br>    <span class="hljs-keyword">while</span>(var11.hasNext()) &#123;<br>        <span class="hljs-keyword">int</span> num = (Integer)var11.next();<br>        System.out.println(num);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">-- 获取迭代器<br>  <span class="hljs-number">83</span>: aload         <span class="hljs-number">9</span><br>  85: invokeinterface #9,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;<br>  <span class="hljs-number">90</span>: astore        <span class="hljs-number">10</span><br><br>-- <br>  <span class="hljs-number">92</span>: aload         <span class="hljs-number">10</span><br>  94: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z<br>  <span class="hljs-number">99</span>: ifeq          <span class="hljs-number">128</span> -- 如果等于 <span class="hljs-number">0</span>，跳转到 <span class="hljs-number">128</span><br><br>-- 获取 next() 并打印<br> <span class="hljs-number">102</span>: aload         <span class="hljs-number">10</span><br> 104: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;<br> 109: checkcast     #12                 // class java/lang/Integer  -- 检查对象是否为给定类型<br> 112: invokevirtual #3                  // Method java/lang/Integer.intValue:()I<br> <span class="hljs-number">115</span>: istore        <span class="hljs-number">11</span><br> 117: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;<br> <span class="hljs-number">120</span>: iload         <span class="hljs-number">11</span><br> 122: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V<br> <span class="hljs-number">125</span>: goto          <span class="hljs-number">92</span><br></code></pre></td></tr></table></figure><p>最后我们写了个 if</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 源码</span><br>        <span class="hljs-keyword">if</span> (nums.size() == num2) &#123;<br>            System.out.println(num2);<br>        &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">    -- 如果 list.size() == num2; 打印 num2<br>     <span class="hljs-number">128</span>: aload         <span class="hljs-number">9</span><br>     130: invokeinterface #13,  1           // InterfaceMethod java/util/List.size:()I<br>     <span class="hljs-number">135</span>: iload_2<br>     <span class="hljs-number">136</span>: if_icmpne     <span class="hljs-number">146</span><br>     139: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>     <span class="hljs-number">142</span>: iload_2<br>     143: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V<br>     <span class="hljs-number">146</span>: <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Java 的字节码还是要比汇编简单一些。</p><p>这里再提一点，当要初始化一个 int 时（在 JVM 中：bool，byte，char，short 都是 int），根据不同的数字所占的位数不同，分别需要如下几个命令，方括号中给出了命令适用的范围</p><ul><li>iconst: [-1, 5]</li><li>bipush: [-128, 127]</li><li>sipush: [-32768, 32767]</li><li>idc: any int value</li></ul><hr><ul><li><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html">https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>字节码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PhotoShop 图层的混合模式是怎么回事</title>
    <link href="/2021/02/23/PhotoShop%E5%9B%BE%E5%B1%82%E7%9A%84%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B/"/>
    <url>/2021/02/23/PhotoShop%E5%9B%BE%E5%B1%82%E7%9A%84%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在修图软件中，调整混合模式就可以将两张照片用不同的风格混合在一起<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223210643.gif"><br>上图就是将下面这两个图片用不同的混合模式叠加的效果，那么你有没有想过这是什么原理呢？本文就以几个经典的混合模式为例简单研究一下。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223210706.png"></div><div class="group-image-wrap"><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223210720.png"></div></div></div><h2 id="图像显示原理"><a href="#图像显示原理" class="headerlink" title="图像显示原理"></a>图像显示原理</h2><p>其实各种图层混合模式的灵感就是来源于胶片相机时代。那个时代的摄影师没有先进的计算机来修图，只能拍好胶片后（当然也有其他的感光材料做底片），在暗房通过各种骚操作来给自己的照片添加「特效」，其中很多方法在数字时代就演变成了修图软件中的混合模式。</p><p>在修图软件中，图层就是一张张胶片叠在一起，而混合模式就是胶片与胶片之间的药水，不同的药水会让胶片之间产生不同的混合效果。当然要彻底理解修图软件的混合模式就必须得了解 RGB 色彩模型，因为这是混合模式的根基。</p><h3 id="YES-RGB"><a href="#YES-RGB" class="headerlink" title="YES!!! RGB!!"></a>YES!!! RGB!!</h3><p>有谁能不喜欢 RGB 呢。课本上都讲过，光的三原色是红绿蓝，将这三种颜色按照不同的强度和不同的比例混合之后，就可以得到其他的颜色。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211659.png"><br>计算机也是这样。在计算机中，红绿蓝的比例可以由一组在 [0 - 255] 之间的数据表示，数字越大对应颜色光强越大。就像下图这样，比如我们想显示纯红色，那就让红色的发光强度最大，绿色和蓝色不发光，因此红色就表示为 <code>RGB(255, 0, 0)</code><br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211735.png"><br>如果想显示黄色呢？根据上面的三原色图，只需要让蓝色不发光，红色和绿色发光强度最大，就得到了黄色，<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211803.png"><br>如果让三种颜色第比例相同，那就变成了黑白灰。神奇吧，黑白灰的三原色比例相同，只是发光强度不同。从这个角度看，黑白灰其实是一种颜色，只是亮度不同。所以就不难理解如果想看到真正的「白色」，就必须拼命提高亮度，这也是我们希望显示器亮度更高的原因之一。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211815.png"><br>当我们把上面的那些颜色块做的非常小，就变成了显示器中像素点。每个都是由红绿蓝三原色组成的，使用程序控制每个像素点的三原色比例，就显示出了不同的图案。下图就是显示器放大的样子。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223211825.png"></p><h3 id="修图就是计算"><a href="#修图就是计算" class="headerlink" title="修图就是计算"></a>修图就是计算</h3><p>到这，你一定能理解，修图软件中的所有操作就是对每个像素点的 RGB 值做计算，比如想要提高一张照片的曝光，那就同时提高每个像素的 RGB 值，这样照片就会变得明亮。如果想提高对比度，那就让较亮的地方的 RGB 更大，较暗的地方 RGB 更小，如下图：</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212000.png"></div><div class="group-image-wrap"><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212013.png"></div></div></div><blockquote><p>对比度低的照片各像素点的 RGB 值都比较居中，提高对比度后，RGB 值较低（暗）和 RGB 值较高（亮）的像素点变多了。</p></blockquote><p>混合模式也是这个原理，既然是混合，那就得有两个或两个以上的对象。在修图软件中，这样的对象就以图层为载体，我们将两个图层叠放到一起的时候，就会有一个上下对应的关系。上层的一个像素点会对应到下层的一个像素点，混合模式就是对这一组组像素点进行计算。</p><p>那么常见的混合模式是怎么计算像素点的呢？</p><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><p>为了计算两张照片的混合，首先要将个像素点 [0 - 255] 的值映射到 [0.00 - 1.00] 的小数区间，比如：</p><ul><li>0 = 0.00；</li><li>128 = 0.50；</li><li>256 = 1.00</li></ul><p>也就是每个像素点的三原色值变成了三个小数，这么处理了之后，就比较好计算，那先来两个简单的练练手</p><h3 id="「变亮」和「变暗」"><a href="#「变亮」和「变暗」" class="headerlink" title="「变亮」和「变暗」"></a>「变亮」和「变暗」</h3><p>这俩操作的公式很简单，分别对比两个像素点的 RGB，变亮就是取大值，变暗就是取小值。</p><p>比如有两个像素点：<code>a [84, 164, 109]</code>，<code>b [136, 100, 149]</code></p><ul><li>变亮：<code>c [136, 164, 149]</code></li><li>变暗：<code>c [84, 100, 109]</code></li></ul><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212124.png"></p><h3 id="正片叠底-Multiply"><a href="#正片叠底-Multiply" class="headerlink" title="正片叠底 Multiply"></a>正片叠底 Multiply</h3><p>什么是正片呢？</p><blockquote><p>正片（英语：Positive Film）为<a href="https://zh.wikipedia.org/wiki/%E5%BA%95%E7%89%87">底片</a>的分类标准之一，胶片功能类似相纸，利用<a href="https://zh.wikipedia.org/wiki/%E8%B2%A0%E7%89%87">负片</a>冲印得到正像显影，但不像负片和反转片是摄影胶片；由于以反转冲洗法（Reversal Process）的反转片（Reversal film）亦采正像显影方式<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E7%89%87#cite_note-1">[1]</a><a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E7%89%87#cite_note-2">[2]</a>，“正片”遂成与负片相对的感光材料总称，可供<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%96%93%E6%AD%A3%E7%89%87">影片拷贝</a>、<a href="https://zh.wikipedia.org/wiki/%E5%B9%BB%E7%87%88%E6%A9%9F">幻灯机</a>及灯箱观赏等用途上，也可印制照片、印刷制版。<br><a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E7%89%87">https://zh.wikipedia.org/wiki/%E6%AD%A3%E7%89%87</a></p></blockquote><p>可见，正片上的色彩就是图像真实的色彩<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212157.jpeg"></p><blockquote><p><a href="https://www.google.com/url?sa=i&url=https://zh-cn.facebook.com/hi.xikon/posts/279712775851997/&psig=AOvVaw1f4r21n5CgNHNQKHowqq5b&ust=1614155052538000&source=images&cd=vfe&ved=2ahUKEwi_8LWlyv_uAhXPCIgKHRkvCTIQjB16BAgAEAg">图片来源</a></p></blockquote><p>那正片叠底就是把两个正片叠上，由于正片亮的地方是透明的，暗的地方是不透明的，叠上之后透明的地方就会显示出另一张正片的图案。</p><p>典型示例如下图，上层图层是一个白色背景的水印，下层图层是一个风筝图片，它俩应用正片叠底之后水印的白色背景消失了。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212214.png"><br>正片叠底的英文是 Mutiply，跟它的名字一样，用公式表示就是：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="8.93ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 3947 776" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="mo" transform="translate(710.8, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(1766.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2517.8, 0)"><use xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="mi" transform="translate(3518, 0)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g></g></g></svg></mjx-container></p><p>如果刚才那个扣水印的原理你没有看明白，那就用公式解释一下：白色的值是 1，如果 a 是白色，那么混合之后的结果就是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="8.855ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 3914 776" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(722.2, 0)"><use xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="mi" transform="translate(1722.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(2429.2, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3485, 0)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g></g></g></svg></mjx-container>，因此水印白色背景被扣掉了。</p><p>如果自己跟自己做正片叠底呢？<br>那公式就是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.107ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 2699.1 915.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="mo" transform="translate(710.8, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1766.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(529, 363) scale(0.707)"><use xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g></svg></mjx-container></p><p>图像如下，可见整体变暗了一些，亮度低的地方透明度低，变暗的幅度就比较大。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212230.png"><br>理论上，如果你能在曲线工具中调出一个标准的二次曲线，那它俩效果就是一样的！<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212253.jpeg"></p><h3 id="滤色-Screen"><a href="#滤色-Screen" class="headerlink" title="滤色 Screen"></a>滤色 Screen</h3><p>正片叠底是堆叠正片，滤色就是堆叠负片，负片就是正片颜色取反。较暗的场景在负片中变得较亮，较亮就意味着透明，叠上之后透明的地方就会显示出另一张负片的图案。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212317.jpeg"><br>因此如果我们把水印的背景换成黑色，文字换成白色，它俩做滤色，就会得到白色的水印<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212335.png"><br>公式是这样：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.881ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10997.3 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D436"></use></g><g data-mml-node="mo" transform="translate(1037.8, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2093.6, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2815.8, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mrow" transform="translate(3816, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(389, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1111.2, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(2111.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2640.4, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g><g data-mml-node="mo" transform="translate(7067.7, 0)"><use xlink:href="#MJX-1-TEX-N-D7"></use></g><g data-mml-node="mrow" transform="translate(8067.9, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(389, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1111.2, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(2111.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(2540.4, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></g></svg></mjx-container><br>也很好理解：(1 - a) 和 (1 - b) 代表 a 和 b 的负片，它俩做堆叠（乘法），最后再冲洗成正片（1 - x）</p><p>自己叠底自己效果如下曲线</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.661ex" height="2.71ex" role="img" focusable="false" viewBox="0 -948 6922 1198" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="mo" transform="translate(710.8, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1766.6, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2488.8, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="msup" transform="translate(3489, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(389, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1111.2, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(2111.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2640.4, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g><g data-mml-node="mn" transform="translate(3029.4, 477.1) scale(0.707)"><use xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g></svg></mjx-container><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212357.png"><br>可见整体偏亮了，同样可以用曲线工具模拟出来：<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212412.jpeg"></p><h3 id="叠加-Overlay"><a href="#叠加-Overlay" class="headerlink" title="叠加 Overlay"></a>叠加 Overlay</h3><p>叠加模式是「正片叠底」和「滤色」的混合模式，是个分段函数。它的公式如下：</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.149ex" xmlns="http://www.w3.org/2000/svg" width="42.743ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 18892.6 2400" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-S3-7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-A0" d=""></path><path id="MJX-1-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-1-TEX-N-66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z"></path><path id="MJX-1-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-1-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path id="MJX-1-TEX-N-68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-1-TEX-N-72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path id="MJX-1-TEX-N-77" d="M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z"></path><path id="MJX-1-TEX-N-73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(550, 0)"><use xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(939, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(1468, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1912.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(2341.7, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g><g data-mml-node="mo" transform="translate(3008.4, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(4064.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-S3-7B"></use></g><g data-mml-node="mtable" transform="translate(750, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(500, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(1029, 0)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(1458, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g></g><g data-mml-node="mtd" transform="translate(9459.3, 0)"><g data-mml-node="mtext"><use xlink:href="#MJX-1-TEX-N-A0"></use><use xlink:href="#MJX-1-TEX-N-69" transform="translate(250, 0)"></use><use xlink:href="#MJX-1-TEX-N-66" transform="translate(528, 0)"></use><use xlink:href="#MJX-1-TEX-N-A0" transform="translate(834, 0)"></use></g><g data-mml-node="mi" transform="translate(1084, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(1890.8, 0)"><use xlink:href="#MJX-1-TEX-N-3C"></use></g><g data-mml-node="mn" transform="translate(2946.6, 0)"><use xlink:href="#MJX-1-TEX-N-30"></use><use xlink:href="#MJX-1-TEX-N-2E" transform="translate(500, 0)"></use><use xlink:href="#MJX-1-TEX-N-35" transform="translate(778, 0)"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(722.2, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1722.4, 0)"><use xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(2222.4, 0)"><use xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(2611.4, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(3333.7, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(4333.9, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(4862.9, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(5251.9, 0)"><use xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(5640.9, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(6363.1, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(7363.3, 0)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(7792.3, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(8181.3, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g></g><g data-mml-node="mtd" transform="translate(9459.3, 0)"><g data-mml-node="mtext"><use xlink:href="#MJX-1-TEX-N-A0"></use><use xlink:href="#MJX-1-TEX-N-6F" transform="translate(250, 0)"></use><use xlink:href="#MJX-1-TEX-N-74" transform="translate(750, 0)"></use><use xlink:href="#MJX-1-TEX-N-68" transform="translate(1139, 0)"></use><use xlink:href="#MJX-1-TEX-N-65" transform="translate(1695, 0)"></use><use xlink:href="#MJX-1-TEX-N-72" transform="translate(2139, 0)"></use><use xlink:href="#MJX-1-TEX-N-77" transform="translate(2531, 0)"></use><use xlink:href="#MJX-1-TEX-N-69" transform="translate(3253, 0)"></use><use xlink:href="#MJX-1-TEX-N-73" transform="translate(3531, 0)"></use><use xlink:href="#MJX-1-TEX-N-65" transform="translate(3925, 0)"></use><use xlink:href="#MJX-1-TEX-N-A0" transform="translate(4369, 0)"></use></g></g></g></g><g data-mml-node="mo" transform="translate(14828.3, 0)"></g></g></g></g></svg></mjx-container><p>其中，a 是<strong>底下的图层</strong>，b 是上面的图层，就是说</p><ul><li>当下面像素比较暗的时候，效果相当于两倍正片叠底，导致整体变暗</li><li>当下面像素比较亮的时候，效果相当于两倍滤色，导致整体变亮</li></ul><p>注意观察公式：当其中一个像素某个值是 0.5 的时候（a = 0.5 或 b = 0.5），另一个像素对应值相当于没变。如果我们拿一个红绿蓝的亮度都是 0.5 的图片，也就是<code>RGB(128,128,128)</code> 和另一个图片做叠加，这个颜色就消失了，再扣个水印试试。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212427.jpeg"><br>把水印放在<strong>下层</strong>，在上层应用「叠加」效果，<code>RGB(128,128,128)</code> 就被扣掉了，我来解释一下：</p><ul><li>白色水印部分比较亮，应用的是两倍滤色，前面说滤色会保留白色，因此白色被保留了下来</li><li>黑色水印部分比较暗，应用的是两倍正片叠底，前面说正片叠底会保留黑色，因此黑色被保留了下来</li></ul><p><code>RGB(128,128,128)</code> 这个颜色叫做中性灰。也就是叠加模式可以扣掉中性灰，这里引申一点，常见的「中性灰修图法」原理就是上面列出的这几点，有兴趣可以去查一下。</p><p>那叠加公式这个「两倍」是干嘛的，你说「叠加」是结合了「正片叠底」和「滤色」，那为什么不直接结合，非要弄个两倍呢？</p><p>看一下图像就知道了，由于三维图不好展示，这里还是压缩成二维，也就是自己叠加自己，如果不加两倍直接结合的话会怎么样呢？<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212442.png"><br>两条曲线在 x = 0.5 处根本就是不连续的嘛，这怎么能行呢，所以加上两倍是为了让它俩的图像连续，就下面这样<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212500.png"><br>去掉多余的线条，就是下面这个，是一个增加对比度的曲线：<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223212527.png"><br>注意上面这个曲线是自己叠加自己的情况，看起来还是可以用曲线工具模拟出来<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210319193823.jpeg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>图层的混合模式分为几种，就像曲线一样，有的应用了之后会让整体变亮，有的会让整体变暗，有的会增加对比度。</p><ul><li>「正片叠底」就是一种变暗的模式，混合后最暗的黑色会被保留下来，最亮的白色会被丢弃。</li><li>「滤色」是一种变亮的模式，混合之后最亮的白色会被保留下来，最暗的黑色会被丢弃。</li><li>「叠加」是一种增加对比度的模式，它是「正片叠底」和「滤色」的结合体，会扣去中性灰。</li></ul><p>混合模式还有很多，但只是函数的曲线略有差别，但是他们的函数复杂，因此就不展开了。如果你有兴趣可以去维基百科上看看</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Blend_modes">https://en.wikipedia.org/wiki/Blend_modes</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>初识 JShell</title>
    <link href="/2021/02/23/%E5%88%9D%E8%AF%86JShell/"/>
    <url>/2021/02/23/%E5%88%9D%E8%AF%86JShell/</url>
    
    <content type="html"><![CDATA[<h2 id="初识-JShell"><a href="#初识-JShell" class="headerlink" title="初识 JShell"></a>初识 JShell</h2><p>升级到 Java 11 后，有了 JShell 这个工具（其实 Java 9 就有了），它让 Java 可以像脚本语言一样直接在命令行交互，听起来好神奇，快来体验一下！！</p><h2 id="启动与退出"><a href="#启动与退出" class="headerlink" title="启动与退出"></a>启动与退出</h2><p>保险起见，得先弄明白启动与退出</p><p>直接在命令行输入 <code>jshell</code> 就启动了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~cedar jshell<br>|  Welcome to JShell -- Version 11.0.9.1<br>|  For an introduction <span class="hljs-built_in">type</span>: /<span class="hljs-built_in">help</span> intro<br><br>jshell&gt;<br></code></pre></td></tr></table></figure><p>退出方式稍微有一些特别，命令是 <code>/exit</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; /<span class="hljs-built_in">exit</span><br>|  Goodbye<br></code></pre></td></tr></table></figure><p><code>jshell -h</code> 可以发现提供了几个选项，这仨比较有意思</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">-q                    Quiet feedback.  Same as: --feedback concise<br>-s                    Really quiet feedback.  Same as: --feedback silent<br>-v                    Verbose feedback.  Same as: --feedback verbose<br></code></pre></td></tr></table></figure><p>试了一下 <code>-s</code> 非常安静的反馈，看起来真的清爽</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~cedar jshell -s<br>-&gt; int a = 1;<br>-&gt; int b = 2;<br></code></pre></td></tr></table></figure><p>初学者还是别整这么安静了，使用 <code>-v</code> 开启详细反馈吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~cedar jshell -v<br>|  Welcome to JShell -- Version 11.0.9.1<br>|  For an introduction <span class="hljs-built_in">type</span>: /<span class="hljs-built_in">help</span> intro<br><br>jshell&gt;<br></code></pre></td></tr></table></figure><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>赋几个值看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; int a = 1<br>a ==&gt; 1<br>|  created variable a : int<br><br>jshell&gt; a + 1<br><span class="hljs-variable">$2</span> ==&gt; 2<br>|  created scratch variable <span class="hljs-variable">$2</span> : int<br><br>jshell&gt; <span class="hljs-variable">$2</span> + a<br><span class="hljs-variable">$3</span> ==&gt; 3<br>|  created scratch variable <span class="hljs-variable">$3</span> : int<br></code></pre></td></tr></table></figure><p>可见：没有指定变量的数字会自动赋值给临时变量，我们也可以使用这个临时变量</p><h3 id="方法与类"><a href="#方法与类" class="headerlink" title="方法与类"></a>方法与类</h3><p>那创建方法呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; String addMark(Word word) &#123;<br>   ...&gt; <span class="hljs-built_in">return</span> word.val + <span class="hljs-string">&quot;!&quot;</span>;<br>   ...&gt; &#125;<br>|  created method addMark(Word), however, it cannot be referenced until class Word is declared<br></code></pre></td></tr></table></figure><p>这里方法传入了一个不存在的类，他告诉我们要定义这个类才能使用这个方法，那定义一下吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>jshell&gt; class Word &#123;<br>   ...&gt; String val;<br>   ...&gt; public <span class="hljs-function"><span class="hljs-title">Word</span></span>() &#123;<br>   ...&gt; val = <span class="hljs-string">&quot;hello word&quot;</span>;<br>   ...&gt; &#125;<br>   ...&gt; &#125;<br>|  created class Word<br>|    update replaced method addMark(Word)<br></code></pre></td></tr></table></figure><p>创建个对象调用一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>jshell&gt; Word words = new Word()<br>words ==&gt; Word@2ef1e4fa<br>|  created variable words : Word<br><br>jshell&gt; addMark(words)<br><span class="hljs-variable">$4</span> ==&gt; <span class="hljs-string">&quot;hello word!&quot;</span><br>|  created scratch variable <span class="hljs-variable">$4</span> : String<br></code></pre></td></tr></table></figure><h3 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h3><p>输入 <code>/help</code> 就能看到所有可以使用的命令，例如列出所有变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>jshell&gt; /vars<br>|    Word words = Word@2ef1e4fa<br>|    String <span class="hljs-variable">$4</span> = <span class="hljs-string">&quot;hello word!&quot;</span><br></code></pre></td></tr></table></figure><h2 id="外部编辑器"><a href="#外部编辑器" class="headerlink" title="外部编辑器"></a>外部编辑器</h2><p>有没有觉得在命令行定义类或者方法啥的太费事了，其实 JShell 支持使用编辑器</p><h3 id="使用默认编辑器"><a href="#使用默认编辑器" class="headerlink" title="使用默认编辑器"></a>使用默认编辑器</h3><p>先定义一个类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; class Friend&#123;&#125;<br>|  已创建 类 Friend<br></code></pre></td></tr></table></figure><p>调用自带的编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; /edit Friend<br></code></pre></td></tr></table></figure><p>如下图，点击 Accept 就行</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210223013703.png" alt="img"></p><p>注意一定是之前定义好的片段，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; /list<br><br>   1 : int a = 1;<br>   2 : int b = 2;<br>   3 : int c = 1;<br>   6 : class Friend&#123;<br>       String val = <span class="hljs-string">&quot;No Friend !!!&quot;</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><p>否则会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; /edit Dog<br>|  没有此类片段: Dog<br></code></pre></td></tr></table></figure><h3 id="自定义编辑器"><a href="#自定义编辑器" class="headerlink" title="自定义编辑器"></a>自定义编辑器</h3><p>如果想自定义编辑器呢，自带的太不好用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; /<span class="hljs-built_in">set</span> editor vim<br>|  编辑器设置为: vim<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; /<span class="hljs-built_in">set</span> editor <span class="hljs-string">&quot;C:\\Users\\cedar\\AppData\\Local\\Programs\\Microsoft VS Code\\code&quot;</span> -w<br>|  编辑器设置为: C:\Users\cedar\AppData\Local\Programs\Microsoft VS Code\code -w<br></code></pre></td></tr></table></figure><p>该 <code>-w</code> 选项设置等待文件关闭后再返回</p><p>上述设置是一次性的，想永久设置的话，使用 <code>-retain</code> 选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jshell&gt; /<span class="hljs-built_in">set</span> editor -retain vim<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 配置主从复制与高可用</title>
    <link href="/2021/02/17/Redis%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <url>/2021/02/17/Redis%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis-配置主从复制与高可用"><a href="#Redis-配置主从复制与高可用" class="headerlink" title="Redis 配置主从复制与高可用"></a>Redis 配置主从复制与高可用</h2><p><a href="https://solidspoon.xyz/2021/02/17/Win10DockerRedis%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/">前文</a>搭建了 Redis 的主从复制，主从复制的一大好处就是可以实现高可用，那就试试吧</p><h2 id="搭建主从复制环境"><a href="#搭建主从复制环境" class="headerlink" title="搭建主从复制环境"></a>搭建主从复制环境</h2><p>这里复习一下如何搭建主从复制，启动三个 Docker，第一个当作主节点，剩下的当作从节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -dit --name redis1 -p 6381:6379 -p 16381:16381 redis <br>docker run -dit --name redis2 -p 6382:6379 -p 16382:16382 redis <br>docker run -dit --name redis3 -p 6383:6379 -p 16383:16383 redis <br></code></pre></td></tr></table></figure><p>查看 Docker IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  docker inspect -f <span class="hljs-string">&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;.NetworkSettings.IPAddress &#125;&#125;&#x27;</span> $(docker ps -aq)<br>/redis3 - 172.17.0.4<br>/redis2 - 172.17.0.3<br>/redis1 - 172.17.0.2<br></code></pre></td></tr></table></figure><p>在两个从分别执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; REPLICAOF 172.17.0.2 6379<br>OK<br><br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment">## Replication</span><br>role:slave<br>master_host:172.17.0.2<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:1<br>master_sync_in_progress:0<br>slave_repl_offset:392<br>slave_priority:100<br>slave_read_only:1<br>connected_slaves:0<br>master_replid:4cfa8280f14d9085063811cd368b00f393217c23<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:392<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:57<br>repl_backlog_histlen:336<br></code></pre></td></tr></table></figure><p>主节点可看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication<br><span class="hljs-comment">## Replication</span><br>role:master<br>connected_slaves:2<br>slave0:ip=172.17.0.3,port=6379,state=online,offset=574,lag=1<br>slave1:ip=172.17.0.4,port=6379,state=online,offset=574,lag=1<br>master_replid:4cfa8280f14d9085063811cd368b00f393217c23<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:574<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:574<br></code></pre></td></tr></table></figure><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>Redis 的高可用是通过 Sentinel 实现的，它可以做到监控主从节点的在线状态，并做主从切换（基于 raft 协议）。</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217142122.jpeg" alt="Sentin.jpg"><br>这次我们将这三个 Sentinel 分别放在三个 Redis 上</p><p>配置 Sentinel 需要一个 sentinel.conf 文件，内容如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali">port 16381<br>daemonize no<br>pidfile /var/run/redis-sentinel.pid<br>logfile <span class="hljs-string">&quot;&quot;</span><br>dir /tmp<br>sentinel<span class="hljs-built_in"> monitor </span>mymaster 172.17.0.2 6379 2<br>sentinel down-after-milliseconds mymaster 10000<br>sentinel failover-timeout mymaster 30000<br>sentinel parallel-syncs mymaster 1<br></code></pre></td></tr></table></figure><p>然后将这个文件拷贝到 Docker 中并运行，注意文件位置别写错了：</p><p>下面是运行第一个节点的命令，剩下两个节点类似，修改一下容器名称就行。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker cp sentinel.conf redis1:<span class="hljs-regexp">/etc/</span>sentinel.conf<br>docker exec -ti redis1 redis-sentinel <span class="hljs-regexp">/etc/</span>sentinel.conf<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>如果想验证的话，登录主节点 Docker 的 bash，可以通过下面方法模拟主节点宕机，然后观察 Sentinel 的反应，或者在剩下两个节点上运行 <code>info replication</code> 看看是不是有一个切换成 master 了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost 6379]<span class="hljs-comment"># ps -ef | grep redis </span><br>root      15382  13771  0 17:34 pts/3    00:00:00 redis-cli<br>root      15496      1  0 17:38 ?        00:00:00 redis-server 0.0.0.0:6379<br>root      15588  14748  0 17:43 pts/1    00:00:00 grep --color=auto redis<br>[root@localhost 6379]<span class="hljs-comment"># kill -9 15496</span><br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://hub.docker.com/_/redis?tab=description&page=1&ordering=last_updated">Docker Official Images</a></li><li><a href="https://blog.csdn.net/huanghuitan/article/details/108044983">六、Redis 主从复制 Replicaof、哨兵 Sentinel</a></li><li><a href="https://juejin.cn/post/6844903984294002701">redis cluster集群模式原理</a></li><li><a href="https://blog.csdn.net/baidu_27627251/article/details/112143714">Windows下部署redis主从、哨兵（sentinel）、集群（cluster）</a></li><li><a href="https://github.com/Johar77/JAVA-000/tree/main/Week_12">配置 redis 的主从复制，sentinel 高可用，Cluster 集群</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在 Win 10 Docker 上搭建 Redis 主从复制</title>
    <link href="/2021/02/17/Win10DockerRedis%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2021/02/17/Win10DockerRedis%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="在-Win-10-Docker-上搭建-Redis-主从复制"><a href="#在-Win-10-Docker-上搭建-Redis-主从复制" class="headerlink" title="在 Win 10 Docker 上搭建 Redis 主从复制"></a>在 Win 10 Docker 上搭建 Redis 主从复制</h2><p>前面介绍了 MySQL 可以主从复制，Rdies 当然也可以，而且是极简风格，只需要一个命令 <code>replicaof</code>，如果你对 Docker 的操作不熟悉的话，可以看看下面的详细步骤</p><h2 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a>启动节点</h2><p>使用 Docker 创建三个 redis 节点</p><h3 id="启动主节点"><a href="#启动主节点" class="headerlink" title="启动主节点"></a>启动主节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br>docker run -itd --name redis-6379  -p 6379:6379 redis --appendonly yes --protected-mode no<br>docker <span class="hljs-built_in">exec</span> -it redis-6379 /bin/bash<br><span class="hljs-variable">$redis</span>-cli<br></code></pre></td></tr></table></figure><h3 id="启动从节点-1"><a href="#启动从节点-1" class="headerlink" title="启动从节点 1"></a>启动从节点 1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br>docker run -itd --name redis-6380  -p 6380:6379 redis --appendonly yes --protected-mode no<br>docker <span class="hljs-built_in">exec</span> -it redis-6380 /bin/bash<br><span class="hljs-variable">$redis</span>-cli<br>replicaof 172.19.16.1 6379<br></code></pre></td></tr></table></figure><h3 id="启动从节点-2"><a href="#启动从节点-2" class="headerlink" title="启动从节点 2"></a>启动从节点 2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br>docker run -itd --name redis-6381  -p 6381:6379 redis --appendonly yes --protected-mode no<br>docker <span class="hljs-built_in">exec</span> -it redis-6381 /bin/bash<br><span class="hljs-variable">$redis</span>-cli<br>replicaof 172.19.16.1 6379<br></code></pre></td></tr></table></figure><h2 id="搭建主从复制"><a href="#搭建主从复制" class="headerlink" title="搭建主从复制"></a>搭建主从复制</h2><p>哪个是主节点哪个是从节点这就随意了，你可以像这样：</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217140517.png" alt="image-20210217140516944"></p><p>或者像这样</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217140549.png" alt="image-20210217140549695"></p><p>把下面的命令简单修改一下就行</p><blockquote><p>tip：Redis5.0之前，主从配置命令使用 <code>slaveof</code></p></blockquote><h3 id="查看-IP-地址"><a href="#查看-IP-地址" class="headerlink" title="查看 IP 地址"></a>查看 IP 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect -f <span class="hljs-string">&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;.NetworkSettings.IPAddress &#125;&#125;&#x27;</span> $(docker ps -aq)<br></code></pre></td></tr></table></figure><p>更多查看 IP 的命令请看这篇文章</p><blockquote><p><a href="https://solidspoon.xyz/2021/02/16/%E6%9F%A5%E7%9C%8BDockerIP%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/">查看 Docker IP 的几种方法</a></p></blockquote><p>记住主节点 IP</p><h3 id="从节点-1"><a href="#从节点-1" class="headerlink" title="从节点 1"></a>从节点 1</h3><p>填主节点 IP 与 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">replicaof  172.17.0.2 6379<br></code></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">info replication<br>---<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment">## Replication</span><br>role:slave<br>master_host:172.17.0.2<br>master_port:6379<br>master_link_status:up<br></code></pre></td></tr></table></figure><h3 id="从节点-2"><a href="#从节点-2" class="headerlink" title="从节点 2"></a>从节点 2</h3><p>填主节点 IP 与 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">replicaof  172.17.0.2 6379<br></code></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">info replication<br>---<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-comment">## Replication</span><br>role:slave<br>master_host:172.17.0.2<br>master_port:6379<br>master_link_status:up<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>主节点设置 aa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; keys *<br>(empty array)<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> aa bb<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;aa&quot;</span><br></code></pre></td></tr></table></figure><p>从节点查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;aa&quot;</span><br>127.0.0.1:6379&gt;  get aa<br><span class="hljs-string">&quot;bb&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 下为 Git 设置代理</title>
    <link href="/2021/02/17/Windows%E4%B8%8B%E4%B8%BAGit%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2021/02/17/Windows%E4%B8%8B%E4%B8%BAGit%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Windows-下为-Git-设置代理"><a href="#Windows-下为-Git-设置代理" class="headerlink" title="Windows 下为 Git 设置代理"></a>Windows 下为 Git 设置代理</h2><p>命令行上 GitHub 真是龟速，偶尔体验一下国内的 Gitee 就感觉爽爆了，还是快给 Git 整个代理吧！<br>Git 支持两种协议，SSH 和 HTTPS，配置的方式不一样，这两种方式平时都得用，下面分别介绍一下<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217132147.png" alt="image.png"></p><h2 id="设置-SSH-代理"><a href="#设置-SSH-代理" class="headerlink" title="设置 SSH 代理"></a>设置 SSH 代理</h2><p>打开用户目录下 <code>.ssh</code> 文件夹，也就是 <code>C:\Users\&lt;用户名&gt;\.ssh</code>  ，在这个目录下新建一个叫做 config 的文件，注意没有后缀名，内容如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">## -S表示通过 sock5 协议连接</span><br><span class="hljs-comment">## 按照情况修改代理地址</span><br>ProxyCommand connect.exe -S <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7890</span> %h %p<br><br>Host github.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  Port <span class="hljs-number">22</span><br>  Hostname github.com<br>  <span class="hljs-comment"># 注意将用户名替换成自己的</span><br>  IdentityFile <span class="hljs-string">&quot;C:\Users\&lt;用户名&gt;\.ssh\id_rsa&quot;</span><br>  TCPKeepAlive yes<br>  IdentitiesOnly yes<br><br>Host ssh.github.com<br>  <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>  Port <span class="hljs-number">443</span><br>  Hostname ssh.github.com<br>  <span class="hljs-comment"># 注意将用户名替换成自己的</span><br>  IdentityFile <span class="hljs-string">&quot;C:\Users\&lt;用户名&gt;\.ssh\id_rsa&quot;</span><br>  TCPKeepAlive yes<br>  IdentitiesOnly yes<br></code></pre></td></tr></table></figure><h3 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Cloning</span> into &#x27;solidSpoon.github.io&#x27;...<br><span class="hljs-attribute">remote</span>: Enumerating objects: <span class="hljs-number">91</span>, done.<br><span class="hljs-attribute">remote</span>: Counting objects: <span class="hljs-number">100</span>% (<span class="hljs-number">91</span>/<span class="hljs-number">91</span>), done.<br><span class="hljs-attribute">remote</span>: Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">40</span>/<span class="hljs-number">40</span>), done.<br><span class="hljs-attribute">remote</span>: Total <span class="hljs-number">1532</span> (delta <span class="hljs-number">40</span>), reused <span class="hljs-number">77</span> (delta <span class="hljs-number">26</span>), pack-reused <span class="hljs-number">1441</span> eceiving objects:  <span class="hljs-number">99</span>% (<span class="hljs-number">1517</span>/<span class="hljs-number">1532</span>), <span class="hljs-number">39</span>.<span class="hljs-number">85</span> MiB | <span class="hljs-number">2</span>.<span class="hljs-number">16</span> MiB/<br><span class="hljs-attribute">Receiving</span> objects: <span class="hljs-number">100</span>% (<span class="hljs-number">1532</span>/<span class="hljs-number">1532</span>), <span class="hljs-number">41</span>.<span class="hljs-number">13</span> MiB | <span class="hljs-number">1</span>.<span class="hljs-number">78</span> MiB/s, done.<br><span class="hljs-attribute">Resolving</span> deltas: <span class="hljs-number">100</span>% (<span class="hljs-number">593</span>/<span class="hljs-number">593</span>), done.<br></code></pre></td></tr></table></figure><p>嗯，有效果</p><h2 id="设置-http-https-代理"><a href="#设置-http-https-代理" class="headerlink" title="设置 http/https 代理"></a>设置 http/https 代理</h2><p>命令如下，也有可能不用加单引号，自己试试吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:7890&#x27;</span><br>git config --global https.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:7890&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="取消-http-https-代理"><a href="#取消-http-https-代理" class="headerlink" title="取消 http/https 代理"></a>取消 http/https 代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure><hr><p>参考资料：</p><ul><li><a href="https://upupming.site/2019/05/09/git-ssh-socks-proxy/">https://upupming.site/2019/05/09/git-ssh-socks-proxy/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置 WSL2 使用 Windows 代理上网</title>
    <link href="/2021/02/17/%E9%85%8D%E7%BD%AEWSL2%E4%BD%BF%E7%94%A8Windows%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/"/>
    <url>/2021/02/17/%E9%85%8D%E7%BD%AEWSL2%E4%BD%BF%E7%94%A8Windows%E4%BB%A3%E7%90%86%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h2 id="WSL-2-配置代理"><a href="#WSL-2-配置代理" class="headerlink" title="WSL 2 配置代理"></a>WSL 2 配置代理</h2><p>在 Windows 上设置好代理，连上了谷歌开开心心，但是 WSL 2 不能共享 Windows 的代理策略，如果在 WSL 上再装一个代理软件那可太麻烦了，所以得想想办法。</p><p>其实办法还挺简单的，可能有的同学不知道，在一个局域网下如果有一台机器配置好了代理，那么这个代理是可以共享给这个局域网下的其他设备的，比较类似软路由哈！</p><p>具体方法如下：</p><h2 id="Windows-端"><a href="#Windows-端" class="headerlink" title="Windows 端"></a>Windows 端</h2><p>这里以 Clash 为例，打开 Allow LAN 选项，如下图所示。如果你使用其他软件，那可能是叫「网关模式」、「允许来自局域网的链接」或者其它的什么，都是一个东西，打开就好了，注意打开这个选项后你的电脑就可以代理整个局域网内的机器了，虽然其他的机器还需要额外的配置，但也还是注意安全。</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217014320.png" alt="image.png"><br>对于 Clash 来说，这个选项是一次性的，下次开机它就关了，不过可以在配置文件里改，通常文件的开头就是。如下图，改成 true 就行。<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217014312.png" alt="image.png"><br>开启这个选项后，仔细找找，你会找到一个 IP 地址和一个端口号，IP 其实就是本机 IP 啦，这两个数一会有用。 </p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210217014306.png" alt="image.png"><br>Clash 这个端口 http 和 socks 通用 </p><p>注意如果后文配置后没有效果，那可能是 Windows  防火墙的锅，快去配置防火墙放行 Clash</p><h2 id="WSL-2-端"><a href="#WSL-2-端" class="headerlink" title="WSL 2 端"></a>WSL 2 端</h2><p>说是 WSL 2，其实其他的手机电脑都能连上，就在网络设置或者 WiFi 设置那有个配置代理，把上面得到的 IP 和端口填上就行。</p><p>下面就说说在 WSL 2 下怎么操作吧！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 获取主机 IP</span><br><span class="hljs-comment">## 主机 IP 保存在 /etc/resolv.conf 中</span><br><span class="hljs-built_in">export</span> hostip=$(cat /etc/resolv.conf |grep -oP <span class="hljs-string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>Q: 以上似乎会定位到默认网关 <code>192.168.3.1</code><br>A: 切换到 WSL2 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;hostip&#125;</span>:7890&quot;</span>;<br><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://<span class="hljs-variable">$&#123;hostip&#125;</span>:7890&quot;</span>;<br></code></pre></td></tr></table></figure><p>注意修改成你的端口</p><p>如果是 socket5 协议的话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;socks5://<span class="hljs-variable">$&#123;hostip&#125;</span>:7890&quot;</span><br><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;socks5://<span class="hljs-variable">$&#123;hostip&#125;</span>:7890&quot;</span><br></code></pre></td></tr></table></figure><p>如果端口一样就可以合并成一句话，http 的同理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> all_proxy=<span class="hljs-string">&quot;socks5://<span class="hljs-variable">$&#123;hostip&#125;</span>:7890&quot;</span><br></code></pre></td></tr></table></figure><p>使用 <code>curl</code> 即可验证是否代理成功，如下有返回值说明成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~cedar curl google.com<br>&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=<span class="hljs-string">&quot;content-type&quot;</span> content=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;<br>&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;<br>&lt;H1&gt;301 Moved&lt;/H1&gt;<br>The document has moved<br>&lt;A HREF=<span class="hljs-string">&quot;http://www.google.com/&quot;</span>&gt;here&lt;/A&gt;.<br>&lt;/BODY&gt;&lt;/HTML&gt;<br></code></pre></td></tr></table></figure><p>可以将上面命令选择你需要的添加到 <code>.bashrc</code> ，这样会让代理一直开启。<br>使用 zsh 应该保存到  <code>~/.zshrc</code></p><p>更新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p>或者添加如下，需要代理的时候输入 <code>setss</code> 即可设置代理，取消代理就 <code>unsetss</code> ，或者新开一个窗口。<br>下面第二条的长命令你好像得根据情况删掉一部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> hostip=$(cat /etc/resolv.conf |grep -oP <span class="hljs-string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)<br><span class="hljs-built_in">alias</span> setss=<span class="hljs-string">&#x27;export https_proxy=&quot;http://$&#123;hostip&#125;:7890&quot;;export http_proxy=&quot;http://$&#123;hostip&#125;:7890&quot;;export all_proxy=&quot;socks5://$&#123;hostip&#125;:7890&quot;;&#x27;</span><br><span class="hljs-built_in">alias</span> unsetss=<span class="hljs-string">&#x27;unset all_proxy&#x27;</span><br></code></pre></td></tr></table></figure><p>如下是我在 <code>~/.zshrc</code> 中添加的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> hostip=$(cat /etc/resolv.conf |grep -oP <span class="hljs-string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)<br><span class="hljs-built_in">alias</span> setss=<span class="hljs-string">&#x27;export all_proxy=&quot;socks5://$&#123;hostip&#125;:7890&quot;;&#x27;</span><br><span class="hljs-built_in">alias</span> unsetss=<span class="hljs-string">&#x27;unset all_proxy&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~cedar setss<br>➜  ~cedar curl google.com<br>&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv=<span class="hljs-string">&quot;content-type&quot;</span> content=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;<br>&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;<br>&lt;H1&gt;301 Moved&lt;/H1&gt;<br>The document has moved<br>&lt;A HREF=<span class="hljs-string">&quot;http://www.google.com/&quot;</span>&gt;here&lt;/A&gt;.<br>&lt;/BODY&gt;&lt;/HTML&gt;<br>➜  ~cedar unsetss<br>➜  ~cedar curl google.com<br>curl: (28) Failed to connect to google.com port 80: Connection timed out<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看 Docker IP 的几种方法</title>
    <link href="/2021/02/16/%E6%9F%A5%E7%9C%8BDockerIP%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2021/02/16/%E6%9F%A5%E7%9C%8BDockerIP%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>使用 Docker 时常常需要知道某一容器的 IP，这是个挺烦人的事儿，本文介绍几种查看 Docker IP 的方法</p><h3 id="在容器内部查看"><a href="#在容器内部查看" class="headerlink" title="在容器内部查看"></a>在容器内部查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat /etc/hosts<br></code></pre></td></tr></table></figure><p>会显示自己以及 <code>–link</code> 软连接的容器 IP</p><h3 id="使用-docker-inspect-命令"><a href="#使用-docker-inspect-命令" class="headerlink" title="使用 docker inspect 命令"></a>使用 docker inspect 命令</h3><p><code>inspect</code> 会列出容器详细信息</p><p>下面的命令任选其一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect --format <span class="hljs-string">&#x27;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#x27;</span> &lt;container-ID&gt;<br></code></pre></td></tr></table></figure><p>上面这个我在 Win10-WSL2-Docker 上用不了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect &lt;container id&gt;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">docker inspect -f &#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range</span> .NetworkSettings.Networks&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.IPAddress</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><span class="xml">&#x27; container_name_or_id</span><br></code></pre></td></tr></table></figure><h3 id="在-bashrc-中写一个-bash-函数"><a href="#在-bashrc-中写一个-bash-函数" class="headerlink" title="在 ~/.bashrc 中写一个 bash 函数"></a>在 ~/.bashrc 中写一个 bash 函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">docker_ip</span></span>() &#123;<br>    sudo docker inspect --format <span class="hljs-string">&#x27;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&#x27;</span> <span class="hljs-variable">$1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>source ~/.bashrc</code> 然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker_ip &lt;container-ID&gt;<br></code></pre></td></tr></table></figure><h3 id="显示所有容器名称及其-IP-地址"><a href="#显示所有容器名称及其-IP-地址" class="headerlink" title="显示所有容器名称及其 IP 地址"></a>显示所有容器名称及其 IP 地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect -f <span class="hljs-string">&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;.NetworkSettings.IPAddress &#125;&#125;&#x27;</span> $(docker ps -aq)<br></code></pre></td></tr></table></figure><p>如果使用 docker-compose 命令将是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect -f <span class="hljs-string">&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> $(docker ps -aq)<br></code></pre></td></tr></table></figure><h3 id="显示所有容器-IP-地址"><a href="#显示所有容器-IP-地址" class="headerlink" title="显示所有容器 IP 地址"></a>显示所有容器 IP 地址</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">docker inspect --format=&#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.Name</span>&#125;&#125;</span><span class="xml"> - </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">range</span> .NetworkSettings.Networks&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.IPAddress</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">end</span>&#125;&#125;</span><span class="xml">&#x27; $(docker ps -aq)</span><br></code></pre></td></tr></table></figure><hr><ul><li><a href="https://blog.csdn.net/sannerlittle/article/details/77063800">https://blog.csdn.net/sannerlittle/article/details/77063800</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教你在 Windows 10 Docker 上搭建 Kafka  集群</title>
    <link href="/2021/02/16/Windows10KafkaDocker%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/02/16/Windows10KafkaDocker%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Kafka 是一款比较优秀的消息队列，简单介绍如下：</p><blockquote><p>Kafka 是一种分布式的，基于发布 / 订阅的消息系统。该消息系统是由 LinkedIn 于 2011 年设计开发，用作 LinkedIn 的活动流（Activity Stream）和运营数据处理管道（Pipeline）的基础。</p></blockquote><p>本文介绍如何在 Windows 10 Docker 上搭建 Kafka 集群</p><h2 id="运行-ZooKeeper"><a href="#运行-ZooKeeper" class="headerlink" title="运行 ZooKeeper"></a>运行 ZooKeeper</h2><p>Kafka 使用 ZK 保存状态</p><p>运行如下命令启动 ZK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -dit --name zk -p 2181:2181 zookeeper<br></code></pre></td></tr></table></figure><p>注意有时候这个端口回被其他的应用占用，如果占用的话可以换一个</p><p>附上重启方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart zk<br></code></pre></td></tr></table></figure><p>如下命令查看日志，也可以在 Docker Desktop 客户端中查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs -f zk<br></code></pre></td></tr></table></figure><h2 id="运行-Kafka"><a href="#运行-Kafka" class="headerlink" title="运行 Kafka"></a>运行 Kafka</h2><p>运行三个 Kafka ，注意替换你的宿主机 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -dit --name kafka0 -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=&lt;你的宿主机 IP&gt;:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://&lt;你的宿主机 IP&gt;:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka<br>docker run -dit --name kafka1 -p 9093:9093 -e KAFKA_BROKER_ID=1 -e KAFKA_ZOOKEEPER_CONNECT=&lt;你的宿主机 IP&gt;:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://&lt;你的宿主机 IP&gt;:9093 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093 -t wurstmeister/kafka<br>docker run -dit --name kafka2 -p 9094:9094 -e KAFKA_BROKER_ID=2 -e KAFKA_ZOOKEEPER_CONNECT=&lt;你的宿主机 IP&gt;:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://&lt;你的宿主机 IP&gt;:9094 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9094 -t wurstmeister/kafka<br></code></pre></td></tr></table></figure><p>附上重启方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart kafka0<br>docker restart kafka1<br>docker restart kafka2<br></code></pre></td></tr></table></figure><p>如下命令查看日志，也可以在 Docker Desktop 客户端中查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs -f kafka0<br>docker logs -f kafka1<br>docker logs -f kafka2<br></code></pre></td></tr></table></figure><p>附上删除命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rm -f kafka0<br>docker rm -f kafka1<br>docker rm -f kafka2<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试建立 3 Replica 和 5 Partition 的 Topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -ti kafka0 kafka-topics.sh --create --zookeeper &lt;你的宿主机 IP&gt;:2181 --replication-factor 3 --partitions 5 --topic TestTopic<br></code></pre></td></tr></table></figure><p>查看是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -ti kafka0 kafka-topics.sh --describe --zookeeper &lt;你的宿主机 IP&gt;:2181 --topic TestTopic<br>docker <span class="hljs-built_in">exec</span> -ti kafka1 kafka-topics.sh --describe --zookeeper &lt;你的宿主机 IP&gt;:2181 --topic TestTopic<br>docker <span class="hljs-built_in">exec</span> -ti kafka2 kafka-topics.sh --describe --zookeeper &lt;你的宿主机 IP&gt;:2181 --topic TestTopic<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~cedar docker <span class="hljs-built_in">exec</span> -ti kafka0 kafka-topics.sh --describe --zookeeper 172.29.192.247:22181 --topic TestTopic<br>Topic: TestTopic        PartitionCount: 5       ReplicationFactor: 3    Configs:<br>        Topic: TestTopic        Partition: 0    Leader: 2       Replicas: 2,1,0 Isr: 2,1,0<br>        Topic: TestTopic        Partition: 1    Leader: 0       Replicas: 0,2,1 Isr: 0,2,1<br>        Topic: TestTopic        Partition: 2    Leader: 1       Replicas: 1,0,2 Isr: 1,0,2<br>        Topic: TestTopic        Partition: 3    Leader: 2       Replicas: 2,0,1 Isr: 2,0,1<br>        Topic: TestTopic        Partition: 4    Leader: 0       Replicas: 0,1,2 Isr: 0,1,2<br>➜  ~cedar docker <span class="hljs-built_in">exec</span> -ti kafka1 kafka-topics.sh --describe --zookeeper 172.29.192.247:22181 --topic TestTopic<br>Topic: TestTopic        PartitionCount: 5       ReplicationFactor: 3    Configs:<br>        Topic: TestTopic        Partition: 0    Leader: 2       Replicas: 2,1,0 Isr: 2,1,0<br>        Topic: TestTopic        Partition: 1    Leader: 0       Replicas: 0,2,1 Isr: 0,2,1<br>        Topic: TestTopic        Partition: 2    Leader: 1       Replicas: 1,0,2 Isr: 1,0,2<br>        Topic: TestTopic        Partition: 3    Leader: 2       Replicas: 2,0,1 Isr: 2,0,1<br>        Topic: TestTopic        Partition: 4    Leader: 0       Replicas: 0,1,2 Isr: 0,1,2<br>➜  ~cedar docker <span class="hljs-built_in">exec</span> -ti kafka2 kafka-topics.sh --describe --zookeeper 172.29.192.247:22181 --topic TestTopic<br>Topic: TestTopic        PartitionCount: 5       ReplicationFactor: 3    Configs:<br>        Topic: TestTopic        Partition: 0    Leader: 2       Replicas: 2,1,0 Isr: 2,1,0<br>        Topic: TestTopic        Partition: 1    Leader: 0       Replicas: 0,2,1 Isr: 0,2,1<br>        Topic: TestTopic        Partition: 2    Leader: 1       Replicas: 1,0,2 Isr: 1,0,2<br>        Topic: TestTopic        Partition: 3    Leader: 2       Replicas: 2,0,1 Isr: 2,0,1<br>        Topic: TestTopic        Partition: 4    Leader: 0       Replicas: 0,1,2 Isr: 0,1,2<br></code></pre></td></tr></table></figure><p>然后在 kafka1 和 kafka2 上启动消费者，kafka0 生产消息</p><p>启动后在 kafka0 的终端随便输入内容，可以看到 kafka1 和 kafka2 的终端接收到了该消息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -ti kafka1 kafka-console-consumer.sh --bootstrap-server &lt;你的宿主机 IP&gt;:9093 --topic TestTopic --from-beginning<br>docker <span class="hljs-built_in">exec</span> -ti kafka2 kafka-console-consumer.sh --bootstrap-server &lt;你的宿主机 IP&gt;:9094 --topic TestTopic --from-beginning<br>docker <span class="hljs-built_in">exec</span> -ti kafka0 kafka-console-producer.sh --broker-list &lt;你的宿主机 IP&gt;:9092 --topic TestTopic<br></code></pre></td></tr></table></figure><p>性能测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -ti kafka0 kafka-producer-perf-test.sh --topic TestTopic --num-records 100000 --record-size 1000 --throughput 2000 --producer-props bootstrap.servers=&lt;你的宿主机 IP&gt;:9092<br>docker <span class="hljs-built_in">exec</span> -ti kafka0 kafka-consumer-perf-test.sh --bootstrap-server &lt;你的宿主机 IP&gt;:9092 --topic TestTopic --fetch-size 1048576 --messages 100000 --threads 1<br></code></pre></td></tr></table></figure><h2 id="Cluster-Manager-for-Apache-Kafka"><a href="#Cluster-Manager-for-Apache-Kafka" class="headerlink" title="Cluster Manager for Apache Kafka"></a>Cluster Manager for Apache Kafka</h2><p>这是一个管理 Kafka 的图形界面，下面是它的 GitHub</p><blockquote><p><a href="https://github.com/yahoo/CMAK">https://github.com/yahoo/CMAK</a></p></blockquote><p>可以使用 Docker 启动该软件，然后访问 <a href="http://localhost:9000/">http://localhost:9000/</a>，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -dit -p 9000:9000 -e ZK_HOSTS=<span class="hljs-string">&quot;&lt;你的宿主机 IP&gt;:2181&quot;</span> hlebalbau/kafka-manager:stable<br></code></pre></td></tr></table></figure><p>按照下图方式添加配置，然后就可以使用了</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210216234835.png" alt="image.png"></p><hr><p>参考链接：</p><ul><li><a href="https://blog.csdn.net/noaman_wgs/article/details/103757791">【Kafka精进系列003】Docker环境下搭建Kafka集群</a></li><li><a href="https://blog.csdn.net/belalds/article/details/80575751">kafka如何彻底删除topic及数据</a></li><li><a href="https://blog.csdn.net/qq_34834325/article/details/78743490">Kafka集群搭建（使用kafka自带的zookeeper）</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>消息队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 网络设置</title>
    <link href="/2021/02/16/Docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"/>
    <url>/2021/02/16/Docker%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>这里列出 Docker 配置网络的常用命令</p><blockquote><ul><li>docker network create</li><li>docker network connect</li><li>docker network ls</li><li>docker network rm</li><li>docker network disconnect</li><li>docker network inspect</li></ul></blockquote><p>列出所有网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network ls<br></code></pre></td></tr></table></figure><p>创建网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create &lt;my-net&gt;<br></code></pre></td></tr></table></figure><p>查看网络信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network inspect &lt;my-net&gt;<br></code></pre></td></tr></table></figure><p>查看容器的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network inspect &lt;my-docker-name&gt;<br></code></pre></td></tr></table></figure><p>将一个容器连接到网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network connect &lt;my-net&gt; &lt;my-docker-name&gt;<br></code></pre></td></tr></table></figure><p>创建容器时就指定网络，以 busybox 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --rm --name busybox1 --network &lt;my-net&gt; busybox sh<br></code></pre></td></tr></table></figure><p>给容器在指定网络中起一个别名，网络中的容器可以通过别名访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --net &lt;my-net&gt; -itd --name &lt;my-docker-name&gt; --net-alias &lt;alias-name&gt; busybox<br></code></pre></td></tr></table></figure><p>多个容器起一个别名时第一个起的有效，第一个下线后第二个有效</p><p>将容器从网络断开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network disconnect &lt;my-net&gt; &lt;my-docker-name&gt;<br></code></pre></td></tr></table></figure><p>删除创建的网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network rm &lt;my-net&gt;<br></code></pre></td></tr></table></figure><p>需要保证该网络没有容器链接</p><hr><p>参考链接</p><ul><li><a href="https://blog.csdn.net/gezhonglei2007/article/details/51627821">https://blog.csdn.net/gezhonglei2007/article/details/51627821</a></li><li><a href="https://www.cnkirito.moe/docker-network-bridge/">https://www.cnkirito.moe/docker-network-bridge/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 诊断神器 BusyBox</title>
    <link href="/2021/02/16/Docker%E8%AF%8A%E6%96%AD%E7%A5%9E%E5%99%A8BusyBox/"/>
    <url>/2021/02/16/Docker%E8%AF%8A%E6%96%AD%E7%A5%9E%E5%99%A8BusyBox/</url>
    
    <content type="html"><![CDATA[<blockquote><p>BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、telnet 、ping、ifconfig 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。</p></blockquote><p>BusyBox 容器镜像可以帮助我们快速测试容器网络</p><p>直接运行并进入命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name &lt;my-docker-name&gt; -it --rm busybox sh<br></code></pre></td></tr></table></figure><p><code>--rm</code> 参数可以让我们在退出容器时自动销毁该容器</p><p>创建时指定网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --rm --name &lt;my-docker-name&gt; --network &lt;my-net&gt; busybox sh<br></code></pre></td></tr></table></figure><p>将一个容器连接到网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network connect &lt;my-net&gt; &lt;my-docker-name&gt;<br></code></pre></td></tr></table></figure><p>将容器从网络断开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network disconnect &lt;my-net&gt; &lt;my-docker-name&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 手动将主库的数据导入从库</title>
    <link href="/2021/02/16/MySQL%E6%89%8B%E5%8A%A8%E5%B0%86%E4%B8%BB%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%BB%8E%E5%BA%93/"/>
    <url>/2021/02/16/MySQL%E6%89%8B%E5%8A%A8%E5%B0%86%E4%B8%BB%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E4%BB%8E%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>运行环境：Windows 10 Docker Desktop WSL 2 based engine</p></blockquote><h2 id="搭建演示环境"><a href="#搭建演示环境" class="headerlink" title="搭建演示环境"></a>搭建演示环境</h2><h3 id="主库"><a href="#主库" class="headerlink" title="主库"></a>主库</h3><p>拉取 MySQL 8.0 版本镜像并启动，监听在 3306 端口，设置 root 用户密码为 root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name mysql -p 3316:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_ROOT_HOST=% -d mysql:latest<br></code></pre></td></tr></table></figure><p>为了演示，首先在主库插入一些数据，用到下面的 SQL 语句</p><ul><li><a href="https://github.com/solidSpoon/CodeSnippet/blob/main/InitDB/InitSchema.sql">初始化数据库表</a></li><li><a href="https://github.com/solidSpoon/CodeSnippet/blob/main/InitDB/InsertData.sql">在这个表中插入数据</a></li></ul><h3 id="从库"><a href="#从库" class="headerlink" title="从库"></a>从库</h3><p>运行一个新的 MySQL 8.0，名字叫做 mysql_bk1 作为从库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name mysql_bk1 -p 3309:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_ROOT_HOST=% -d mysql:latest<br></code></pre></td></tr></table></figure><h2 id="数据导入导出"><a href="#数据导入导出" class="headerlink" title="数据导入导出"></a>数据导入导出</h2><p>首先确保主库的数据不再变化</p><p>进入准备好的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir backup<br><span class="hljs-built_in">cd</span> backup<br></code></pre></td></tr></table></figure><p>将主库的数据备份到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> mysql-master /usr/bin/mysqldump -u root --password=admin123 <span class="hljs-built_in">test</span> &gt; backup.sql<br></code></pre></td></tr></table></figure><p>进入从库，建立数据库 test</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -ti mysql_bk1 mysql -u root -p<br>create database <span class="hljs-built_in">test</span>;<br></code></pre></td></tr></table></figure><p>Ctrl-D 退出，执行下面的命令导入数据到新开的 MySQL 中，这个需要花费好几分钟，请耐心等待；</p><p>当然也可以 <code>docker cp backup.sql</code> 文件到容器中，然后连上数据库使用 <code>source backup.sql</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat backup.sql | docker <span class="hljs-built_in">exec</span> -i mysql_bk1 /usr/bin/mysql -u root --password=root <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>完成</p>]]></content>
    
    
    <categories>
      
      <category>MySQL 主从复制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10 - MySQL 8 Zip 版 - 搭建主从复制</title>
    <link href="/2021/02/16/Win10-MySQL8Zip%E7%89%88-%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2021/02/16/Win10-MySQL8Zip%E7%89%88-%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Win10-MySQL-8-压缩版-主从复制"><a href="#Win10-MySQL-8-压缩版-主从复制" class="headerlink" title="Win10 - MySQL 8 压缩版 - 主从复制"></a>Win10 - MySQL 8 压缩版 - 主从复制</h2><blockquote><p>配置环境：Windows 10 - MySQL 压缩版 </p></blockquote><h2 id="准备两个-MySQL-服务实例"><a href="#准备两个-MySQL-服务实例" class="headerlink" title="准备两个 MySQL 服务实例"></a>准备两个 MySQL 服务实例</h2><p>8.0 压缩版下载地址：</p><blockquote><p><a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-winx64.zip">https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-winx64.zip</a></p></blockquote><p>解压后再复制一份，假设命名为 <code>mysql-8.0.16-winx64</code> 和 <code>mysql-8.0.16-winx64-2</code></p><h2 id="修改主-MySQL-8的-my-ini"><a href="#修改主-MySQL-8的-my-ini" class="headerlink" title="修改主 MySQL-8的 my.ini"></a>修改主 MySQL-8的 <code>my.ini</code></h2><p>在 <code>mysql-8.0.16-winx64</code> 目录下添加 my.ini 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">mysqld</span>]<br><span class="hljs-string">basedir</span> <span class="hljs-string">=</span> <span class="hljs-string">./</span><br><span class="hljs-string">datadir</span> <span class="hljs-string">=</span> <span class="hljs-string">./data</span><br><span class="hljs-string">port</span> <span class="hljs-string">=</span> <span class="hljs-number">3306</span><br><span class="hljs-string">server_id</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><br><br><span class="hljs-string">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span> <br><span class="hljs-string">log_bin=mysql-bin</span><br><span class="hljs-string">binlog-format=Row</span><br></code></pre></td></tr></table></figure><h2 id="修改从-MySQL-8的-my-ini"><a href="#修改从-MySQL-8的-my-ini" class="headerlink" title="修改从 MySQL-8的 my.ini"></a>修改从 MySQL-8的 <code>my.ini</code></h2><p>在从 <code>mysql-8.0.16-winx64-2</code> 目录下添加 my.ini 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">mysqld</span>]<br><span class="hljs-string">basedir</span> <span class="hljs-string">=</span> <span class="hljs-string">./</span><br><span class="hljs-string">datadir</span> <span class="hljs-string">=</span> <span class="hljs-string">./data</span><br><span class="hljs-string">port</span> <span class="hljs-string">=</span> <span class="hljs-number">3316</span><br><span class="hljs-string">server_id</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><br><br><span class="hljs-string">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span> <br><span class="hljs-string">log_bin=mysql-bin</span><br><span class="hljs-string">binlog-format=Row</span><br></code></pre></td></tr></table></figure><h2 id="初始化和启动数据库"><a href="#初始化和启动数据库" class="headerlink" title="初始化和启动数据库"></a>初始化和启动数据库</h2><p>空数据库需要初始化，分别在两个数据库的 <code>\bin</code> 目录下执行 <code>mysqld --initialize-insecure</code> 进行初始化。</p><p>分别启动主和从，在两个数据库的 <code>\bin</code> 目录下直接执行 <code>mysqld</code> 或 <code>start mysqld</code> 命令即可。</p><h2 id="配置主节点"><a href="#配置主节点" class="headerlink" title="配置主节点"></a>配置主节点</h2><p>用 <code>mysql</code> 命令登录到主节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -P3306<br></code></pre></td></tr></table></figure><p>进入后执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; CREATE USER <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span>;<br>Query OK, 0 rows affected (0.11 sec)<br><br>mysql&gt; GRANT REPLICATION SLAVE ON *.* TO <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, 0 rows affected (0.12 sec)<br><br>mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.10 sec)<br><br>mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000003 |      305 |              |                  |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>创建数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">create schema db;<br></code></pre></td></tr></table></figure><h3 id="主节点证书文件"><a href="#主节点证书文件" class="headerlink" title="主节点证书文件"></a>主节点证书文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SHOW GLOBAL VARIABLES LIKE <span class="hljs-string">&#x27;caching_sha2_password_public_key_path&#x27;</span>;<br>+---------------------------------------+----------------+<br>| Variable_name                         | Value          |<br>+---------------------------------------+----------------+<br>| caching_sha2_password_public_key_path | public_key.pem |<br>+---------------------------------------+----------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>这个文件在初始化之后位于 <code>\bin\data</code> 下</p><p>因为 MySQL 8 默认是用 <code>caching_sha2_password</code> 做认证插件，这点与 MySQL 5 不同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">error connecting to master <span class="hljs-string">&#x27;repl@localhost:3306&#x27;</span> - retry-time: 60 retries: 18 message: Authentication plugin <span class="hljs-string">&#x27;caching_sha2_password&#x27;</span> reported error: Authentication requires secure connection.<br></code></pre></td></tr></table></figure><p>这个文件就是基于默认设置 <code>caching_sha2_password</code> 下的通讯公钥文件。默认情况服务器不会给客户端发送，所以需要拷贝到从节点的目录下。</p><p>如果不想拷贝的话 ：<br>MySQL 8.0 的版本要在<strong>从数据库</strong>初始设置（CHANGE MASTER TO）加：<br><code>MASTER_PUBLIC_KEY_PATH = &#39;key_file_name&#39;</code><br>或者<br><code>GET_MASTER_PUBLIC_KEY = &#123;0|1&#125;</code></p><h2 id="配置从节点"><a href="#配置从节点" class="headerlink" title="配置从节点"></a>配置从节点</h2><p>把刚才的 <code>public_key.pem</code> 文件改名为 <code>master_public_key.pem</code> 然后拷贝到从服务器的 <code>\bin\data</code> 文件夹中，注意这个文件夹用上面的那个命令初始化之后才有。</p><p><code>mysql</code> 命令登录到从节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -P3316<br></code></pre></td></tr></table></figure><p>还记得刚刚在主库查看的表格吗？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000003 |      305 |              |                  |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>注意以下的 MASTER_LOG_POS 需要改成这个表格上 Position 的数值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">CHANGE MASTER TO<br>    MASTER_HOST=<span class="hljs-string">&#x27;localhost&#x27;</span>,  <br>    MASTER_PORT = 3306,<br>    MASTER_USER=<span class="hljs-string">&#x27;repl&#x27;</span>,      <br>    MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,   <br>    MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-bin.000002&#x27;</span>,<br>    MASTER_LOG_POS=855,<br>    MASTER_PUBLIC_KEY_PATH=<span class="hljs-string">&#x27;master_public_key.pem&#x27;</span>;<br>    <br>    //MASTER_AUTO_POSITION = 1;<br></code></pre></td></tr></table></figure><p>这里有个问题，MySQL 8 下面不需要创建 db 。否则会报错说已经存在 db 。<br>–创建数据库：create schema db;–</p><p>直接开始执行同步<br><code>start/stop slave;</code></p><h2 id="验证操作"><a href="#验证操作" class="headerlink" title="验证操作"></a>验证操作</h2><h3 id="主库"><a href="#主库" class="headerlink" title="主库"></a>主库</h3><p>在主库执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use db<br>Database changed<br>mysql&gt; create table t1(id int);<br>Query OK, 0 rows affected (0.17 sec)<br><br>mysql&gt;<br>mysql&gt;<br>mysql&gt; insert into t1(id) values(1),(2);<br>Query OK, 2 rows affected (0.04 sec)<br></code></pre></td></tr></table></figure><h3 id="从库"><a href="#从库" class="headerlink" title="从库"></a>从库</h3><p>在从库查看数据同步情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use db<br>Database changed<br>mysql&gt;<br>mysql&gt;<br>mysql&gt; show tables;<br>+--------------+<br>| Tables_in_db |<br>+--------------+<br>| t1           |<br>+--------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt;<br>mysql&gt;<br>mysql&gt; select * from t1;<br>+------+<br>| id   |<br>+------+<br>|    1 |<br>|    2 |<br>+------+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h2><p>可以通过 <code>show master status\G</code>，<code>show slave status\G</code> 查看状态，或定位一些问题</p><p>可以能改过 <code>stop slave;</code>  <code>start slave;</code> 来停止复制。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL 主从复制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10 - MySQL 8 Zip 版 - 搭建基于 GTID 的主从复制</title>
    <link href="/2021/02/16/Win10-MySQL8Zip%E7%89%88-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGTID%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2021/02/16/Win10-MySQL8Zip%E7%89%88-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGTID%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>配置环境：Windows 10 - MySQL 压缩版 </p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GTID 是干嘛的？</p><blockquote><p>GTID (Global Transaction IDentifier) 是全局事务标识。它具有全局唯一性，一个事务对应一个GTID。唯一性不仅限于主服务器，GTID在所有的从服务器上也是唯一的。一个GTID在一个服务器上只执行一次，从而避免重复执行导致数据混乱或主从不一致。</p><p>在传统的复制里面，当发生故障需要主从切换时，服务器需要找到binlog和pos点，然后将其设定为新的主节点开启复制。相对来说比较麻烦，也容易出错。在MySQL 5.6里面，MySQL会通过内部机制自动匹配GTID断点，不再寻找binlog和pos点。我们只需要知道主节点的ip，端口，以及账号密码就可以自动复制。<br><a href="http://mysql.taobao.org/monthly/2020/05/09/">http://mysql.taobao.org/monthly/2020/05/09/</a></p></blockquote><p>在传统的主从复制中，我们需要在从库中指定主库的 Log 文件与 Position ，在基于 DTID 的主从复制中，不需要这一步骤。</p><h2 id="准备两个-MySQL-服务实例"><a href="#准备两个-MySQL-服务实例" class="headerlink" title="准备两个 MySQL 服务实例"></a>准备两个 MySQL 服务实例</h2><p>8.0 压缩版下载地址：</p><blockquote><p><a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-winx64.zip">https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.16-winx64.zip</a></p></blockquote><p>解压后再复制一份，假设命名为 <code>mysql-8.0.16-winx64</code> 和 <code>mysql-8.0.16-winx64-2</code></p><h2 id="修改主-MySQL-8的-my-ini"><a href="#修改主-MySQL-8的-my-ini" class="headerlink" title="修改主 MySQL-8的 my.ini"></a>修改主 MySQL-8的 <code>my.ini</code></h2><p>在 <code>mysql-8.0.16-winx64</code> 目录下添加 my.ini 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">mysqld</span>]<br><span class="hljs-string">basedir</span> <span class="hljs-string">=</span> <span class="hljs-string">./</span><br><span class="hljs-string">datadir</span> <span class="hljs-string">=</span> <span class="hljs-string">./data</span><br><span class="hljs-string">port</span> <span class="hljs-string">=</span> <span class="hljs-number">3306</span><br><span class="hljs-string">server_id</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><br><br><span class="hljs-string">gtid_mode=ON</span><br><span class="hljs-string">enforce-gtid-consistency</span><br><span class="hljs-string">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span> <br><span class="hljs-string">log_bin=mysql-bin</span><br><span class="hljs-string">binlog-format=Row</span><br><br></code></pre></td></tr></table></figure><h2 id="修改从-MySQL-8的-my-ini"><a href="#修改从-MySQL-8的-my-ini" class="headerlink" title="修改从 MySQL-8的 my.ini"></a>修改从 MySQL-8的 <code>my.ini</code></h2><p>在从 <code>mysql-8.0.16-winx64-2</code> 目录下添加 my.ini 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">mysqld</span>]<br><span class="hljs-string">basedir</span> <span class="hljs-string">=</span> <span class="hljs-string">./</span><br><span class="hljs-string">datadir</span> <span class="hljs-string">=</span> <span class="hljs-string">./data</span><br><span class="hljs-string">port</span> <span class="hljs-string">=</span> <span class="hljs-number">3316</span><br><span class="hljs-string">server_id</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><br><br><span class="hljs-string">gtid_mode=ON</span><br><span class="hljs-string">enforce-gtid-consistency</span><br><span class="hljs-string">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span> <br><span class="hljs-string">log_bin=mysql-bin</span><br><span class="hljs-string">binlog-format=Row</span><br></code></pre></td></tr></table></figure><h2 id="初始化和启动数据库"><a href="#初始化和启动数据库" class="headerlink" title="初始化和启动数据库"></a>初始化和启动数据库</h2><p>空数据库需要初始化，分别在两个数据库的 <code>\bin</code> 目录下执行 <code>mysqld --initialize-insecure</code> 进行初始化。</p><p>分别启动主和从，在两个数据库的 <code>\bin</code> 目录下直接执行 <code>mysqld</code> 或 <code>start mysqld</code> 命令即可。</p><h2 id="配置主节点"><a href="#配置主节点" class="headerlink" title="配置主节点"></a>配置主节点</h2><p>用 <code>mysql</code> 命令登录到主节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -P3306<br></code></pre></td></tr></table></figure><p>进入后执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; CREATE USER <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span>;<br>Query OK, 0 rows affected (0.11 sec)<br><br>mysql&gt; GRANT REPLICATION SLAVE ON *.* TO <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, 0 rows affected (0.12 sec)<br><br>mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.10 sec)<br></code></pre></td></tr></table></figure><p>创建数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">create schema db;<br></code></pre></td></tr></table></figure><h3 id="主节点证书文件"><a href="#主节点证书文件" class="headerlink" title="主节点证书文件"></a>主节点证书文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SHOW GLOBAL VARIABLES LIKE <span class="hljs-string">&#x27;caching_sha2_password_public_key_path&#x27;</span>;<br>+---------------------------------------+----------------+<br>| Variable_name                         | Value          |<br>+---------------------------------------+----------------+<br>| caching_sha2_password_public_key_path | public_key.pem |<br>+---------------------------------------+----------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>这个文件在初始化后位于 <code>\bin\data</code> 下</p><p>因为 MySQL 8 默认是用 <code>caching_sha2_password</code> 做认证插件，这点与 MySQL 5 不同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">error connecting to master <span class="hljs-string">&#x27;repl@localhost:3306&#x27;</span> - retry-time: 60 retries: 18 message: Authentication plugin <span class="hljs-string">&#x27;caching_sha2_password&#x27;</span> reported error: Authentication requires secure connection.<br></code></pre></td></tr></table></figure><p>这个文件就是基于默认设置 <code>caching_sha2_password</code> 下的通讯公钥文件。默认情况服务器不会给客户端发送，所以需要拷贝到从节点的目录下。</p><p>如果不想拷贝的话 ：</p><p>MySQL 8.0 的版本要在<strong>从数据库</strong>初始设置（CHANGE MASTER TO）加：</p><p><code>MASTER_PUBLIC_KEY_PATH = &#39;key_file_name&#39;</code></p><p>或者</p><p><code>GET_MASTER_PUBLIC_KEY = &#123;0|1&#125;</code></p><h2 id="配置从节点"><a href="#配置从节点" class="headerlink" title="配置从节点"></a>配置从节点</h2><p>把刚才的 <code>public_key.pem</code> 文件改名为 <code>master_public_key.pem</code> 然后拷贝到从服务器的 <code>\bin\data</code> 文件夹中，这个文件夹在用上面的命令初始化之后才有。</p><p><code>mysql</code> 命令登录到从节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -P3316<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">CHANGE MASTER TO<br>    MASTER_HOST=<span class="hljs-string">&#x27;localhost&#x27;</span>,  <br>    MASTER_PORT = 3306,<br>    MASTER_USER=<span class="hljs-string">&#x27;repl&#x27;</span>,      <br>    MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,   <br>    MASTER_PUBLIC_KEY_PATH=<span class="hljs-string">&#x27;master_public_key.pem&#x27;</span>,<br>    MASTER_AUTO_POSITION = 1;<br></code></pre></td></tr></table></figure><p>这里有个问题，MySQL 8 下面不需要创建 db 。否则会报错说已经存在 db 。<br>–创建数据库：create schema db;–</p><p>直接开始执行同步<br><code>start/stop slave;</code></p><h2 id="验证操作"><a href="#验证操作" class="headerlink" title="验证操作"></a>验证操作</h2><h3 id="主库"><a href="#主库" class="headerlink" title="主库"></a>主库</h3><p>在主库执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use db<br>Database changed<br>mysql&gt; create table t1(id int);<br>Query OK, 0 rows affected (0.17 sec)<br><br>mysql&gt;<br>mysql&gt;<br>mysql&gt; insert into t1(id) values(1),(2);<br>Query OK, 2 rows affected (0.04 sec)<br></code></pre></td></tr></table></figure><h3 id="从库"><a href="#从库" class="headerlink" title="从库"></a>从库</h3><p>在从库查看数据同步情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use db<br>Database changed<br>mysql&gt;<br>mysql&gt;<br>mysql&gt; show tables;<br>+--------------+<br>| Tables_in_db |<br>+--------------+<br>| t1           |<br>+--------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt;<br>mysql&gt;<br>mysql&gt; select * from t1;<br>+------+<br>| id   |<br>+------+<br>|    1 |<br>|    2 |<br>+------+<br>2 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h2><p>可以通过 <code>show master status\G</code>，<code>show slave status\G</code> 查看状态，或定位一些问题</p><p>可以能改过 <code>stop slave;</code>  <code>start slave;</code> 来停止复制。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL 主从复制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 8.0 搭建半同步复制</title>
    <link href="/2021/02/16/MySQL8-0%E6%90%AD%E5%BB%BA%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6/"/>
    <url>/2021/02/16/MySQL8-0%E6%90%AD%E5%BB%BA%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>说明：搭建半同步复制需要预先有基本的主从复制环境，具体可以看我之前的文章：</p><blockquote><p><a href="https://github.com/solidSpoon/solidSpoon.github.io/wiki">https://github.com/solidSpoon/solidSpoon.github.io/wiki</a></p></blockquote><p>半同步超时的时候，会自动降为异步工作。当Slave开启半同步后，或者当主从之间网络延迟恢复正常的时候，半同步复制会自动从异步复制又转为半同步复制，还是相当智能的。</p><h2 id="Master-配置"><a href="#Master-配置" class="headerlink" title="Master 配置"></a>Master 配置</h2><p>安装半同步模块并启动</p><p>这里 Windows 版本有个坑</p><p>对于 Linux 来说：此模块位置在 <code>/usr/local/mysql/lib/plugin/semisync_master.so</code><br>对于 Windows Zip 版本来说：插件的位置本来在 <code>..\lib\semisync_master.dll</code> ，但是 MySQL 默认的位置是 <code>\bin\lib\plugin\semisync_master.so</code> </p><p>要解决这个问题，我们把 lib 目录复制一份过去就好了。</p><p>也可以在配置文件中指定插件目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>plugin_dir=/path/to/plugin/directory<br></code></pre></td></tr></table></figure><p>如果 <a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/server-system-variables.html#sysvar_plugin_dir">plugin_dir</a> 的值是相对路径名，则将其视为相对于 MySQL 基本目录（ <a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/server-system-variables.html#sysvar_basedir">basedir</a> 系统变量的值）。</p><p>下面是安装模块的命令：</p><p>Linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; install plugin rpl_semi_sync_master soname <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>;<br></code></pre></td></tr></table></figure><p>Windows：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; install plugin rpl_semi_sync_master soname <span class="hljs-string">&#x27;semisync_master.dll&#x27;</span>;<br></code></pre></td></tr></table></figure><p>安装完后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show global variables like <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show global variables like <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br>+-------------------------------------------+------------+<br>| Variable_name                             | Value      |<br>+-------------------------------------------+------------+<br>| rpl_semi_sync_master_enabled              | OFF        | -&gt; 是否启用半同步协议<br>| rpl_semi_sync_master_timeout              | 10000      | -&gt; 链接 Slave 超时时间<br>| rpl_semi_sync_master_trace_level          | 32         |<br>| rpl_semi_sync_master_wait_for_slave_count | 1          |<br>| rpl_semi_sync_master_wait_no_slave        | ON         |<br>| rpl_semi_sync_master_wait_point           | AFTER_SYNC | -&gt; MySQL 5.7 之后默认值<br>+-------------------------------------------+------------+<br>6 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>, 1 warning (0.02 sec)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; <span class="hljs-built_in">set</span> global rpl_semi_sync_master_enabled = 1;<br>mysql&gt; <span class="hljs-built_in">set</span> global rpl_semi_sync_master_timeout = 2000;<br></code></pre></td></tr></table></figure><p>安装后启动和定制主从连接错误的超时时间默认是 10s 可改为 2s，一旦有一次超时自动降级为异步。（以上内容要想永久有效需要写到配置文件中）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat /etc/my.cnf</span><br>[mysqld]<br>rpl_semi_sync_master_enabled = 1;<br>rpl_semi_sync_master_timeout = 2000;<br></code></pre></td></tr></table></figure><h2 id="Slave-配置"><a href="#Slave-配置" class="headerlink" title="Slave 配置"></a>Slave 配置</h2><p>1）安装半同步模块并启动</p><p>Linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; install plugin rpl_semi_sync_slave soname <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span>;<br></code></pre></td></tr></table></figure><p>WIndows：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; install plugin rpl_semi_sync_slave soname <span class="hljs-string">&#x27;semisync_slave.dll&#x27;</span>;<br></code></pre></td></tr></table></figure><p>同样，如果报错就把插件目录移动一下</p><p><code>lib</code> -&gt; <code>bin\lib</code></p><p>接着执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; <span class="hljs-built_in">set</span> global rpl_semi_sync_slave_enabled = 1;<br>mysql&gt; show global variables like <span class="hljs-string">&#x27;%semi%&#x27;</span>;<br>+-------------------------------------------+------------+<br>| Variable_name                             | Value      |<br>+-------------------------------------------+------------+<br>| rpl_semi_sync_master_enabled              | ON         |<br>| rpl_semi_sync_master_timeout              | 10000      |<br>| rpl_semi_sync_master_trace_level          | 32         |<br>| rpl_semi_sync_master_wait_for_slave_count | 1          |<br>| rpl_semi_sync_master_wait_no_slave        | ON         |<br>| rpl_semi_sync_master_wait_point           | AFTER_SYNC |<br>| rpl_semi_sync_slave_enabled               | ON         |<br>| rpl_semi_sync_slave_trace_level           | 32         |<br>+-------------------------------------------+------------+<br>8 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>2）从节点需要重新连接主服务器半同步才会生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; stop slave io_thread;<br>mysql&gt; start slave io_thread;<br></code></pre></td></tr></table></figure><p>PS：如果想卸载异步模块就使用 uninstall 即可。</p><p>Master 上查看是否启用了半同步</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210203214530.png"></p><p>现在半同步已经正常工作了，主要看 <code>Rpl_semi_sync_master_clients</code> 是否不为 0，<code>Rpl_semi_sync_master_status</code> 是否为 ON。如果 <code>Rpl_semi_sync_master_status</code> 为 OFF，说明出现了网络延迟或 Slave IO 线程延迟。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>半同步超时，是否会自动降为异步工作</p><h3 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h3><h2 id="关闭半同步"><a href="#关闭半同步" class="headerlink" title="关闭半同步;"></a>关闭半同步;</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; <span class="hljs-built_in">set</span> global rpl_semi_sync_slave_enabled = 0 ;<br>mysql&gt; stop slave io_thread;<br>mysql&gt; start slave io_thread;<br></code></pre></td></tr></table></figure><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; insert into t1(id) values(5),(4);<br>Query OK, 2 rows affected (10.06 sec)<br>mysql&gt; insert into t1(id) values(6),(7);<br>Query OK, 2 rows affected (0.03 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL 主从复制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10 - MySQL 8.0 - Docker 搭建主从复制</title>
    <link href="/2021/02/16/Win10-MySQL8-0-Docker%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2021/02/16/Win10-MySQL8-0-Docker%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>搭建环境：Windows 10 Docker Desktop WSL 2 based engine</p></blockquote><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>首先创建两个数据库，一个作为主库，另一个作为从库</p><h3 id="编写-docker-conpose-文件"><a href="#编写-docker-conpose-文件" class="headerlink" title="编写 docker-conpose 文件"></a>编写 docker-conpose 文件</h3><p>一般安装了 docker 都会安装 docker-compose，可以使用 <code>docker-compose -verison</code> 查看是否安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~ docker-compose -verison<br>docker-compose version 1.27.4, build 40524192<br></code></pre></td></tr></table></figure><p>新建一个文件夹「mysqlms」用于存放本次搭建的文件<br>在 「mysqlms」 文件夹新建 dokcer-compose 文件，文件名为 「docker-compose.yaml」</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span> <br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">byfn:</span>                                       <span class="hljs-comment">#配置byfn网络</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">master:</span>                                     <span class="hljs-comment">#配置master服务</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;mysql:latest&#x27;</span>                        <span class="hljs-comment">#使用刚才pull下来的镜像</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-master</span>              <span class="hljs-comment">#容器起名 mysql-master</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">admin123</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">admin123</span>           <span class="hljs-comment">#配置root的密码</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3316:3306&#x27;</span>                           <span class="hljs-comment">#配置端口映射</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./master/my.cnf:/etc/mysql/my.cnf&quot;</span>   <span class="hljs-comment">#配置my.cnf文件挂载，</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./master/mysql-files:/var/lib/mysql-files&quot;</span> <span class="hljs-comment">#MySQL 8.0 不加这一行会报错</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">byfn</span>                                  <span class="hljs-comment">#配置当前servie挂载的网络</span><br>  <span class="hljs-attr">slave:</span>                                      <span class="hljs-comment">#配置slave服务</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;mysql:latest&#x27;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-slave</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">admin123</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">admin123</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3326:3306&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./slave/my.cnf:/etc/mysql/my.cnf&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./master/mysql-files:/var/lib/mysql-files&quot;</span> <span class="hljs-comment">#MySQL 8.0 不加这一行会报错</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">byfn</span><br></code></pre></td></tr></table></figure><p><code>- &quot;./master/mysql-files:/var/lib/mysql-files&quot;</code> 这一行的目的详见下面链接</p><blockquote><p><a href="https://github.com/docker-library/mysql/issues/541">https://github.com/docker-library/mysql/issues/541</a></p></blockquote><p>如果想明确指定 MySQL 版本，如： <code>image: &#39;mysql:8&#39;</code></p><h3 id="编写-cnf-文件"><a href="#编写-cnf-文件" class="headerlink" title="编写 cnf 文件"></a>编写 cnf 文件</h3><p>在 「mysqlms」新建两个文件夹 「master」 和 「slave」，在其中分别写入文件「my.cnf」</p><ul><li>mysqlms/master/my.cnf 内容如下：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">log-bin</span>=/var/lib/mysql/mysql-bin<br></code></pre></td></tr></table></figure><ul><li>mysqlms/slave/my.cnf 内容如下</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>在「mysqlms」目录下执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose -f docker-compose.yaml up -d<br></code></pre></td></tr></table></figure><p>此时两个主从数据库创建成功</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>启动之后进入 master 容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql-master /bin/bash<br>mysql -uroot -padmin123<br></code></pre></td></tr></table></figure><p>此时进入了 MySql 终端，创建用于主从复制的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">create user <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified with <span class="hljs-string">&#x27;mysql_native_password&#x27;</span> by <span class="hljs-string">&#x27;admin123&#x27;</span>;<br>GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>; <br></code></pre></td></tr></table></figure><p>这里有一个需要注意的地方，应该是 MySQL 5.0 与 MySQL 8.0 的一个验证身份的比较大的区别：</p><p>MySql 8.0 默认指定使用需要 SSL 的身份验证插件 「caching_sha2_password」，意味着我们从库必须使用安全链接来连接到主库才可以，否则从库链接的时候会报错，错误代码为 2061，因此这里选择绕过这个插件，改为使用「mysql_native_password」来验证。有机会可以尝试以下使用安全连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">flush privileges;<br>show master status;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show master status;<br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000003 |      767 |              |                  |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>需要记住 File 名字，和 Position 偏移位置</p><h3 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h3><p>在另一个终端进入 slave  容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql-slave /bin/bash<br>mysql -uroot -padmin123<br></code></pre></td></tr></table></figure><p>进入 MySQL 终端之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class="hljs-string">&#x27;mysql-master&#x27;</span>, MASTER_PORT=3306,  MASTER_USER=<span class="hljs-string">&#x27;repl&#x27;</span>, MASTER_PASSWORD=<span class="hljs-string">&#x27;admin123&#x27;</span>, MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-bin.000003&#x27;</span>, MASTER_LOG_POS=767;<br>mysql&gt; start slave;<br></code></pre></td></tr></table></figure><p>这里两个参数 <code>MASTER_LOG_FILE</code> 和 <code>MASTER_LOG_POS</code> 就是前面 master 上最后查询出来的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show slave status\G<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting <span class="hljs-keyword">for</span> master to send event<br>                  Master_Host: mysql-master<br>                  Master_User: repl<br>                  Master_Port: 3306<br>                Connect_Retry: 60<br>              Master_Log_File: mysql-bin.000003<br>          Read_Master_Log_Pos: 1116<br>               Relay_Log_File: eefecaed2964-relay-bin.000002<br>                Relay_Log_Pos: 320<br>        Relay_Master_Log_File: mysql-bin.000003<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB:<br>          Replicate_Ignore_DB:<br>           Replicate_Do_Table<br>......<br></code></pre></td></tr></table></figure><p>可以从中看到一些信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">       Slave_IO_Running: Yes<br>      Slave_SQL_Running: Yes<br>Slave_SQL_Running_State: Slave has <span class="hljs-built_in">read</span> all relay <span class="hljs-built_in">log</span>; waiting <span class="hljs-keyword">for</span> more updates<br></code></pre></td></tr></table></figure><p>可见主从配置成功</p><hr><p>参考链接</p><ul><li><a href="https://blog.csdn.net/wawa8899/article/details/86689618">https://blog.csdn.net/wawa8899/article/details/86689618</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/replication-howto-repuser.html">https://dev.mysql.com/doc/refman/8.0/en/replication-howto-repuser.html</a></li><li><a href="https://github.com/docker-library/mysql/issues/541">https://github.com/docker-library/mysql/issues/541</a></li><li><a href="https://blog.csdn.net/wangxiaotongfan/article/details/81870258">https://blog.csdn.net/wangxiaotongfan/article/details/81870258</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL 主从复制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10 - MySQL 5.7 - Docker 搭建主从复制</title>
    <link href="/2021/02/16/Win10-MySQL5-7-Docker%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2021/02/16/Win10-MySQL5-7-Docker%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>搭建环境：Windows 10 Docker Desktop WSL 2 based engine</p></blockquote><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>首先创建两个数据库，一个作为主库，另一个作为从库</p><h3 id="编写-docker-conpose-文件"><a href="#编写-docker-conpose-文件" class="headerlink" title="编写 docker-conpose 文件"></a>编写 docker-conpose 文件</h3><p>首先安装 docker，docker-compose<br>一般安装了 docker 都会安装 docker-compose，可以使用 <code>docker-compose -verison</code> 查看是否安装</p><p><code>docker pull mysql:5.7</code> 拉取 mysql5.7 镜像</p><p>编写 docker-compose 文件「docker-compose.yaml」</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span> <br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">byfn:</span>                                       <span class="hljs-comment">#配置byfn网络</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">master:</span>                                     <span class="hljs-comment">#配置master服务</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;mysql:5.7&#x27;</span>                        <span class="hljs-comment">#使用刚才pull下来的镜像</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-master</span>              <span class="hljs-comment">#容器起名 mysql-master</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">admin123</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">admin123</span>           <span class="hljs-comment">#配置root的密码</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3316:3306&#x27;</span>                           <span class="hljs-comment">#配置端口映射</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./master/my.cnf:/etc/mysql/my.cnf&quot;</span>   <span class="hljs-comment">#配置my.cnf文件挂载，</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">byfn</span>                                  <span class="hljs-comment">#配置当前servie挂载的网络</span><br>  <span class="hljs-attr">slave:</span>                                      <span class="hljs-comment">#配置slave服务</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;mysql:5.7&#x27;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-slave</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">admin123</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">admin123</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;3326:3306&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./slave/my.cnf:/etc/mysql/my.cnf&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">byfn</span><br></code></pre></td></tr></table></figure><h3 id="编写-cnf-文件"><a href="#编写-cnf-文件" class="headerlink" title="编写 cnf 文件"></a>编写 cnf 文件</h3><p>在 <code>docker-compose.yaml</code> 当前目录下，建立两个文件夹，master 和 slave，里面分别写入文件「my.cnf」</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">mater/my.cnf</span><br><br>[<span class="hljs-string">mysqld</span>]<br><span class="hljs-string">server-id=1</span><br><span class="hljs-string">log-bin=/var/lib/mysql/mysql-bin</span><br><br><span class="hljs-string">slave/my.cnf</span><br><br><br>[<span class="hljs-string">mysqld</span>]<br><span class="hljs-string">server-id=2</span><br></code></pre></td></tr></table></figure><p>分别保存后退出</p><p>然后在当前 docker-compose.yaml 文件目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -f docker-compse.yaml up -d<br></code></pre></td></tr></table></figure><p>此时两个数据库创建成功</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>启动之后进入 master 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mysql-master /bin/bash<br>mysql -uroot -padmin123<br>进入 mysql 终端之后<br><span class="hljs-meta">mysql&gt;</span><span class="bash"> create user <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;admin123&#x27;</span>;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="hljs-string">&#x27;repl&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;</span> <br><span class="hljs-meta">mysql&gt;</span><span class="bash"> flush privileges;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> show master status;</span><br></code></pre></td></tr></table></figure><p>最后的 <code>show master status;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> show master status;</span><br>+------------------+----------+--------------+------------------+-------------------+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+------------------+----------+--------------+------------------+-------------------+<br>| mysql-bin.000003 |      767 |              |                  |                   |<br>+------------------+----------+--------------+------------------+-------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>需要记住 File 名字，和 Position 偏移位置</p><h3 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h3><p>另起一个终端进入 slave 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mysql-slave /bin/bash<br>mysql -uroot -padmin123<br>进入 mysql 终端之后<br><span class="hljs-meta">mysql&gt;</span><span class="bash"> CHANGE MASTER TO MASTER_HOST=<span class="hljs-string">&#x27;mysql-master&#x27;</span>, MASTER_PORT=3306,  MASTER_USER=<span class="hljs-string">&#x27;repl&#x27;</span>, MASTER_PASSWORD=<span class="hljs-string">&#x27;admin123&#x27;</span>, MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-bin.000003&#x27;</span>, MASTER_LOG_POS=767;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> start slave;</span><br></code></pre></td></tr></table></figure><p>这里两个参数 MASTER_LOG_FILE 和 MASTER_LOG_POS 就是前面 master 上最后查询出来的；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> show slave status\G</span><br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting for master to send event<br>                  Master_Host: mysql-master<br>                  Master_User: repl<br>                  Master_Port: 3306<br>                Connect_Retry: 60<br>              Master_Log_File: mysql-bin.000003<br>          Read_Master_Log_Pos: 1116<br>               Relay_Log_File: eefecaed2964-relay-bin.000002<br>                Relay_Log_Pos: 320<br>        Relay_Master_Log_File: mysql-bin.000003<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB:<br>          Replicate_Ignore_DB:<br>           Replicate_Do_Table:<br></code></pre></td></tr></table></figure><p>查询 slave 的状态，看到 Slave_IO_Running 和 Slave_SQL_Running 都是 yes 即为同步成功</p><p>可以登录 master 上创建数据库，表，然后在 slave 这边查看数据是否同步</p>]]></content>
    
    
    <categories>
      
      <category>MySQL 主从复制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 主从复制简介</title>
    <link href="/2021/02/16/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/02/16/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>实现数据库主从复制是实现读写分离，提高吞吐量的好办法，下面介绍一下 MySQL 主从复制</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说到主从复制，一个最朴素的想法应该是手动将主库倒一个备份出来，然后将这个备份写入到从库中，这样便让主库和从库有了同样的数据，实现了主从复制。但不用我说，你也肯定知道，这会让主库停机，因为在整个过程中，如果主库的内容有变化，我们导出的这份备份就没用了。而且还有一点特别重要，这种操作是全量的，也就说如果之后主库的内容有变化，我们是无法及时的将变化的部分导入到从库，只能再停机，重复上面的操作，这显然不行。</p><p>要解决这个问题其实也不难，我们在每条数据上加一个时间戳，这样就能区分出哪些数据是新的，用一个程序隔一段时间去主库上把新的数据给捞出来写入从库。通过这种方法，我们确实实现了一个简单的主从复制，但这无疑会急剧增加主库的负担，因为这种方法需要频繁的到主库去执行 SQL 操作。</p><p>其实 MySQL 中已经自带了主从复制的功能，而且还不会增加主库的负担，下面就简单介绍一下 MySQL 自带的主从复制是如何工作的。</p><h2 id="MySQL-主从复制核心原理"><a href="#MySQL-主从复制核心原理" class="headerlink" title="MySQL 主从复制核心原理"></a>MySQL 主从复制核心原理</h2><p>我们都知道，MySQL 为了实现事务等 redo / undu 功能，需要将执行的每条 SQL 语句都写入日志。要想实现主从复制的功能，肯定需要一个方法获得数据库中的新数据，这样才能实现增量复制。既然直接去数据库中捞太费资源，那么可以直接从这些日志下手，因为从库去读取日志是不会影响主库的性能的，MySQL 主从复制的基本思想也是这样。</p><p>在 MySQL 中，主从复制的核心原理就是基于 log 文件：</p><ul><li>主库执行完 SQL 操作后，将其写入 binlog</li><li> 从库连接上主库后，从 binlog 中读取主库执行的操作，将其写入从库的 relay log</li><li>从库读取 relay log，将其中的操作写入从库</li></ul><p>这样，就实现了主从复制</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210216212926.png" alt="image"></p><p>从图中可以看出，从库使用了多个线程来执行同步操作</p><ul><li>dump 线程读取主库 binlog ，将其发送到从库</li><li>I/O 线程将发送过来的数据写入从库的 relay log</li><li>SQL 将 relay log 中的操作写入数据库</li></ul><p>使用 relay log 的目的是为了防止 SQL 语句执行起来太慢，导致从库跟不上主库的进度，这时如果主库宕机，会导致大量数据丢失。因此使用单独的线程先尽量把主库的 binlog 搬运过来，再让 SQL 线程慢慢执行其中的操作，可以最大程度地保证不丢数据。</p><h2 id="MySQL-主从复制分类"><a href="#MySQL-主从复制分类" class="headerlink" title="MySQL 主从复制分类"></a>MySQL 主从复制分类</h2><h3 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h3><p>异步复制基本就是刚才所说的原理，它是 MySQL 中最早出现的复制方式</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210216212933.png" alt="image"></p><p>从图中可以看出，异步复制没有提供任何确认机制，主库并不知道从库的进度，如果有网络故障发生，它不能保证数据的一致性</p><p>还有一点需要说明，在之前提到的那个不成熟的方法中，我们用在数据中放置时间戳的方式来区分哪些是新的数据，只要某条数据的时间戳比当前已经同步的时间戳更晚，那这条数据就是新数据。尽管在 MySQL 的主从复制中，读取的是 binlog，但也需要有一种方式标记哪些是新的 binlog，MySQL 提供了两种方式：</p><ul><li>一种是需要我们指定具体的 log 文件与位置</li><li>另一种是通过一种全局事务 ID -&gt; GTID 来自动找到具体位置，用起来比较方便 </li></ul><h3 id="全同步复制"><a href="#全同步复制" class="headerlink" title="全同步复制"></a>全同步复制</h3><p>其实 MySQL 并没有全同步复制的技术，我写这个只是想说，如果有一种方式让主库能在提交事务之前，确认一下所有的从库都跟上了自己的进度，不就能保证即使主库宕机，从库也不会丢失数据了吗？</p><p>这样的确能保证数据的一致性，但是如果从库往往有好几个，如果主库每次执行事务都必须得到所有的从库确认，这太慢了，那么多从库肯定有一个两个出了点网络抖动或者其他什么问题。</p><p>MySQL 实际上采用了一种折中的办法：半同步复制</p><h3 id="半同步复制"><a href="#半同步复制" class="headerlink" title="半同步复制"></a>半同步复制</h3><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210216212941.png" alt="image"></p><p>从图中可以看出，在半同步复制中，主库在执行完一个任务后，只要得到任意一个从库的回应，它就将该事务提交。可见这种方法平衡了数据一致性和速度这两个需求。</p><h3 id="组复制"><a href="#组复制" class="headerlink" title="组复制"></a>组复制</h3><p>在较新版本的 MySQL 中，还提供了一种叫做「组复制」的技术，这种技术基于一种分布式协议来保证数据一致性</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210216212951.png" alt="image"></p><p>这种技术主要是提高容错性，当组内有成员出现故障时，只要不是全部或大多数组成员（组内超过半数的成员）出现故障，则系统仍然可用。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你想动手搭建自己的 MySQL 主从复制的话，可以看看我的其他文章</p><hr><p>参考链接</p><ul><li><a href="http://www.woqutech.com/docs_info.php?id=508">http://www.woqutech.com/docs_info.php?id=508</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL 主从复制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么直观地给网页「P 图」</title>
    <link href="/2021/02/16/%E6%80%8E%E4%B9%88%E7%9B%B4%E8%A7%82%E5%9C%B0%E7%BB%99%E7%BD%91%E9%A1%B5P%E5%9B%BE/"/>
    <url>/2021/02/16/%E6%80%8E%E4%B9%88%E7%9B%B4%E8%A7%82%E5%9C%B0%E7%BB%99%E7%BD%91%E9%A1%B5P%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>你肯定知道在浏览器中按下 F12 打开开发者工具，在其中修改源代码就可以更改网页上的任意内容。那么有没有办法可以不看源码，通过「所见即所得」的方式直接在页面上修改呢</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201215204850.gif" alt="演示"></p><p>下面这两个属性可以帮助我们实现这一想法：</p><ol><li>使用 <code>contentEditable</code> 属性</li><li>使用 <code>designMode</code> 属性</li></ol><p>这两个属性用来帮助开发人员创建网页端的富文本编辑器，因此如果我们将整个网页都应用这两个属性，都可以达到可视化编辑网页的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.body.contentEditable=<span class="hljs-string">&#x27;true&#x27;</span>;<span class="hljs-built_in">document</span>.designMode=<span class="hljs-string">&#x27;on&#x27;</span>;<br></code></pre></td></tr></table></figure><p><code>designMode</code> 是 document 级别的属性</p><p><code>contentEditable</code> 是元素级别的属性</p><p>当一个 HTML 文档被切换到 designMode 时，我们就可以使用 <code>document.execCommand</code> 方法，我们可以通过这个方法对文档中的内容添加<strong>粗体</strong>、<em>斜体</em>、缩进、对某段文字添加一个链接等等。</p><p>例如，下面的代码就会给选中的文本加上链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&quot;CreateLink&quot;</span>,<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br></code></pre></td></tr></table></figure><p>使用这些方法，我们就可以很容易的用可视化的方式改网页了。当然，你肯定不想在控制台敲这么长的命令，所以找一些可以在浏览器运行脚本的软件来简化这个过程。</p><p>这儿有一个简单的示例希望可以帮助到你</p><p><a href="https://getquicker.net/sharedaction?code=f7db1234-2681-4c6a-82a4-08d83ad18965">https://getquicker.net/sharedaction?code=f7db1234-2681-4c6a-82a4-08d83ad18965</a></p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201215213916.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>删除或修改 Windows 中被占用的文件</title>
    <link href="/2021/02/16/%E5%88%A0%E9%99%A4%E6%88%96%E4%BF%AE%E6%94%B9Windows%E4%B8%AD%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <url>/2021/02/16/%E5%88%A0%E9%99%A4%E6%88%96%E4%BF%AE%E6%94%B9Windows%E4%B8%AD%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%9A%84%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>有时候我们想要在 Windows 中修改或删除一个文件，会收到一个「文件正在使用」的消息，而我们又不知道是哪个程序在使用，这时候该怎么办呢？</p><p>当某一运行中的进程持有一个资源的句柄时，我们就不能修改该资源。解决办法是结束所有对资源有句柄的进程。我们可以在「资源监视器」中找到持有该句柄的所有进程，资源监视器的打开方式如下</p><ul><li>方法 1：</li></ul><p>&lt;Win + R&gt;，运行 <code>resmon.exe</code></p><ul><li>方法 2：</li></ul><p>开始菜单 👉 所有程序 👉 Windiws 管理工具 👉 资源监视器</p><p>打开后选中就 CPU ，在「关联的句柄」中输入要释放的文件，即可找到持有该文件按句柄的所有进程，右键结束即可</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210216212626.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用正则表达式匹配 3 的倍数</title>
    <link href="/2021/02/16/%E5%A6%82%E4%BD%95%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D3%E7%9A%84%E5%80%8D%E6%95%B0/"/>
    <url>/2021/02/16/%E5%A6%82%E4%BD%95%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D3%E7%9A%84%E5%80%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="如何用正则表达式匹配-3-的倍数"><a href="#如何用正则表达式匹配-3-的倍数" class="headerlink" title="如何用正则表达式匹配 3 的倍数"></a>如何用正则表达式匹配 3 的倍数</h1><p>如何用正则表达式匹配3的倍数</p><p>最近在知乎上看到这样一个问题『如何用正则表达式匹配 3 的倍数』，原帖给出的答案非常有意思，遂研究了一番</p><p>看一个数能否被 3 整除，最直接的办法就是将这个数用 3 除一下，如果余数是 0，那么这个数就可以被3 整除。然而正则并不具有计算的功能，正则算法的实现基于<strong>有穷状态自动机</strong>（finite automaton）</p><p>以下是一个简单的示例</p><p>这正则表达式 <code>哈+嗝</code> 的自动机，该正则表达式可以匹配一连串的『哈』紧接着一个『嗝』</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140036.png"></p><p>该自动机从左到右遍历一个字符串。可以看到，自动机初始状态是 s0，当遇到一个『哈』时，其状态变为 s1。此时，如果后面的字符还是『哈』，那么该自动机的状态会不断地在 s0 和 s1 之间转换，直到遇到一个不是『哈』的字符，状态稳定在 s1。此时如果下一个字符是『嗝』，则自动机变为状态 s2，也就是说该自动机匹配到了一个指定的文本；如果是其他字符，则匹配失败，回到 s0。</p><p>我们常说一个正则表达式匹配到了文本，就是在文本中寻找一个字符串，可以让该正则表达式的自动机从起始状态转移到结束状态。如果我们要解决文章开头提出的问题，就要设计出合适的自动机。</p><h1 id="设计自动机"><a href="#设计自动机" class="headerlink" title="设计自动机"></a>设计自动机</h1><p>我们来分析一下手动计算除法的过程</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140046.png"></p><p>仔细观察上图，可以发现一个数被 3 除，余数只有 0，1，2 三种情况，此时被除数的下一位可以是 0 ~ 9 的任意一值，也即我们需要处理的范围只有 00 ~ 09，1029。</p><p>此时，我们已经有了一个自动机的雏形，它包括 A，B，C 三个状态</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140053.png"></p><p>由于我们的规则只有 00 ~ 09，1029，共 30 种，所以可以直接将这些规则添加到自动机中。这个自动机开始状态和结束状态都是 A</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140100.png"></p><p>对于前面的示例 522/3 ,在状态机中经过的路径如下，可以看到最终返回到了状态 A，表示 522 可以被 3 整除。</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140106.png"></p><h1 id="状态机转正则表达式"><a href="#状态机转正则表达式" class="headerlink" title="状态机转正则表达式"></a>状态机转正则表达式</h1><p>下面来看看如何将我们设计出的这个状态机转换为正则表达式。有一点需要注意，由于我们的状态机起始状态和终止状态都为 A，如果在开始状态什么事都不做，实际已经处于终止状态，也就是说我们的状态机可以匹配到空字符串。在下面的推导中，我将用『Ø』表示空字符串。</p><p>我们假定 A 是一个可以让状态机由终止状态转换到状态 A 的字符串，BC 类似。根据状态机可以列出如下三个方程</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span> = A[<span class="hljs-number">0369</span>] | B[<span class="hljs-number">258</span>] | C[<span class="hljs-number">147</span>] | Ø<br><span class="hljs-attribute">B</span> = A[<span class="hljs-number">147</span>] | B[<span class="hljs-number">0369</span>] | C[<span class="hljs-number">258</span>]<br><span class="hljs-attribute">C</span> = A[<span class="hljs-number">258</span>] | B[<span class="hljs-number">147</span>] | C[<span class="hljs-number">0369</span>]<br></code></pre></td></tr></table></figure><p>要从这三个方程推导出我们想要的正则表达式需要下面两个技巧</p><p><strong>技巧1</strong>：根据正则语言的特性给定如下形式的方程，和它的解，以下每个字母均代表一个正则表达式</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">   <span class="hljs-attr">L</span> = LU | V<br>解：<span class="hljs-attr">L</span> = VU*<br></code></pre></td></tr></table></figure><p>我们将解带入原方程可验证它的正确性</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">VU* = VU*U <span class="hljs-string">| V</span><br>VU* = VU+ <span class="hljs-string">| V</span><br></code></pre></td></tr></table></figure><p><strong>技巧2</strong>：分配律</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">(U | <span class="hljs-type">V</span>) A = UA | <span class="hljs-type">VA</span><br></code></pre></td></tr></table></figure><p>根据这两个技巧，推导过程如下，你可以暂时跳过这个推导过程</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs inform7">上述方程可以修改为：<br>  A = (Ø | B<span class="hljs-comment">[258]</span> | C<span class="hljs-comment">[147]</span>)<span class="hljs-comment">[0369]</span>*  (1)<br>  B = (A<span class="hljs-comment">[147]</span> | C<span class="hljs-comment">[258]</span>)<span class="hljs-comment">[0369]</span>*      (2)<br>  C = (A<span class="hljs-comment">[258]</span> | B<span class="hljs-comment">[147]</span>)<span class="hljs-comment">[0369]</span>*      (3)<br><br>将 (3) 代入 (1)(2) 得<br>  A = (Ø | B<span class="hljs-comment">[258]</span> | (A<span class="hljs-comment">[258]</span> | B<span class="hljs-comment">[147]</span>)<span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span>)<span class="hljs-comment">[0369]</span>*  (4)<br>  B = (A<span class="hljs-comment">[147]</span> | (A<span class="hljs-comment">[258]</span> | B<span class="hljs-comment">[147]</span>)<span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span>)<span class="hljs-comment">[0369]</span>*      (5)<br><br>用分配律展开 (5) 中的竖线得到<br>  B = A<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* | A<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>* | B<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<br>    = B<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>* | A<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* | A<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<br>    = (A<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* | A<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<br>    = A<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)* | A<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<br><br>把它代入 (4) 得<br>  A = (Ø | B<span class="hljs-comment">[258]</span> | (A<span class="hljs-comment">[258]</span> | B<span class="hljs-comment">[147]</span>)<span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span>)<span class="hljs-comment">[0369]</span>*<br>    = <span class="hljs-comment">[0369]</span>* | B<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>* | (A<span class="hljs-comment">[258]</span> | B<span class="hljs-comment">[147]</span>)<span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<br>    = <span class="hljs-comment">[0369]</span> | B<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>* | A<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* | B<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*  <br>    = <span class="hljs-comment">[0369]</span>* <br>      | B<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<br>      | A<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<br>      | B<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* <br>    = <span class="hljs-comment">[0369]</span>* <br>      | A<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<br>      | A<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<br>      | A<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<br>      | A<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* <br>      | A<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* <br>    = A<span class="hljs-comment">[...]</span> | <span class="hljs-comment">[0369]</span>*<br>    = <span class="hljs-comment">[0369]</span>* <span class="hljs-comment">[...]</span>*<br>    = <span class="hljs-comment">[0369]</span>* (<br>                    <span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<br>      | <span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<br>      |             <span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* <br>      | <span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*(<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<br>      | <span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* )*<br>    = <span class="hljs-comment">[0369]</span>* (<br>        (<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>* | <span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)<br>        (<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*<br>        (<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>* | <span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*)<br>      | <span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<br>      )*<br></code></pre></td></tr></table></figure><p>以上就是我们得到的正则表达式，我们去掉结果中的换行与空格，用 <code>(?:)</code> 消去不必要的子组，再加上断言 <code>(?&lt;!\d)</code> 与 <code>(?!\d)</code> 确保匹配整个数字，得到最终的正则表达式如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">(?&lt;!\d)<span class="hljs-comment">[0369]</span>*(?:(?:<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*|<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)(?:<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*)*(?:<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*|<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*)|<span class="hljs-comment">[258]</span><span class="hljs-comment">[0369]</span>*<span class="hljs-comment">[147]</span><span class="hljs-comment">[0369]</span>*)*(?!\d)<br></code></pre></td></tr></table></figure><p>这是该正则表达式真正的自动机，该自动机将开始状态与结束状态区分开了</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140824.jpeg"></p><p>有点儿复杂，但是我们知道 3 的倍数有一个特性：如果一个数可以被 3 整除，那么这个数各位之和也能被 3 整除，反之也成立。我们在各位数中剔除『0，3，6，9』这些本身就是 3 的倍数的元素，将剩下元素的加和并不会影响我们的判断。就是说正则中的 <code>[0369]*</code> 实际上对理清该正则表达式没有帮助，我们暂时忽略正则中所有的 <code>[0369]*</code> ，得到如下状态机</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140122.png"></p><p>我将该状态机与我们开头所设计的状态机对应的状态标记在了图像上，以便于你理解我们推导的正则表达式。</p><h1 id="更一般的情况"><a href="#更一般的情况" class="headerlink" title="更一般的情况"></a>更一般的情况</h1><p>如和用正则表达式匹配十进制下任意一个整数的倍数呢？</p><p>实际上前面讲述的思路可以用于匹配任一个整数 n 的倍数，我们就需要构造一个有 n 个状态的自动机</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140128.png"></p><p>在这个状态机中，起始状态和结束状态都是『q0』，第 k 个状态『qk』代表当前读入的数可以被 n 除余 k。我们将手算除法扩展到一般形式：</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140132.png"></p><p>前面讨论过 m 的范围是 [ 0 - 9 ]，易得通过如下的公式即可构造一条从『qk』到『qr』的转移边</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140137.png"></p><p>我们需要对每个状态『qk』和 m 的组合都用这个公式计算一遍，这样才可以求得所有的转移边，工作量等于</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208140141.png"></p><p>当然实际编程中我们并不会用这个方法来匹配某一个数的倍数，这里探讨这一问题仅用于拓展思路。</p><blockquote><p>正则表达式如何匹配 3 的倍数？ - Belleve的回答 - 知乎 <a href="https://www.zhihu.com/question/24824487/answer/29109747">https://www.zhihu.com/question/24824487/answer/29109747</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建简单好用的笔记系统</title>
    <link href="/2021/02/16/%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/02/16/%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建简单好用的笔记系统"><a href="#搭建简单好用的笔记系统" class="headerlink" title="搭建简单好用的笔记系统"></a>搭建简单好用的笔记系统</h1><p>你是不是也一直觉得 OneNote、印象笔记、有道云笔记等等工具用起来都有一点不太舒服。我只想用一个简单方便，到哪都能用的笔记系统，但是市面上常见的笔记软件越来越臃肿，小众良心的软件又担心它会不会死掉，这里我给你提供一个思路。</p><p>如果你想要一个全平台通用的、适合记笔记的文件格式，那么 Markdown 应该是一个不错的选择。Markdown 的语法简单、排版漂亮，配合像 Typora 这种优雅的编辑器能够在电脑端实现很棒的体验。</p><p>当然，Markdown 也有它的缺点。由于这种文件格式本身并不能保存图片，导致 Markdown 的使用者常常要自己想办法来解决全平台使用图片的问题。其中最省心的办法就是在类似阿里云、腾讯云这样大型的云服务商购买存储服务，配合 PicGo 这种小工具自己搭建一个图床，操作简单而且质量可靠。</p><p>更具体的操作方法你可以去搜索『阿里云 图床』这样的关键词。最后，使用坚果云这种全平台可用的同步盘来同步你的 Markdown 笔记。而且坚果云也有 Markdown 小工具，在手机和网页端浏览 Markdown 文件也比较方便。</p><p>希望你也喜欢这样的一种解决方案。</p><hr><p>题图由<a href="https://pixabay.com/zh/users/Monfocus-2516394/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1925752">Monfocus</a>在<a href="https://pixabay.com/zh/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1925752">Pixabay</a>上发布</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200524165524.jpg" alt="list-1925752_1920"></p>]]></content>
    
    
    
    <tags>
      
      <tag>效率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VsCode 多光标特性</title>
    <link href="/2021/02/16/VsCode%E5%A4%9A%E5%85%89%E6%A0%87%E7%89%B9%E6%80%A7/"/>
    <url>/2021/02/16/VsCode%E5%A4%9A%E5%85%89%E6%A0%87%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="VsCode-多光标特性"><a href="#VsCode-多光标特性" class="headerlink" title="VsCode 多光标特性"></a>VsCode 多光标特性</h1><p>使用 VsCode 或者其他编辑器的时候，经常会碰到如下场景:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.foo</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">5</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">5</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何将上面的三个 <code>5</code> 改成 <code>5px</code> ？答案是创建多个光标，以下给出了创建多光标的几种方法：</p><h2 id="创建多个光标"><a href="#创建多个光标" class="headerlink" title="创建多个光标"></a>创建多个光标</h2><h3 id="1-使用鼠标"><a href="#1-使用鼠标" class="headerlink" title="1. 使用鼠标"></a>1. 使用鼠标</h3><ol><li><p>先将将光标置于第一个『5』之后</p></li><li><p>按住键盘上的 『alt 』,然后鼠标点在第二个“5”之后。那么第二个光标就创建好了。</p></li><li><p>同样的方法创建第三个光标 </p></li></ol><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200701163849.gif" alt="1"></p><h3 id="2-使用键盘"><a href="#2-使用键盘" class="headerlink" title="2. 使用键盘"></a>2. 使用键盘</h3><ol><li>将光标置于第一个『5』的那一行</li><li>然后按下『Ctrl + Alt + 下方向键』在当前光标下创建新的光标，同样的方法创建的三个光标</li><li>按下『Fn + 右方向键』即可切换到行尾（即『End』键）</li><li>此时，按下『右方向键』，三个光标都到达了指定位置</li></ol><p>注：想要以单词为单位跳转光标，只需按下『Ctrl + 方向键』</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200701170211.gif" alt="2"></p><h2 id="相关快捷键"><a href="#相关快捷键" class="headerlink" title="相关快捷键"></a>相关快捷键</h2><p>编辑器中还有很多快捷键可以帮助我们快速地创建多光标</p><h3 id="1-『Ctrl-D』"><a href="#1-『Ctrl-D』" class="headerlink" title="1. 『Ctrl + D』"></a>1. 『Ctrl + D』</h3><p>这个命令的作用是，第一次按下时，它会选中光标附近的单词；第二次按下时，它会找到这个单词第二次出现的位置，创建一个新的光标，并且选中它。</p><p>这样，我们只需将光标置于 <code>5</code> 附近，连续按下三次『Ctrl + D』即可选中所有的 <code>5</code> 。此时再按下『右方向键』，输入“px”，即可完成任务。</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200701173116.gif" alt="3"></p><h3 id="2-『Ctrl-Shift-L』"><a href="#2-『Ctrl-Shift-L』" class="headerlink" title="2. 『Ctrl + Shift + L』"></a>2. 『Ctrl + Shift + L』</h3><p>这个命令会选择所有匹配项</p><ol><li>选择一个 <code>5</code> </li><li>按下『Ctrl + Shift + L』</li><li>按下『右方向键』</li></ol><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200701174651.gif" alt="5"></p><h3 id="3-『Alt-Shift-I』"><a href="#3-『Alt-Shift-I』" class="headerlink" title="3. 『Alt + Shift + I』"></a>3. 『Alt + Shift + I』</h3><ol><li>选择多行代码</li><li>然后按下『Alt + Shift + i』，这样操作的结果是：每一行的最后都会创建一个新的光标。</li></ol><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200701173845.gif" alt="4"></p>]]></content>
    
    
    
    <tags>
      
      <tag>效率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 是纯函数式数据结构</title>
    <link href="/2021/02/16/Git%E6%98%AF%E7%BA%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2021/02/16/Git%E6%98%AF%E7%BA%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近一直在学习 Git，但是一直不知道它的原理是什么，直到看到国外的一个大牛的博客。这篇博文给了我很大的启发，所以翻译过来和大家分享。</p></blockquote><blockquote><p><a href="https://blog.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/">原文链接</a></p></blockquote><p>虽然近几年像 Git 这种分布式版本管理系统很火，但它看起来还是比像 SVN 这样的集中式版本控制系统复杂。我猜这可能是因为我们总是会把二者相比较：在 SVN 中这样做，但在 Git 中却需要那样做。</p><p>我认为 Git 的真实含义应该是<strong>一个纯粹的函数式据结构</strong>。所以，如果你在学习熟练地使用 Git，那你也就是在学习处理数据结构。那么我们就先来探讨一下纯函数式数据结构。</p><a id="more"></a><h3 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h3><p>函数式编程中一个很重要的概念就是不变性( immutablity )。就是说一个对象的状态在构造完成以后不可改变</p><p>比如有一个典型列表 <code>[3,2,1]</code>。如果这个列表是可变的，我们可以在他的头部插入一个元素4，即 <code>[4,3,2,1]</code>。现在它变成了一个全新的列表，之前的那个列表丢失了。如果此时其他的小伙伴也在操作这个列表，他们便会不幸地得到一个异常.</p><p>而函数式编程便不会发生这种情况。因为当我们在列表头部插入 <code>4</code> 时，它会创建一个新列表 <code>[4,3,2,1]</code>，而不会修改原始列表。所以两个列表会同时存在。</p><p>可是如果我们每次迭代这个列表都会生成一个全新的列表，这样不仅浪费，而且效率很低啊。</p><p>实际上，函数式数据结构的效率在很大程度上取决于对它们执行的操作。对于刚刚那种（单链接）列表，如果我们只是想在它的头部插入数据，完全可以用更有效率的方法：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">  <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>  <span class="hljs-comment">|</span> <span class="hljs-comment">4</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">3</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">2</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">1</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>  <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>    <span class="hljs-comment">|</span>        <span class="hljs-comment">|</span><br><span class="hljs-comment">new</span> <span class="hljs-comment">list</span>  <span class="hljs-comment">original</span><br></code></pre></td></tr></table></figure><p>我们将新元素 <code>4</code> 放在一个新节点中，并将它指向列表的其余部分。你看，之前的列表得到了复用，之前我们发现的那些问题全都解决了。</p><p>可是如果其他人想要在 <code>[3,2,1]</code> 之前插入 <code>9</code> 呢？当然也可以用这个方法啦：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">              <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>      <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br><span class="hljs-comment">new</span> <span class="hljs-comment">list</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">4</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">3</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">2</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">1</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>              <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>  <span class="hljs-comment">/</span>   <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>                    <span class="hljs-comment">/</span>      <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>              <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><span class="hljs-comment">/</span>    <span class="hljs-comment">original</span><br><span class="hljs-comment">new</span> <span class="hljs-comment">list</span> <span class="hljs-comment">2</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">9</span> <span class="hljs-literal">+</span><br>              <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br></code></pre></td></tr></table></figure><p>我们当然也可以将这样的元素存储为可变列表（non-immutable list），但是这很危险。假如我们更新列表中的元素 <code>[3]</code>，那部分可是公共的，你的修改会影响到他人，那些需要 <code>[9,3,2,1]</code> 列表的人可不喜欢你这么干。</p><p>但是……如果我确实需要将元素 <code>3</code> 变成 <code>5</code>，该怎么办？还是用老方法啊：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">                <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br><span class="hljs-comment">updated</span> <span class="hljs-comment">list</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">4</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">5</span> <span class="hljs-literal">+</span><br>                <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><span class="hljs-comment">\</span>    <br>                               <span class="hljs-comment">\</span>    <br>                <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>  <span class="hljs-comment">\</span> <span class="hljs-literal">+</span><span class="hljs-literal">-</span><span class="hljs-literal">+</span><span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>  <span class="hljs-comment">new</span> <span class="hljs-comment">list</span> <span class="hljs-comment">1</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">4</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">3</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">2</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">1</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>                <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>  <span class="hljs-comment">/</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>                      <span class="hljs-comment">/</span>    <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>                <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><span class="hljs-comment">/</span>  <span class="hljs-comment">original</span><br><span class="hljs-comment"></span>  <span class="hljs-comment">new</span> <span class="hljs-comment">list</span> <span class="hljs-comment">2</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">9</span> <span class="hljs-literal">+</span><br>                <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br></code></pre></td></tr></table></figure><p>你看，它现在可以表示四个列表：</p><ul><li>最初的的列表 <code>[3,2,1]</code></li><li>list 1 <code>[4,3,2,1]</code></li><li>list 2 <code>[9,3,2,1]</code></li><li>list 2 <code>[4,5,2,1]</code></li></ul><p>纯函数数据结构在多线程编程中非常有用，因为来自不同线程的更改不会相互干扰。</p><h3 id="和-Git-的关系"><a href="#和-Git-的关系" class="headerlink" title="和 Git 的关系"></a>和 Git 的关系</h3><p>可是，我们之前讨论的不变性和 Git 的版本控制功能有什么关系呢？那我们就一起来对比以下它们俩的异同吧。</p><ul><li>在版本控制系统中我们想要完成的是：<ol><li>使用新版本的文件更新我们的代码仓管库，旧版本文件也要保留。</li><li>当你和你的小伙伴门在同一个个代码库上进行协作时，不会以不可预测的方式相互干扰。</li></ol></li><li>不可变的数据结可以：<ol><li>更新数据结构的同时保留老的数据结构。</li><li>在一个线程中对数据结构更改不会影响到其他线程</li></ol></li></ul><p>怎么样，是不是觉得它们俩很像。</p><p>事实上，我门甚至可以说 Git 基本上就是是一个纯粹的函数式数据结构，让你使用命令行客户端在其上执行操作。</p><p>要完成这个类比，我们需要把上面的数字替换成 Commit。</p><p>Git commints 是工作历史中特定时间点的全部工作状态的独立副本，即工作目录的完整快照。我们可以把示例中的链表看成是 Git 中的历史记录。</p><p>比如说我们有一个代码仓库，它的 <code>master</code> 分支包含三个按顺序的 commit : <code>A</code>，<code>B</code>，<code>C</code>。也就是我们让 Git 在整个开发过程中完整地存储了我们的工作目录三次。</p><p>这就是历史纪录啊，用图说话：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br><span class="hljs-literal">+</span> <span class="hljs-comment">C</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">B</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">A</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span><span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>  <span class="hljs-comment">|</span><br><span class="hljs-comment">master</span><br></code></pre></td></tr></table></figure><h3 id="Git-commit"><a href="#Git-commit" class="headerlink" title="Git commit"></a>Git commit</h3><p>当我们执行 commit 的时候，这就可以类比成我们将一个数据提交到了这个历史纪录的开头。而 Git 甚至用 <code>HEAD</code> 代表当前的 commit。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br><span class="hljs-literal">+</span> <span class="hljs-comment">D</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">C</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">B</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">A</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span><span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>  <span class="hljs-comment">|</span>        <span class="hljs-comment">|</span><br><span class="hljs-comment">master</span>   <span class="hljs-comment">master^</span><br></code></pre></td></tr></table></figure><p>当 Git 执行 commit 时，它会移动当前分支指针，将 <code>master</code> 指向 <code>[D,C,B,A]</code>。我们仍然<br>可以通过名称 <code>master^</code> 指向 <code>[C,B,A]</code>，并且不会影响到其他人。</p><h3 id="Git-amend"><a href="#Git-amend" class="headerlink" title="Git amend"></a>Git amend</h3><p>如果你使用过 Git，你或许知道可以使用 <code>commit --amend</code> 来更新最近一次的 commit  ，但你真的可以更新 commit 吗？</p><p>事实上，你不能。Git 只是创建一个新的 commit （下图中 E）并将 branch 指针指向它。你仍然可以使用 <code>git reflog</code> 命令看到它，并且可以通过它的 hash value 来引用（假设他的 hash value 是 ef4d34）。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br><span class="hljs-comment">ef4d34</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">D</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">+</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">C</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">B</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">A</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span> <span class="hljs-comment">/</span>  <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>               <span class="hljs-comment">/</span>     <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-comment">master^</span><br><span class="hljs-comment">master</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">E</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br></code></pre></td></tr></table></figure><h3 id="Git-branch"><a href="#Git-branch" class="headerlink" title="Git branch"></a>Git branch</h3><p>如你所见，每次执行 <code>commit --amend</code> 时，实际上都会创建一个新分支。分支的唯一功能就是给我们能引用的 commit 起个名字。我们甚至可以使用 <code>git checkout -b branch ef3d34</code> 命令在那个被丢弃的 commit <code>ef3d34</code> 上创建一个新分支。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br><span class="hljs-comment">branch</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">D</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">+</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">C</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">B</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">A</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span> <span class="hljs-comment">/</span>  <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>               <span class="hljs-comment">/</span>     <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>  <span class="hljs-comment">master^</span><br><span class="hljs-comment">master</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">E</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br></code></pre></td></tr></table></figure><p>通常，我们通过为当前的工作流 <code>HEAD</code> 创建一个新名称来在 Git 中进行分支，但是如果你将 Git 理解为一个函数式数据结构，你就可以随心所欲地在这个树状图上的任何一个 commit 上创建分支了。</p><h3 id="Git-rebase"><a href="#Git-rebase" class="headerlink" title="Git rebase"></a>Git rebase</h3><p>当我们在上边的示例列表中更新一个节点时,我们必须把列表中的每个节点添加到在更新后的元素之前（在我们的示例中，这是单个节点 <code>4</code>，但可以是任意数量的节点）。在 Git 中，这称为重新提交（replaying commits），执行此操作的命令称为变基（rebase）。要更新旧提交，我们添加 <code>-i</code> 参数来执行一个在 Git 中称被叫做「交互式 rebase」的操作。</p><p>比如说，我们想要用一个新的 commit message 来更新 commit <code>C</code>。我们需要切换到 commit <code>D</code>，然后输入 <code>git rebase -i c</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; git checkout D<br>&gt; git rebase -i C<br></code></pre></td></tr></table></figure><p>在窗口中包含一下内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pick</span> cd<span class="hljs-number">3</span>ff<span class="hljs-number">32</span> &lt;C&#x27;s commit message&gt;<br><span class="hljs-attribute">pick</span> a<span class="hljs-number">65</span>a<span class="hljs-number">671</span> &lt;D&#x27;s commit message&gt;<br><br><span class="hljs-comment"># some helpful comments from git</span><br></code></pre></td></tr></table></figure><p>如果我们想编辑 cimmit <code>C</code>，Git 允许我们在重放后续提交之前编辑该提交。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">edit</span> cd<span class="hljs-number">3</span>ff<span class="hljs-number">32</span> &lt;C&#x27;s commit message&gt;<br><span class="hljs-attribute">pick</span> a<span class="hljs-number">65</span>a<span class="hljs-number">671</span> &lt;D&#x27;s commit message&gt;<br></code></pre></td></tr></table></figure><p>当我们保存文件并关闭它时，Git 会开始一个 rebase 。它会在 commit <code>C</code> 停止，这样我们可以修改它。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">Stopped <span class="hljs-keyword">at</span> cd3ff32... &lt;C<span class="hljs-symbol">&#x27;s</span> commit message&gt;<br>You can amend the commit now, <span class="hljs-keyword">with</span><br><br>        git commit <span class="hljs-comment">--amend</span><br><br>Once you are satisfied <span class="hljs-keyword">with</span> your changes, run<br><br>        git rebase <span class="hljs-comment">--continue</span><br></code></pre></td></tr></table></figure><p>窗口中的消息说明了一切。我们可以根据需要随意编辑 commit 后我们调用 <code>commit --amend</code> 创建更新的 commit，然后使用「继续 rebase」指令： <code>git rebase --continue</code>。<br>当我们选择命令时，其余的 commit 将一个接一个地重放 <code>pick</code>（除非最终发生了合并冲突，在这种情况下 Git 会停止并在你修复它之后才能继续）。我们的完整存储库现在就像下边这样。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br><span class="hljs-comment">rebased</span> <span class="hljs-literal">-</span>&gt;<span class="hljs-comment">|</span> <span class="hljs-comment">D&#x27;</span><span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">C&#x27;</span><span class="hljs-literal">+</span><br>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>                         <br>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br><span class="hljs-comment">branch</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">D</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">+</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">C</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">B</span> <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-comment">A</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span> <span class="hljs-comment">/</span>  <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>    <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>               <span class="hljs-comment">/</span>     <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>  <span class="hljs-comment">master^</span><br><span class="hljs-comment">master</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">|</span> <span class="hljs-comment">E</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>          <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br></code></pre></td></tr></table></figure><p>我希望上面的图会让你觉得熟悉。希望你也能明白为什么 Git 的 rebase 命令会创建所有新的 commit。Git 是一个函数式数据结构，它不允许更改现有的 commit。</p><p>由于 rebase 引入了一个新的提交链，所以我们一定希望能够对这个新链的外观进行必要的且任意的控制。我们可以用 <code>rebase -i</code> 来重新排序，压缩或删除提交，或者随意拉入新的提交，比如把一个 commit 分成几部分，或者从存储仓库中的其他位置开始（使用 <code>--onto</code> 参数）。</p><h3 id="Git-merge"><a href="#Git-merge" class="headerlink" title="Git merge"></a>Git merge</h3><p>现在我们来谈谈合并把。Git 允许我们将两个分支合并为一个</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">        <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>      --<span class="hljs-literal">+</span> <span class="hljs-comment">X</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span><span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><span class="hljs-comment">/</span>  <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br><span class="hljs-comment">|</span> <span class="hljs-comment">M</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span><span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span>   <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br>      --<span class="hljs-literal">+</span> <span class="hljs-comment">Y</span> <span class="hljs-comment">|</span><br><span class="hljs-comment"></span>        <span class="hljs-literal">+</span>--<span class="hljs-literal">-</span><span class="hljs-literal">+</span><br></code></pre></td></tr></table></figure><p>合并給我们的模型带来了更多的复杂性。它把我们的历史从一个树状图变成了一个非循环图。这并没有太大的改变，但请注意，虽然 rebase 听起来复杂，但只有 merge 命令带来了额外的概念复杂性。</p><p>可以通过在新方向上应用新提交来理解 Rebase 。合并是一种根本不同的操作。一个数据结构，一个你可以将两个部分像这样组合成数据结构一个特殊的名称：我们称它 confluently persistent。（函数式数据结构也叫 persistent。我避免使用<br>这个术语，所以你不要将它与像物理光盘这样的持久性媒体上的存储概念混淆。）</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Git可以看成是一个相当简单的函数式数据结构。与其把Git描述成一个版本控制系统，不如说版本控制是“不变性”数据结构的一个自然属性。。我认为以这种方式谈论 Git 能更准确地传达 Git 的简单性和威力，而不是与集中式版本控制系统相比能完成什么。</p><p>如果以这种方式来思考的话，Git 在概念上比 SVN, CVS 等要简单。 大家认为 Git 更加复杂可能是因为这种复杂性能支持更有趣的 workflow。</p><p>如果你曾经觉得 Git 令人生畏，那请记住它的简单结构，以及在函数式结构中，<br>插入其中的任何东西都不会真正丢失，并且可以被恢复。（检查你的 <code>reflog</code>）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有趣的三次握手与四次挥手 1</title>
    <link href="/2021/02/16/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B1/"/>
    <url>/2021/02/16/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近研究了以下 TCP\IP 协议中的三次握手与四次挥手，下面我将我的收获分享给大家。 </p></blockquote><p>IP 协议是一种在两点间建立传输的基础协议，可以说几乎所有的其他协议都建立在 IP 所提供的基础服务上进行传输。但 IP 协议是一种不可靠的传输协议，它既不保证一方发送的数据包到达另一方的顺序，也不保证发送的数据包能够送达到另一方，也就是说通过 IP 协议传输可能会发生丢包和延时。在一些需要保证数据完整性的场景中，IP 协议的不可靠性显然是无法被接受的。</p><p>TCP 协议全称为传输控制协议（Transmission Control Protocol），它是建立在 IP 协议上的一种传输协议。其目的就是在 IP 提供的不可靠传输服务中，在两点间建立一个可靠的传输连接。其可靠性是建立在「失败重传」这一机制上的，也就是说：任何一方向另一方发送数据，都必须收到对方的确认回应，否则就重新传输。在 TCP 协议中，最著名的莫过于其建立连接时的「三次握手」与断开连接时的「四次挥手」，本文我们就一起探索一下这两个过程。</p><a id="more"></a><p>注意：这里的「三次握手」英文原文是 three-way handshik 或者 three-message handshake，即通过三个步骤 / 三条消息才能建立的握手机制，同理四次挥手也是如此。</p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>我们首先来思考一个问题：如何才能确认一个连接是可靠的？其实如果你经常逛知乎的话，应该会见到下面这个讨巧卖萌的解答方式：</p><blockquote><p>「喂，你听得到吗？」<br><br>「我听得到啊，你能听到我吗？」<br><br>「我能听到你。」</p></blockquote><p>没错，这就是一个简化了的 TCP 连接的建立过程。那么我们来分析一下这一简化的过程；</p><p>显而易见，如果我们想建立一个双向的、可靠的通讯，我们必须确认建立连接时双方的接收和发送数据的功能都是可用的，用上 TCP 中的术语，大概是下面这样。</p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630212552.jpg"/><p>相信你也发现了，为了减少一次通讯次数，我们会把上图的 ② 和 ③ 合并成一次，</p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630212517.jpg"/><p>你看，经过三步，一个简化的 TCP 连接就建立起来了，之后 A 和 B 就会互相传输数据。但是我们说过 IP 协议会发生丢包和延时，而三步握手仅仅是确认了双方接受和发送数据的功能是可用的，并没有解决 IP 协议丢包和延时带来的问题。那么 TCP 是怎么解决这一问题的呢？</p><p>前文提到过，TCP 用来保证可靠性的方法是「失败重传」，我们可以从 A 机器向 B 机器发起连接请求的那条消息（即上图 ①）开始，将 A 发给 B 的所有消息按顺序标上序号，同时也将 B 发给 A 的所有消息按顺序标上序号，这样对方收到发来的消息就能根据序号分辨出顺序和丢包，如果发生丢包就可以要求重传。但在实际传输中，由于各个中间节点的配置不同，一个数据包在传输过程中可能被中间节点分成几份，所以实际中序号的意义是「这是我们所传输数据的第几个字节」。如下图所示</p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630212441.jpg"/><p>注意这里的序号并不是从 0 开始，其实用 0 表示初始值在编程中是普遍的做法，为什么在这里就不是这样了呢？这里我们考虑一下当 TCP 未能正常建立连接的情况。</p><p>我们将发起请求的 A 机器称为客户端，将接受请求的 B 机器称为服务端，通常服务端通过四个数据识别一条连接，即双方的 ip 地址和双方建立连接的端口号。假设客户端首先请求建立连接，然后发送了一个数据包（假设序号为 x）但是这个数据包在传输过程中发生了较大的延时，导致服务端认为连接中断，关闭了连接。紧接着同一个客户端再次发起请求，在刚建立连接的时候，之前延时的那个数据包碰巧到达了，而如果两次连接的端口一样的话，也就是说新连接建立时双方的 ip 地址和端口号都和老链接一样，这个来自老链接的数据包就可以轻松的蒙混过关，被服务端接受下来，这显然是不被允许的。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>客户端：我想建立连接。<br><span class="hljs-bullet">- </span>服务端：好！<br><span class="hljs-bullet">- </span>客户端：发送第一个数据包 ①<br><span class="hljs-bullet">- </span>......（第一个数据包发生延时）<br><span class="hljs-bullet">- </span>服务端：奇怪怎么没动静了，断了连接吧<br><span class="hljs-bullet">- </span>...<br><br><span class="hljs-bullet">- </span>客户端：奇怪，怎么断了。我想建立连接。<br><span class="hljs-bullet">- </span>服务端：好！<br><span class="hljs-bullet">- </span>数据包 ① 终于到了！<br><span class="hljs-bullet">- </span>服务端：来数据了，我要收下<br></code></pre></td></tr></table></figure><p>因此，每次建立连接的起始序号应该是不同的，也就是说我们需要一种随机数算法，保证生成的随机数在一个数据包的最大生存周期内不会重复。我们用这个随机数作为连接的起始序号，这样结合数据包的四元组（双方建立链接的 ip 和端口），就可以保证在数据包的最大生存周期内，每一个数据包的唯一性，以此避免发生混淆。通常这个起始序号有一个专用的的名字叫做 ISN (Initial Sequence Number)。</p><p>在实际情况中，客户端和服务端在建立连接时分别会生成自己的 ISN，然后通过建立连接的报文发送给对方，供对方确认是否丢包。</p><p>下面我们来看看 TCP 报文的格式</p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630211944.jpg"/><p>报文的第一行两个端口号各占两个字节，分别表示了源机器和目标机器的端口号，再加上 IP 报文中双方的 IP 地址即可组成之前所说的四元组。协议的第四行包括了 6 个控制位，这里我们主要关注其中的 SYN, ACK, FIN 这三个控制位。SYN 即 synchronize，在建立连接时使用，也就是我们所说的「听得到吗？」；ACK 表示 acknowledge，表示确认收到了消息，也就是我们所说的「听得到！」；FIN 表示 finish，在稍后讲述断开连接时会使用。</p><p>报文的第二行和第三行是序列号，各占 4 个字节。它们就是我们之前说的「序号」，seq 是指所发送数据包中数据部分第一个字节的序号，ack 是指期望收到来自对方的下一个数据包中数据部分第一个字节的序号。TCP 还规定，如果一方发送的 seq 序号为 x，那么就代表它已经收到了从建立连接开始到 x-1 的所有数据，有了这一机制，当接收方发送的确认数据在传输的过程中丢失时，数据发送方也能根据收到的部分确认数据推测出对方收到了多少数据，减少了发送方由于「误会」而造成的失败重传，能有效缓解网络拥挤的现象。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tap">- 服务端：发送以 seq =<span class="hljs-number"> 101 </span>开始，长度为<span class="hljs-number"> 10 </span>的数据包。<br>- 客户端：请发送以 seq =<span class="hljs-number"> 111 </span>开始的数据包。<br><br>- 服务端：发送以 seq =<span class="hljs-number"> 111 </span>开始，长度为<span class="hljs-number"> 30 </span>的数据包。<br>- ...假设数据包被中间节点拆分成<span class="hljs-number"> 3 </span>个小块<br><br>- 客户端：咦，怎么来了一个 seq<span class="hljs-number"> 121 </span>开始长度为<span class="hljs-number"> 10 </span>的数据包？  <br>- 客户端：咦，怎么来了一个 seq<span class="hljs-number"> 131 </span>开始长度为<span class="hljs-number"> 10 </span>的数据包？  <br>- 客户端：终于收到 seq =<span class="hljs-number"> 111 </span>开始的数据包了，长度为 10，需要回 ACK = 121。  <br>- 客户端：不对。seq =<span class="hljs-number"> 121 </span>开始的数据包我好像收到过，需要回 ACK =<span class="hljs-number"> 131 </span>才对。  <br>- 客户端：还不对。seq = 131开始的数据包我也收到过，需要回 ACK =<span class="hljs-number"> 141 </span>才对。<br><br>- 服务端：发送以 seq =<span class="hljs-number"> 141 </span>开始，长度为<span class="hljs-number"> 10 </span>的数据包。<br>- 服务端：发送以 seq =<span class="hljs-number"> 151 </span>开始，长度为<span class="hljs-number"> 10 </span>的数据包。<br><br>- 客户端：ack = 151<br>- ...丢失<br>- 客户端：ack = 161<br><br>- 服务端：只来了个 ack = 161，我猜 seq =<span class="hljs-number"> 151 </span>那个数据包也发送成功了。<br></code></pre></td></tr></table></figure><p>由于 TCP 报头存在一些扩展字段，所以需要通过长度为四个 bit 的头部长度字段表示 TCP 报头的大小，这样接收方才能准确的计算出包中数据部分的开始位置。</p><p>接下来门就看看真正的三次握手。注意在请求连接的数据包中，由于不传输，SYN ACK 被当作数据部分第一个字节。</p><ul><li>第一步<ul><li>A 将数据包中 SYN 置 1，表示希望建立连接</li><li>并生成第一个 seq（此时应叫 ISN）假设为 x，然后将这个数据包发送给对方。</li></ul></li><li>第二步<ul><li>B 收到 A 发来的数据包后，通过 SYN 得知这是一个建立连接的数据包，</li><li>于是生成一个相应包将 SYN 和 ACK 都置 1，表示对 A 的回应和询问，</li><li>并将确认序号（ack）设置为 x+1，表示收到了 A 机器「SYN」这一字节数据，期望收到 A 的下一个数据包中第一个字节序号为 x+1。</li><li>并标记上自己的第一个 seq（此时叫 ISN），假设为 y，然后发送这个数据包。</li></ul></li><li>第三步<ul><li>A 收到 B 的相应包后进行确认，将确认包中 ACK 置为 1 表示确认，</li><li>seq 置为 x+1（即对方期望的「下一个字节」），</li><li>ack 置为 y+1（收到对方第 y 个字节的数据，期望收到下一个数据包中第一个字节序号为 y+1）.</li></ul></li></ul><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630212623.jpg"/><p>说完了三次握手，我们再来看看 TCP 断开连接时的四次挥手</p><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>有了前面的基础，四次分手就简单的多了。首先是简化版本</p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630212705.jpg"/><p>看到这幅图可能你也明白了，TCP 的建立连接和断开连接都需要两轮问答，只不过建立连接的时候，② 和 ③ 可以被合并为一次通信。而在断开连接的时候，由于 A B 两台机器通常不会同时发送完数据，所以只能等待每一方发完数据时分别进行一轮确认。接下来看看带有序号的「正式版」</p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630212729.jpg"/><p>关于四次挥手我看到过一个分手的版本</p><ul><li>男生：我们分手吧。</li><li>女生：好的，我的定西收拾完，发信息给你。（此时男生不能再拥抱女生了。）</li><li>一个小时后…</li><li>女生：我收拾好了，分手把。（此时，女生也不能再拥抱男生了。）</li><li>男生：好的。（此时，双方约定经过 2 个月的过渡期，双方才可以分别找新的对象。）</li></ul><p>可能你注意到了，双方最后有 2 个月的过渡期，在四次分手中也有这样的一个过渡期，它的时长为 2MSL。MSL（Maximum Segment Lifetime）中文可以译为「报文最大生存时间」，他是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。2MSL即两倍的MSL，在此期间，主动分手一方会进入一个名为 <code>TIME_WAIT</code> 的等待状态，也称为 2MSL 等待状态。</p><p>当 TCP 的一端发起主动关闭，在发出最后一个 ACK 包后，即第3次挥手完成后发送了第四次挥手的 ACK 包后就进入了 <code>TIME_WAIT</code> 状态，必须在此状态上停留两倍的 MSL 时间，等待 2MSL 时间主要目的是怕最后一个 ACK 包对方没收到，那么对方在超时后将重发第三次挥手的 FIN+ACK 包，主动关闭端接到重发的 FIN 包后可以再发一个 ACK 应答包，并且会重新计时。在 <code>TIME_WAIT</code> 状态时两端的端口不能使用，要等到 2MSL 时间结束才可继续使用。当连接处于 2MSL 等待阶段时任何迟到的报文段都将被丢弃,因此 2MSL 等待状态的另一个用处是防止已失效连接的请求数据包与正常连接的请求数据包混淆而发生异常。</p><p>至此我们已经对 TCP 的三次握手与四次挥手有了初步的理解，后文会更加详细的说明在 TCP 的握手与挥手时双方的状态转换。</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一出好戏有感</title>
    <link href="/2021/02/16/%E4%B8%80%E5%87%BA%E5%A5%BD%E6%88%8F%E6%9C%89%E6%84%9F/"/>
    <url>/2021/02/16/%E4%B8%80%E5%87%BA%E5%A5%BD%E6%88%8F%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>「一出好戏」其实已经上映很长时间了，之前早有所耳闻，直到最近有朋友推荐，我才观看了一下。这部影片是一部喜剧，剧情难免有浮夸和不合理的部分，但它仍然值得我们思考，因为它通过一个在荒岛中建立小型社会的故事反映了人性的本质。</p></blockquote><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208172713.jpg" alt="YiChuHaoXi-1"></p><a id="more"></a><h3 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h3><p>电影一开始便交代了故事的背景——一颗陨石可能会撞向地球，世界可能因此灭亡。而张总（于和伟饰）公司的员工听由于取了史教授的言辞而对此事不以为然，还搞起了团建活动。</p><p>我们的主角名字叫马进（黄渤饰），是一个社会底层人物。他没车没房，而又债务缠身。面对喜欢的姑娘，他无力表白。在公司团建当天，他像往常一样买了一张彩票，寄希望于自己能够中大奖。</p><p>公司的团建将一辆水陆两用车开到了海上。在车上，司机小王（王宝强饰）得到了一笔小费，张总宣布公司上市全员加薪，马进由于发现自己的彩票中奖而载歌载舞，每个人都有自己的欢乐。</p><p>不幸的是，一阵海啸将他们带到了一个荒岛。在这个资源有限的小岛上，这三十多个人组成了一个小社会，开始了一段创建文明的生活。</p><h3 id="四种社会阶段"><a href="#四种社会阶段" class="headerlink" title="四种社会阶段"></a>四种社会阶段</h3><h4 id="1-集权阶段"><a href="#1-集权阶段" class="headerlink" title="1. 集权阶段"></a>1. 集权阶段</h4><p>作为人类社会的第一阶段，人们的首要任务是生存。司机小王作为岛上唯一一个有生存经验的人，教会了大家摘果子抓鱼，还找到了一个山洞来让大家避风雨，他有能力解决大家的温饱问题，自然被奉为了王，于是小岛上的社会便形成了集权。这一制度在初期解决了人们的温饱问题，随着老潘（王迅饰）史教授等人的阿谀奉承，小王开始不参与劳动，一个人独享美色，有人稍有不满便拳脚相向，变成了一个暴戾成性的「猴王」。</p><h4 id="2-资本阶段"><a href="#2-资本阶段" class="headerlink" title="2. 资本阶段"></a>2. 资本阶段</h4><p>温饱的问题得到了解决，就有一部分人不满足于猴王的统治，张总作为公司的老总，当然对这方面擅长。他开始对大家进行洗脑，一本正经的画大饼。虽然此时张总什么都没有，但那些不满于生活现状的人仍然选择了依附他。幸运的是他们发现半截颠倒的轮船，里面物资丰富，这让大家过上了和平的生活。深谙资本运作之道的张总开始通过控制货币的流通让自己不劳而获。人们由此进化为了以资本为中心的阶段，下层的人民打工为生，上层的人民逍遥自在。</p><h4 id="3-我托邦阶段"><a href="#3-我托邦阶段" class="headerlink" title="3. 我托邦阶段"></a>3. 我托邦阶段</h4><p>乌托邦是人类思想意识中最美好的社会。彩票大奖擦肩而过让马进回到了现实，他通过与自己的天才小弟马小兴合作，获得了更高级的工具。通过引诱原始部落和资本部落相争，马进渔翁得利般的站在了制高点，继续为可怜的人们画着大饼，告诉人们自己才有能力带领大家回到外面的世界。二马通过先进的技术带领人们过上了精神与物质都富足的生活。这里的人们穿上了精神病病人一般的衣服，对马进感恩，对马小兴感恩，对小岛的生活感恩。这似乎意味着岛上的人全部都是疯子，众人皆活在马进二人编织的人人平等、逍遥自在美好幻象里。即使曾经的猴王，资本家也没能避免。</p><h3 id="黑化的世界"><a href="#黑化的世界" class="headerlink" title="黑化的世界"></a>黑化的世界</h3><p>小兴的黑化是从发现可以挽救大家的游轮的时候开始。害怕失去一切的马小兴密谋了一个弥天大谎，他欺骗大家游轮是假象，利用大家对亲人的思念获得了外面的世界的众多财产，并计划抛弃大家和马进一起逃离小岛。无知的众人依旧将二马奉为能够带领大家逃出去的领袖，依旧每日欢声笑语，载歌载舞。</p><h3 id="逃离"><a href="#逃离" class="headerlink" title="逃离"></a>逃离</h3><p>幸运的是，清醒的马进并没有听从小兴的阴谋。他表面上答应了小兴，实则与小王一起，在游轮再次到来的时候制造混乱，点燃了庇护所，让大家乘坐大船离开了小岛。</p><h3 id="其他的一些隐喻"><a href="#其他的一些隐喻" class="headerlink" title="其他的一些隐喻"></a>其他的一些隐喻</h3><h4 id="1-绿色的蜥蜴"><a href="#1-绿色的蜥蜴" class="headerlink" title="1. 绿色的蜥蜴"></a>1. 绿色的蜥蜴</h4><p>冲浪鸭被海浪掀在荒岛上时候，马进以绿色蜥蜴的视野醒来，意识到流落现状。张总说出：“有钱还怕没船。”的时候，不远处的蜥蜴再一次出现。原始部落与资本部落兵戎相见，绿色蜥蜴的眼神里似乎充满了对众人的嘲笑。三次权利部落更迭之后，众人在破船篝火前狂欢，所谓歌舞升平的平安盛世，在绿色蜥蜴的视界变得又畸形又模糊。马进崩溃被众人孤立的时候，海边乱石滩孤坐着他和那只绿色蜥蜴，是在分不清现实和意识中仅存的理智，当小王出现后，再不见绿色蜥蜴身影。彩蛋中潘主任虚头巴脑的讲话时候，蜥蜴带走了画面。</p><p>全篇出现了太多次绿色蜥蜴的镜头，它就像是代表了一种清晰正确的上帝视角，在任何画面中都显得特别突兀。</p><h4 id="2-现实世界渡轮的鸣笛声。"><a href="#2-现实世界渡轮的鸣笛声。" class="headerlink" title="2. 现实世界渡轮的鸣笛声。"></a>2. 现实世界渡轮的鸣笛声。</h4><p>电影中的荒岛场景乱石围绕，森林繁茂，这个声音每次出现，都伴随着夜晚、大风、雾气、森林等渲染恐怖的场景意象，出现多次。在这期间，人们在岛上先后经历了恐惧，生机，离间，矛盾，冲突，以及最后的合作。直到第132天时候才有胆量去探查这个声音的来源。人都是直到所有和生存有关的威胁都消除了之后，才会有胆量去探查反复冲击心理防线的东西，究竟是什么。</p><h4 id="3-反转的船。"><a href="#3-反转的船。" class="headerlink" title="3. 反转的船。"></a>3. 反转的船。</h4><p>从张总发现那艘颠倒的穿开始，众人就一直将其作为伊甸园。将这艘船上下颠倒的场景一共出现了两次，初到船舱的颠倒，看到最后会不自觉地觉得这是众人即颠覆性生活的开始。第二次的出现却颇具讽刺意味，清醒的小王、被马小兴洗脑的众人对立，是非颠倒，黑白反复，一群人追逐一个统治者给你制造出的真相，自己生生把生存的希望毁灭掉。所有人都踩着天花板当作是脚踏实地，真相也是要基于颠倒而存在的。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>电影结尾马进的那句“然后呢？”令人深思，而彩蛋也颇有趣味。彩蛋中，从荒岛回来的众人只有马小兴一人失去了记忆，而精神病院在康复的病人也和众人在荒岛上围绕着火堆歌舞升平的场景极其相似，老潘和史教授继续为了利益为来荒岛参观游客编造虚假的故事。在电影的最后，徐峥客串的一个路人揭示了一个道理那些吹牛的人十分可恶。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hugo 主题 blackburn 用法</title>
    <link href="/2021/02/16/hugo%E4%B8%BB%E9%A2%98blackburn%E7%94%A8%E6%B3%95/"/>
    <url>/2021/02/16/hugo%E4%B8%BB%E9%A2%98blackburn%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Blackburn"><a href="#Blackburn" class="headerlink" title="Blackburn"></a>Blackburn</h1><p>Blackburn 是一个清爽的响应式 <a href="//gohugo.io">Hugo</a> 主题。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>以 Yahoo’s <a href="http://purecss.io/">Pure CSS</a> (v1.0.0) 为基础。</li><li>带有社交链接的固定侧边栏：<ul><li>Twitter</li><li>GNU social</li><li>Facebook</li><li>Google+</li><li>Weibo</li><li>Tumblr</li><li>Instagram</li><li>Flickr</li><li>500px</li><li>Pinterest</li><li>YouTube</li><li>Vimeo</li><li>Vine</li><li>SlideShare</li><li>LinkedIn</li><li>Xing</li><li>Reddit</li><li>Hacker News</li><li>GitHub</li><li>GitLab</li><li>Bitbucket</li><li>Stack Overflow</li><li>Server Fault</li><li>Steam</li><li>MobyGames</li><li>Last.fm</li><li>Discogs</li><li>Keybase</li></ul></li><li>由 <a href="//highlightjs.org">Highlight.js</a> (v9.12.0) 提供客户端语法高亮显示</li><li>由 Google Analytics 提供网页分析</li><li>由 Disqus 提供评论系统</li><li>由 Font Awesome (v5.9.0) 提供图标</li></ul><h2 id="示例网站"><a href="#示例网站" class="headerlink" title="示例网站"></a>示例网站</h2><ul><li><a href="http://themes.gohugo.io/theme/blackburn/">示例网站</a></li><li>你也可以到我的个人站点看到实际运转的网站 <a href="http://yoshiharuyamashita.com/">跳转</a></li></ul><h2 id="网页快照"><a href="#网页快照" class="headerlink" title="网页快照"></a>网页快照</h2><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;&lt; <span class="hljs-name">fluid_imgs</span></span><br><span class="hljs-template-variable">  <span class="hljs-string">&quot;pure-u-1-1|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608144024.png|网页快照&quot;</span></span><br><span class="hljs-template-variable">&gt;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20201208172153.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在你的 Hugo 站点目录运行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> mkdir themes</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> themes</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/yoshiharuyamashita/blackburn.git</span><br></code></pre></td></tr></table></figure><p>或直接从 <a href="//github.com/yoshiharuyamashita/blackburn/archive/master.zip">这里</a> 下载。</p><p>浏览 <a href="//gohugo.io/overview/quickstart/">Hugo Quickstart Guide</a> 以获得更多信息。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>例如 config.toml:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">baseurl</span> = <span class="hljs-string">&quot;https://www.example.com/&quot;</span> <span class="hljs-comment"># Make sure to end baseurl with a &#x27;/&#x27;</span><br><span class="hljs-attr">title</span> = <span class="hljs-string">&quot;Your site title&quot;</span><br><span class="hljs-attr">author</span> = <span class="hljs-string">&quot;Your name&quot;</span><br><span class="hljs-comment"># Shown in the side menu</span><br><span class="hljs-attr">copyright</span> = <span class="hljs-string">&quot;&amp;copy; 2016. All rights reserved.&quot;</span><br><span class="hljs-attr">canonifyurls</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">paginate</span> = <span class="hljs-number">10</span><br><br><span class="hljs-section">[indexes]</span><br>  <span class="hljs-attr">tag</span> = <span class="hljs-string">&quot;tags&quot;</span><br>  <span class="hljs-attr">topic</span> = <span class="hljs-string">&quot;topics&quot;</span><br><br><span class="hljs-section">[params]</span><br>  <span class="hljs-comment"># Shown in the home page</span><br>  <span class="hljs-attr">subtitle</span> = <span class="hljs-string">&quot;A Hugo Theme&quot;</span><br>  <span class="hljs-attr">brand</span> = <span class="hljs-string">&quot;Blackburn&quot;</span><br>  <span class="hljs-attr">googleAnalytics</span> = <span class="hljs-string">&quot;Your Google Analytics tracking ID&quot;</span><br>  <span class="hljs-attr">disqus</span> = <span class="hljs-string">&quot;Your Disqus shortname&quot;</span><br>  <span class="hljs-comment"># CSS name for highlight.js</span><br>  <span class="hljs-attr">highlightjs</span> = <span class="hljs-string">&quot;androidstudio&quot;</span><br>  <span class="hljs-attr">highlightjs_extra_languages</span> = [<span class="hljs-string">&quot;yaml&quot;</span>]<br>  <span class="hljs-attr">dateFormat</span> = <span class="hljs-string">&quot;02 Jan 2006, 15:04&quot;</span><br>  <span class="hljs-comment"># Include any custom CSS and/or JS files</span><br>  <span class="hljs-comment"># (relative to /static folder)</span><br>  <span class="hljs-attr">custom_css</span> = [<span class="hljs-string">&quot;css/my.css&quot;</span>]<br>  <span class="hljs-attr">custom_js</span> = [<span class="hljs-string">&quot;js/my.js&quot;</span>]<br><br>  <span class="hljs-section">[params.piwikAnalytics]</span><br>    <span class="hljs-attr">siteid</span> = <span class="hljs-number">2</span><br>    <span class="hljs-attr">piwikroot</span> = <span class="hljs-string">&quot;//analytics.example.com/&quot;</span><br><br><span class="hljs-section">[menu]</span><br>  <span class="hljs-comment"># Shown in the side menu.</span><br>  <span class="hljs-section">[[menu.main]]</span><br>    <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;Home&quot;</span><br>    <span class="hljs-attr">pre</span> = <span class="hljs-string">&quot;&lt;i class=&#x27;fa fa-home fa-fw&#x27;&gt;&lt;/i&gt;&quot;</span><br>    <span class="hljs-attr">weight</span> = <span class="hljs-number">1</span><br>    <span class="hljs-attr">identifier</span> = <span class="hljs-string">&quot;home&quot;</span><br>    <span class="hljs-attr">url</span> = <span class="hljs-string">&quot;/&quot;</span><br>  <span class="hljs-section">[[menu.main]]</span><br>    <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;Posts&quot;</span><br>    <span class="hljs-attr">pre</span> = <span class="hljs-string">&quot;&lt;i class=&#x27;fa fa-list fa-fw&#x27;&gt;&lt;/i&gt;&quot;</span><br>    <span class="hljs-attr">weight</span> = <span class="hljs-number">2</span><br>    <span class="hljs-attr">identifier</span> = <span class="hljs-string">&quot;post&quot;</span><br>    <span class="hljs-attr">url</span> = <span class="hljs-string">&quot;/post/&quot;</span><br>  <span class="hljs-section">[[menu.main]]</span><br>    <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;About&quot;</span><br>    <span class="hljs-attr">pre</span> = <span class="hljs-string">&quot;&lt;i class=&#x27;fa fa-user fa-fw&#x27;&gt;&lt;/i&gt;&quot;</span><br>    <span class="hljs-attr">weight</span> = <span class="hljs-number">3</span><br>    <span class="hljs-attr">identifier</span> = <span class="hljs-string">&quot;about&quot;</span><br>    <span class="hljs-attr">url</span> = <span class="hljs-string">&quot;/about/&quot;</span><br>  <span class="hljs-section">[[menu.main]]</span><br>    <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;Contact&quot;</span><br>    <span class="hljs-attr">pre</span> = <span class="hljs-string">&quot;&lt;i class=&#x27;fa fa-phone fa-fw&#x27;&gt;&lt;/i&gt;&quot;</span><br>    <span class="hljs-attr">weight</span> = <span class="hljs-number">4</span><br>    <span class="hljs-attr">url</span> = <span class="hljs-string">&quot;/contact/&quot;</span><br><br><span class="hljs-section">[social]</span><br>  <span class="hljs-comment"># Link your social networking accounts to the side menu</span><br>  <span class="hljs-comment"># by entering your username or ID.</span><br><br>  <span class="hljs-comment"># SNS microblogging</span><br>  <span class="hljs-attr">twitter</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">gnusocial</span> = <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment"># Specify href (e.g. https://quitter.se/yourusername)</span><br>  <span class="hljs-attr">facebook</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">googleplus</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">weibo</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">tumblr</span> = <span class="hljs-string">&quot;*&quot;</span><br><br>  <span class="hljs-comment"># SNS photo/video sharing</span><br>  <span class="hljs-attr">instagram</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">flickr</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">photo500px</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">pinterest</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">youtube</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">vimeo</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">vine</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">slideshare</span> = <span class="hljs-string">&quot;*&quot;</span><br><br>  <span class="hljs-comment"># SNS career oriented</span><br>  <span class="hljs-attr">linkedin</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">xing</span> = <span class="hljs-string">&quot;*&quot;</span><br><br>  <span class="hljs-comment"># SNS news</span><br>  <span class="hljs-attr">reddit</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">hackernews</span> = <span class="hljs-string">&quot;*&quot;</span><br><br>  <span class="hljs-comment"># Techie</span><br>  <span class="hljs-attr">github</span> = <span class="hljs-string">&quot;yoshiharuyamashita&quot;</span><br>  <span class="hljs-attr">gitlab</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">bitbucket</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">stackoverflow</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">serverfault</span> = <span class="hljs-string">&quot;*&quot;</span><br><br>  <span class="hljs-comment"># Gaming</span><br>  <span class="hljs-attr">steam</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">mobygames</span> = <span class="hljs-string">&quot;*&quot;</span><br><br>  <span class="hljs-comment"># Music</span><br>  <span class="hljs-attr">lastfm</span> = <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">discogs</span> = <span class="hljs-string">&quot;*&quot;</span><br><br>  <span class="hljs-comment"># Other</span><br>  <span class="hljs-attr">keybase</span> = <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li>在 <code>content/post</code> 目录下编写 Markdown 文件。</li><li>在 config.toml 文件中的 <code>[menu]</code> 下定义一个在侧边栏中显示的固定页面（例如 about.md)。</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[[menu.main]]</span><br>  <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;About&quot;</span><br>  <span class="hljs-attr">pre</span> = <span class="hljs-string">&quot;&lt;i class=&#x27;fa fa-user fa-fw&#x27;&gt;&lt;/i&gt;&quot;</span><br>  <span class="hljs-attr">weight</span> = <span class="hljs-number">2</span><br>  <span class="hljs-attr">identifier</span> = <span class="hljs-string">&quot;about&quot;</span><br>  <span class="hljs-attr">url</span> = <span class="hljs-string">&quot;/about/&quot;</span><br></code></pre></td></tr></table></figure><ul><li>通过连接到定制的 CSS 文件或 URL 来重写主题：</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[params]</span><br>  <span class="hljs-attr">custom_css</span> = [<span class="hljs-string">&quot;css/my.css&quot;</span>]<br></code></pre></td></tr></table></figure><ul><li>通过链接到定制的 JS 文件或 URL 来添加新的行为：</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[params]</span><br>  <span class="hljs-attr">custom_js</span> = [<span class="hljs-string">&quot;js/my.js&quot;</span>, <span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/zooming/1.4.2/zooming.min.js&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="短代码"><a href="#短代码" class="headerlink" title="短代码"></a>短代码</h2><h3 id="pure-表格"><a href="#pure-表格" class="headerlink" title="pure 表格"></a>pure 表格</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;\&#123;&lt; pure_table<br>  <span class="hljs-string">&quot;columnName1|columnName2|...|columnName99&quot;</span><br>  <span class="hljs-string">&quot;dataValue1|dataValue2|...|dataValue99&quot;</span><br>  <span class="hljs-string">&quot;dataValue1|dataValue2|...|dataValue99&quot;</span><br>  <span class="hljs-string">&quot;dataValue1|dataValue2|...|dataValue99&quot;</span><br>  <span class="hljs-string">&quot;... and so on&quot;</span><br><br>&gt;&#125;&#125;<br></code></pre></td></tr></table></figure><p>其中每个定位参数都被竖线 ‘|’ 分开，产生的 <code>&lt;table&gt;</code> 被赋予了 <code>class=&quot;pure-table pure-table-striped&quot;</code>.<a href="https://purecss.io/tables/">更多</a></p><p><strong>效果</strong></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-variable">&#123;&#123;&lt; pure_table</span><br><span class="hljs-template-variable">  &quot;columnName1|columnName2|...|columnName99&quot;</span><br><span class="hljs-template-variable">  &quot;dataValue1|dataValue2|...|dataValue99&quot;</span><br><span class="hljs-template-variable">  &quot;dataValue1|dataValue2|...|dataValue99&quot;</span><br><span class="hljs-template-variable">  &quot;dataValue1|dataValue2|...|dataValue99&quot;</span><br><span class="hljs-template-variable">  &quot;... and so on&quot;</span><br><span class="hljs-template-variable">&gt;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="流体图像"><a href="#流体图像" class="headerlink" title="流体图像"></a>流体图像</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;\&#123;&lt; fluid_imgs<br>  <span class="hljs-string">&quot;class|src|alt&quot;</span><br>  <span class="hljs-string">&quot;class|src|alt&quot;</span><br>  <span class="hljs-string">&quot;... and so on&quot;</span><br>&gt;&#125;&#125;<br></code></pre></td></tr></table></figure><p>其中每个定位参数都呗竖线 ‘|’ 分开。</p><ul><li><code>class</code>: 指定一个 Pure CSS 单位类名 （<strong>必须</strong>）</li><li><code>src</code>: 指定图像的 URL（<strong>必须</strong>）</li><li><code>alt</code>: 指定图片的替换文字 （可选）</li></ul><p>点击 <a href="http://yoshiharuyamashita.com/post/hugo-shortcode-to-show-multiple-images/">这里</a> 来查看示例。</p><h4 id="class-示例"><a href="#class-示例" class="headerlink" title="class 示例"></a><code>class</code> 示例</h4><p><strong>1. 利用 <code>pure-u-1-3</code> 显示三个图像</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><br>&#123;&#123;&lt; fluid_imgs<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br><br>&gt;&#125;&#125;<br><br>**2. 利用 `pure-u<span class="hljs-string">-1</span><span class="hljs-string">-2</span>` 显示两个图像**<br><br>&#123;&#123;&lt; fluid_imgs<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-2</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-2</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>&gt;&#125;&#125;<br><br>**3. 利用 `pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>` 显示六个图像**<br><br>&#123;&#123;&lt; fluid_imgs<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-3</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>&gt;&#125;&#125;<br><br>**4. 利用 `pure-u<span class="hljs-string">-1</span><span class="hljs-string">-1</span>` 显示一个图像**<br><br>&#123;&#123;&lt; fluid_imgs<br>  &quot;pure-u<span class="hljs-string">-1</span><span class="hljs-string">-1</span>|https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200608154234.png|小狗&quot;<br>&gt;&#125;&#125;<br><br>### 流体图像 （弃用）<br><br>#### Positional<br><br><br>&#123;&#123;% fluid_img &quot;https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200606125754.png&quot; %&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="Named"><a href="#Named" class="headerlink" title="Named"></a>Named</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;% <span class="hljs-name">fluid_img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pure-u-1-2&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/path/to/img&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;img description&quot;</span> %&#125;&#125;</span><br><span class="hljs-template-variable">&#123;&#123;% <span class="hljs-name">fluid_img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pure-u-1-3&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/path/to/img&quot;</span> <span class="hljs-attr">caption</span>=<span class="hljs-string">&quot;img description&quot;</span> %&#125;&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>class</code>, <code>alt</code> and <code>caption</code> are optional.</li><li>See <a href="http://purecss.io/grids/">Pure CSS Grids</a> for possible <code>class</code> values.</li></ul><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><ul><li><a href="//opensource.org/licenses/MIT">MIT</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>翻译</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Google 搜索技巧 2</title>
    <link href="/2021/02/16/google-search-tips-2/"/>
    <url>/2021/02/16/google-search-tips-2/</url>
    
    <content type="html"><![CDATA[<h3 id="﹚运算符语法"><a href="#﹚运算符语法" class="headerlink" title="﹚运算符语法"></a>﹚运算符语法</h3><p>为了让查询结果更加准确，我们可以在其中加入高级运算符。其基本形式为 <code>operator:search_term</code> ，当你使用高级运算符时，请记住下面的原则：</p><ul><li>运算符、冒号和搜索项之间没有空格</li><li>search_term 部分可能是一个单词或者是一个带引号的短语</li><li>可以在高级查找中使用布尔运算符（如：OR，+）和其他特殊字符，但注意不要与 <code>:</code> 的功能发生冲突。</li><li>以 All 开头的运算符通常在每个查询中只能使用一次</li></ul><a id="more"></a><p>下面我们来看一些利用高级运算符查询的例子：</p><ul><li><em>eg</em>. <code>intitle:Google</code> 将得到标题中包含单词 Google 的页面</li><li><em>eg</em>. <code>intitle:&quot;index of&quot;</code> 将得到标题中包含短语 index of 的页面<ul><li>也可以写成 <code>intitle:index.of</code>，因为休止符 <code>.</code> 可以充当任何字符</li></ul></li><li><em>eg</em>. <code>intitle:&quot;index of&quot; private</code> 将得到标题中包含短语 index of 和在任意地方出现单词 privae 的页面。<ul><li>任意地方包括 URL、标题、文本等地</li><li><code>intitle</code> 只对 index of 有效，不包括 private</li></ul></li><li><em>eg</em>. <code>intitle:&quot;index of&quot; &quot;backup files&quot;</code> 将得到标题中包含短语 index of 和在任意地方出现短语 backup file 的页面<ul><li>同上</li></ul></li></ul><h3 id="﹚语法排错"><a href="#﹚语法排错" class="headerlink" title="﹚语法排错"></a>﹚语法排错</h3><p>Google 会提醒我们在使用高级运算符时犯的语法错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">小提示： 仅限搜索简体中文结果。您可以在设置中指定搜索语言<br></code></pre></td></tr></table></figure><p>当然，有时候 Google 也会无能为力</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">找不到和您查询的“allintitle:food inurl:food”相符的内容或信息。</span><br><br>建议：<br><br>• 请检查输入字词有无错误。<br>• 请尝试其他查询词。<br>• 请改用较常见的字词。<br>• 请减少查询字词的数量。<br></code></pre></td></tr></table></figure><p>有时候 Google 没有识别出语法错误，依然会尝试搜索。当你发现搜索结果页中你输入的运算符被以粗体显示，那很可能就是你犯了语法错误，因为 Google 把他们当成了关键词。</p><h3 id="﹚高级运算符"><a href="#﹚高级运算符" class="headerlink" title="﹚高级运算符"></a>﹚高级运算符</h3><h4 id="◈-intitle-和-allintitle：在页面标题搜索"><a href="#◈-intitle-和-allintitle：在页面标题搜索" class="headerlink" title="◈ intitle 和 allintitle：在页面标题搜索"></a>◈ <code>intitle</code> 和 <code>allintitle</code>：在页面标题搜索</h4><p>一个页面的标题大多显示在浏览器的顶部，技术上，它可能是一份 HTML 文档中的 TITLE 标签部分。</p><p><strong>二者区别</strong>：</p><ul><li><code>intitle</code> 遵守前面提到的语法规则<ul><li><code>intitle:&quot;index of&quot; &quot;backup files&quot;</code> 将得到标题中包含短语 index of 和在任意地方出现短语 backup file 的页面</li></ul></li><li><code>allintitle</code> 的作用范围则包括它后边接的全部字符，不要和其他高级运算符混用</li></ul><p>建议使用多个 <code>intitle</code> 代替 <code>allintitle</code>，且 <code>intitle</code> 与其他运算符混合使用效果佳</p><h4 id="◈-allintext-在页面文本中查找字符串"><a href="#◈-allintext-在页面文本中查找字符串" class="headerlink" title="◈ allintext 在页面文本中查找字符串"></a>◈ <code>allintext</code> 在页面文本中查找字符串</h4><p><code>allintext</code> 的作用可以概括为「在一个网页文本中找到一个搜索项」或者「除了在标题、URL 和链接里以外，在其他任何地方找到这个字符串」。</p><p>由于其作用范围包括它后边的每一个字符，所以 <strong><code>allintext</code> 运算符最好不要和别的高级运算符混用，其实就最好别用这个运算符了</strong>。</p><h4 id="◈-inurl-和-allinurl-在一个-URL-中查找文本"><a href="#◈-inurl-和-allinurl-在一个-URL-中查找文本" class="headerlink" title="◈ inurl 和 allinurl 在一个 URL 中查找文本"></a>◈ <code>inurl</code> 和 <code>allinurl</code> 在一个 URL 中查找文本</h4><ul><li>同样：建议使用多个 <code>inurl</code> 代替 <code>allinurl</code></li></ul><h5 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h5><p>URL 即统一资源定位器（Uniform Resource Locatir）的缩写，一个 URL 就是一个网页的地址。一个普通的 URL 类似俩面这样：</p><pre><code>https://blog.solidspoon.xyz/54/KaPianLiu/KaPianLiu.html</code></pre><ul><li>其开头通常是 http、ftp 等协议<ul><li><em>eg</em>. <code>http://</code>、<code>https://</code>、<code>ftp://</code>。</li></ul></li><li>协议后面是一个路径名地址<ul><li><em>eg</em>. <code>blog.solidspoon.xyz/54/KaPianLiu/</code></li></ul></li><li>最后是一个可选的路径名<ul><li><em>eg</em>. <code>KaPianLiu.html</code></li></ul></li></ul><p>所以上面示例 URL 的含义：<code>http</code> 表示这基本是一个 web 服务器，服务器位于 <code>blog.solidspoon.xyz</code>，被请求的文件 <code>KaPianLiu.html</code> 能在服务器的 <code>/54/KaPianLiu/</code> 目录里找到。</p><h4 id="◈-site-把搜索精确到特定的网站"><a href="#◈-site-把搜索精确到特定的网站" class="headerlink" title="◈ site 把搜索精确到特定的网站"></a>◈ <code>site</code> 把搜索精确到特定的网站</h4><ul><li>使用 <code>site</code> 可以搜索位于一个特定服务器或者一个特定域名里的页面。Google 会从右向左读取 Web 服务器的名字<ul><li><em>eg</em>. <code>site:google.com</code> 会找出所有结尾是 google.com 的网站</li></ul></li><li>如果你建设了自己的网站而不确定是否被搜索引擎收录的话，就用这条命令吧，如果显示如下信息，那你最好去搜索引擎提交一下你的网站。</li><li>可以与其他运算符或搜索项一起使用：是</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">找不到和您查询的“site:shanlin257.coding.<span class="hljs-keyword">me</span>”相符的内容或信息。<br><br>建议：<br><br>• 请检查输入字词有无错误。<br>• 请尝试其他查询词。<br>• 请改用较常见的字词。<br></code></pre></td></tr></table></figure><h4 id="◈-filetype-搜索特定类型的文件"><a href="#◈-filetype-搜索特定类型的文件" class="headerlink" title="◈ filetype 搜索特定类型的文件"></a>◈ <code>filetype</code> 搜索特定类型的文件</h4><ul><li>Google 可以搜索很多不同类型的文件，例如 PDF、微软 Office 文档等。<code>filetype</code> 能够搜索以特定文件名扩展名结尾的页面。</li><li>可以与其他运算符和搜索项一起使用：是</li></ul><p><em>eg</em>. <code>filetype:doc pirate</code> 点击搜索结果会直接下载文件</p><h4 id="◈-link-搜索一个网页的连接"><a href="#◈-link-搜索一个网页的连接" class="headerlink" title="◈ link 搜索一个网页的连接"></a>◈ <code>link</code> 搜索一个网页的连接</h4><ul><li><code>link</code> 后接一个 URL 或服务器名，它会搜索那些连接到这个 URL 或服务器的网页<ul><li><em>eg</em>. <code>link:https://mp.weixin.qq.com</code> 会搜索到很多涉及公众号的网页</li></ul></li><li>如果语法错误 <em>eg</em>. <code>link:linux</code> Google 会将他作为一个带有冒号的短语来搜索，正确形式为 <code>link:linux.org</code></li><li>可以与其他运算符或搜索项一起使用：否</li></ul><h4 id="◈-inanchor-在连接描述性文字中寻找文本"><a href="#◈-inanchor-在连接描述性文字中寻找文本" class="headerlink" title="◈ inanchor 在连接描述性文字中寻找文本"></a>◈ <code>inanchor</code> 在连接描述性文字中寻找文本</h4><p><em>eg</em>. 在Google 搜索 <code>inanchor:点击这里</code> 返回的结果页面本身并不一定包含”点击这里”这四个字，而是这些页面里的链接锚文字中出现了”点击这里”这四个字。</p><p>我用 HTML 解释一下：</p><pre><code>&lt;a  href=&quot;blog.solidspoon.xyz&quot;&gt;点击这里&lt;/a&gt;</code></pre><h4 id="◈-cache-显示页面缓存文本"><a href="#◈-cache-显示页面缓存文本" class="headerlink" title="◈ cache 显示页面缓存文本"></a>◈ <code>cache</code> 显示页面缓存文本</h4><p>一个网站必须被搜索引擎爬取过后才会被收录，而搜索引擎在爬取的时候会保存网页快照，即搜索结果页显示的网站摘要。由于互联网上的网站太多了，所以快照不会实时更新，如果你想查看那个版本，就用这个命令把。</p><p><em>eg</em>. <code>cache:blog.solidspoon.xyz</code> 会返回 Google 上一次爬取我的博客时的快照。</p><h4 id="◈-numrange-搜索一个数字"><a href="#◈-numrange-搜索一个数字" class="headerlink" title="◈ numrange 搜索一个数字"></a>◈ <code>numrange</code> 搜索一个数字</h4><ul><li><code>numrange</code> 命令可以寻找某一范围内的数字,当这个运算符被不坏好意的 Google 骇客利用时，它强大又危险。</li><li>可以与其他运算符或搜索项一起使用：是</li></ul><p><em>eg</em>. <code>numrange:13-15</code> 会返回含有 13、14 或 15 的网页，你也可以把这个运算符简写为 <code>13..15</code></p><h4 id="◈-daterange-搜索在特定日期范围内被抓取过的页面"><a href="#◈-daterange-搜索在特定日期范围内被抓取过的页面" class="headerlink" title="◈ daterange 搜索在特定日期范围内被抓取过的页面"></a>◈ <code>daterange</code> 搜索在特定日期范围内被抓取过的页面</h4><ul><li>一个网页每被抓取一次，这个日期就会改变</li><li><code>daterange</code> 接受一个日期范围，必须符合 Julian dates 格式，即一个日期自公元前 4713 年 1 月 1 日起经过的天数。<ul><li><em>eg</em>. <code>daterange:2452164-2452164 &quot;osma bin laden&quot;</code> 会返回被 Google 在 2001 年 9 月 11 日索引过并包含短语 Osma Bin Laden 的网页 </li></ul></li><li>可以直接在 Google 高级搜索页面 <code>https://www.google.com/advanced_search</code> 限制日期</li><li>可以通过修改 URL 来限制日期<ul><li><em>eg</em>. <code>https://www.google.com/search?q=apple&amp;as_qdr=m3</code> 会返回过去三个月内被 Google 抓取过的关于 apple 的网页</li></ul></li><li>可以与其他运算符或搜索项一起使用：必须</li></ul><h4 id="◈-info-显示-Google-的总结信息"><a href="#◈-info-显示-Google-的总结信息" class="headerlink" title="◈ info 显示 Google 的总结信息"></a>◈ <code>info</code> 显示 Google 的总结信息</h4><p>实测还是推荐直接搜索网址比较好</p><ul><li>可以与其他运算符或搜索项一起使用：是</li></ul><h4 id="◈-related-显示相关站点"><a href="#◈-related-显示相关站点" class="headerlink" title="◈ related 显示相关站点"></a>◈ <code>related</code> 显示相关站点</h4><ul><li>其后接一个完整的 URL 或主机名</li><li>与搜索结果页面上的「类似网页」或者高级搜索中的「查找类似网页或相应网页」功能相同。</li></ul><h4 id="◈-stocks-显示股票信息"><a href="#◈-stocks-显示股票信息" class="headerlink" title="◈ stocks 显示股票信息"></a>◈ <code>stocks</code> 显示股票信息</h4><ul><li>参数为一个有效股票的缩写<ul><li><em>eg</em>. <code>stocks:csc</code></li></ul></li><li>可以与其他运算符或搜索项一起使用：否</li></ul><h4 id="◈-defone-显示一个术语的定义"><a href="#◈-defone-显示一个术语的定义" class="headerlink" title="◈ defone 显示一个术语的定义"></a>◈ <code>defone</code> 显示一个术语的定义</h4><p>-参数可能是一个单词或短语</p><h3 id="﹚总结"><a href="#﹚总结" class="headerlink" title="﹚总结"></a>﹚总结</h3><ul><li>除了修改 URL，你还可以使用高级运算符进行查询。高级运算符是 Google 骇客手中强有力的武器。所以你也应该基于这一武器保护你的信息安全。</li><li>应该避开 all 开头的运算符组合使用</li><li><code>intitle</code>，<code>inurl</code>，<code>link</code> 分别在标题，URL，网页连接中寻找字符串</li><li><code>allintext</code> 在文档文本中寻找，它看起来最没用</li><li><code>filetype</code> 和 <code>site</code> 能够搜索特定的网站或特定的文件类型</li><li><code>daterange</code> 搜索在特定时间框架内被索引过的文件</li><li><code>cache</code>、<code>info</code>、<code>related</code> 可以搜索 Google 提供的网页快照，信息摘要，相关网站列表</li><li><code>stocks</code> 查询某个股票信息</li><li><code>define</code> 返回一个单词或简单短语的定义</li></ul>]]></content>
    
    
    <categories>
      
      <category>Google 搜索技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>效率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google 搜索技巧 1</title>
    <link href="/2021/02/16/Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A71/"/>
    <url>/2021/02/16/Google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A71/</url>
    
    <content type="html"><![CDATA[<h3 id="几个网址"><a href="#几个网址" class="headerlink" title="几个网址"></a>几个网址</h3><p>可以通过搜索关键字来访问这些页面</p><ol><li><strong>Google 主页面，大多数搜索的入口</strong><ul><li><a href="https://www.google.com" target="blank">https://www.google.com</a></li></ul></li><li><strong>Google 网上论坛</strong><ul><li><a href="https://groups.google.com" target="blank">https://www.google.com</a></li></ul></li><li><strong>用 Google 搜索图片和图表</strong><ul><li><a href="https://images.google.com" target="blank">https://www.google.com</a></li></ul></li><li><strong>从 Google 搜索视频文件</strong><ul><li><a href="https://video.google.com" target="blank">https://www.google.com</a></li></ul></li><li><strong>高级搜索列表</strong><ul><li><a href="http://www.google.com/advanced_search" target="blank">https://www.google.com</a></li></ul></li><li><strong>Google 搜索设置</strong><ul><li><a href="https://www.google.com/preferences" target="blank">https://www.google.com</a></li></ul></li><li><strong>Google 翻译</strong><ul><li><a href="https://translate.google.com" target="blank">https://www.google.com</a></li></ul></li></ol><a id="more"></a><h3 id="Google-搜索的基本规则"><a href="#Google-搜索的基本规则" class="headerlink" title="Google 搜索的基本规则"></a>Google 搜索的基本规则</h3><ol><li> Google 查询不区分大小写</li><li>Google 通配符<ul><li><strong><code>*</code></strong> 代表一个单词</li></ul></li><li>Google 在一个搜索中会忽略某些通用单词、字母和单个数字<ul><li><em>eg</em>.  where 和 how 在某些时候会被忽略</li></ul></li><li> Google 搜索最多限制 32 个单词（包含搜索项和高级运算符）</li></ol><h3 id="基础搜索"><a href="#基础搜索" class="headerlink" title="基础搜索"></a>基础搜索</h3><ol><li><strong>关键词搜索</strong><ul><li><em>eg</em>. Hacker</li><li><em>eg</em>. FBI hacker Mitnick</li><li><em>eg</em>. Mad hacker dpak</li></ul></li><li><strong>短语搜索</strong><ul><li>短语是包含在双引号中的一组的单词，Google 会严格按照你给定的顺序对短语中所有单词进行搜索<ul><li><em>eg</em>. “Google hacker”</li><li><em>eg</em>. “adult huor”</li><li><em>eg</em>. “Carolina gets pwnt”</li></ul></li></ul></li></ol><h3 id="使用布尔运算符和特殊字符搜索"><a href="#使用布尔运算符和特殊字符搜索" class="headerlink" title="使用布尔运算符和特殊字符搜索"></a>使用布尔运算符和特殊字符搜索</h3><p>Google 的布尔运算符包括 <code>AND</code>, <code>OR</code> 和 <code>NOT</code></p><ol><li><strong><code>AND</code> &amp; <code>+</code>：强制搜索某个单词</strong><ul><li>Google 默认会自动搜索你查询的所有元素，所以 <code>AND</code> 在 Google 中通常是多余的</li><li>由于 Google 会忽略一些常用词，如果你要强制搜索他们，可用 <code>+</code>，其后不加空格<ul><li><em>eg</em>. +and just </li></ul></li></ul></li><li><strong><code>NOT</code> &amp; <code>-</code>：把一个单词排除在搜索之外</strong><ul><li>用 <code>-</code> 可以缩小搜索范围,其后不加空格<ul><li><em>eg</em>. hacker -jacket</li></ul></li></ul></li><li><strong><code>OR</code> &amp; <code>|</code>：查询只包含其中一个的</strong><ul><li><em>eg</em>. “evil cybercriminal” OR hacker</li></ul></li></ol><h3 id="Google-URL"><a href="#Google-URL" class="headerlink" title="Google URL"></a>Google URL</h3><ul><li>Google URL 就是一个指向搜索结果页面的连接，它是动态的，每次访问的结果可能不同。每个 Google 查询都能表示成一个这样的 url，即地址栏显示的那串字符。<ul><li><p><em>eg</em>. 搜索 <u>hacking to zhe gate</u></p><p>  <code>https://www.google.com/search?q=hacking+to+zhe+gate&amp;oq=hacking+to+zhe+gate&amp;...</code> 此处省略部分字符</p></li><li><p>其中 <code>www.google.com/search</code> 是 Google 搜索脚本的位置，<code>?</code> 表示紧接着的参数将要被传递到搜索脚本中去</p></li><li><p>参数之间通过与号 <code>&amp;</code> 分离,由变量（Variable）组成，这个变量带着 <code>=</code> 以及赋给它的值</p><p>  <code>www.google.com/search?variable1=value&amp;variable2=value</code></p></li><li><p>如果搜索中包含特殊字符，它们会被表示成<strong>等价的十六进制编码</strong></p></li></ul></li><li>你可以直接修改 URL 来搜索你想要的东西或者通过访问 Google 高级搜索界面 <code>www.google.com/advanced_search</code> 来设置各种参数</li></ul><h4 id="关于-URL-编码"><a href="#关于-URL-编码" class="headerlink" title="关于 URL 编码"></a>关于 URL 编码</h4><ul><li>通常如果一样东西需要编码，说明这样东西并不适合传输。原因多种多样，如 Size 过大，包含隐私数据，<strong>对于Url来说，之所以要进行编码，是因为Url中有些字符会引起歧义</strong>。</li><li>URL 编码的原则就是使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。<ul><li>Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、<code>-_.~</code> 4 个特殊字符以及所有保留字符。</li></ul></li><li>URL 的编码方式非常简单，使用 % 百分号加上两位十六进制字符（因此也称百分号编码），Url编码默认使用的字符集是 US-ASCII <ul><li><em>eg</em>. <code>空格</code> » <code>%20</code></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Google 简单的外表下提供了很多强大的功能选项，你可以用它来实现强有力的搜索。你可以搜索很多类型的内容，比如 Web 页面、新闻论坛、图片、视频等等。可以用 <code>-</code>, <code>|</code> 等代替布尔运算符，Google 自动包含一个搜索里的所有搜索项，所以 AND 运算符通常是被忽略的。可以通过访问高级搜索页面填写高级搜索项，可以使用高级搜索来快速缩小搜索范围。随着经验的增多，你就能更快的找到你想要的。</p>]]></content>
    
    
    <categories>
      
      <category>Google 搜索技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>效率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法-第四版》答案系列-1-3 链表练习</title>
    <link href="/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-3%E9%93%BE%E8%A1%A8%E7%BB%83%E4%B9%A0/"/>
    <url>/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-3%E9%93%BE%E8%A1%A8%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近开始学习《算法-第四版》一书，将我自己做的书后习题分享给大家，本篇是这一系列的第二篇，包含了书上&lt;1.3 背包、队列和栈&gt;的习题的练习部分,本篇习题位于 P101 ~ P107 ，如有错误，还请指正。</p></blockquote><blockquote><p>本篇答案中部分 java 代码用到了书中的包，如需使用请去书中配套网站安装。</p></blockquote><a id="more"></a><p>以下的答案在电脑端查看可以显示目录</p><h5 id="1-3-18-假设-x-是一条链表的某个节点且不是尾节点。下面这条语句的效果是什么？"><a href="#1-3-18-假设-x-是一条链表的某个节点且不是尾节点。下面这条语句的效果是什么？" class="headerlink" title="1.3.18 假设 x 是一条链表的某个节点且不是尾节点。下面这条语句的效果是什么？"></a>1.3.18 假设 x 是一条链表的某个节点且不是尾节点。下面这条语句的效果是什么？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">x.next = x.next.next;<br></code></pre></td></tr></table></figure><p>答：删除 x 的后续节点。</p><h5 id="1-3-19-给出一段代码，删除链表的尾节点，其中链表的首节点为-first。"><a href="#1-3-19-给出一段代码，删除链表的尾节点，其中链表的首节点为-first。" class="headerlink" title="1.3.19 给出一段代码，删除链表的尾节点，其中链表的首节点为 first。"></a>1.3.19 给出一段代码，删除链表的尾节点，其中链表的首节点为 first。</h5><h5 id="1-3-20-编写一个方法-delete-，接受一个-int-参数-k，删除链表的第-k-个元素（如果它存在的话）。"><a href="#1-3-20-编写一个方法-delete-，接受一个-int-参数-k，删除链表的第-k-个元素（如果它存在的话）。" class="headerlink" title="1.3.20 编写一个方法 delete()，接受一个 int 参数 k，删除链表的第 k 个元素（如果它存在的话）。"></a>1.3.20 编写一个方法 <code>delete()</code>，接受一个 int 参数 k，删除链表的第 k 个元素（如果它存在的话）。</h5><h5 id="1-3-21-编写一个方法-find-，接受一条链表和一个字符串-key-作为参数。如果链表中的某个节点的-item-域的值为-key，-则方法返回-truue，否则返回-false。"><a href="#1-3-21-编写一个方法-find-，接受一条链表和一个字符串-key-作为参数。如果链表中的某个节点的-item-域的值为-key，-则方法返回-truue，否则返回-false。" class="headerlink" title="1.3.21 编写一个方法 find()，接受一条链表和一个字符串 key 作为参数。如果链表中的某个节点的 item 域的值为 key， 则方法返回 truue，否则返回 false。"></a>1.3.21 编写一个方法 <code>find()</code>，接受一条链表和一个字符串 key 作为参数。如果链表中的某个节点的 item 域的值为 key， 则方法返回 truue，否则返回 false。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdOut;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">algs1v3v18</span>&lt;<span class="hljs-title">Item</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">Item</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> Node first = <span class="hljs-keyword">new</span> Node();<br>    <span class="hljs-keyword">private</span> Node last = first;<br>    <span class="hljs-keyword">int</span> N = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>        Item item;<br>        Node next;        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> N==<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Item item)</span></span>&#123;<br>        Node oldlast = last;<br>        last = <span class="hljs-keyword">new</span> Node();<br>        last.item = item;<br>        oldlast.next = last;<br>        N++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteEnd</span><span class="hljs-params">()</span></span>&#123;<br>        Node end = first;<br>        <span class="hljs-keyword">while</span>(end.next.next != <span class="hljs-keyword">null</span>)&#123;<br>            end = end.next;<br>        &#125;<br>        last = end;<br>        last.next = <span class="hljs-keyword">null</span>;<br>        N--;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (k &lt; N)&#123;<br>            Node here = first;<br>             <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; k; i++)&#123;<br>                here = here.next;<br>             &#125;<br>             here.next = here.next.next;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == N)&#123;<br>            deleteEnd();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">find</span><span class="hljs-params">(Item st)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (Node x = first.next; x != <span class="hljs-keyword">null</span>; x = x.next)&#123;<br>            <span class="hljs-keyword">if</span> (x.item.equals(st))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;Item&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ListIterator();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Item</span>&gt;</span>&#123;<br>        <span class="hljs-keyword">private</span> Node current = first.next;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> current != <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            Item item = current.item;<br>            current = current.next;<br>            <span class="hljs-keyword">return</span> item;<br>&#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        algs1v3v18&lt;Integer&gt; list = <span class="hljs-keyword">new</span> algs1v3v18&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;<br>            list.add(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c : list)&#123;<br>            StdOut.print(c + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        StdOut.println();<br><br>        list.deleteEnd();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c : list)&#123;<br>            StdOut.print(c + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        StdOut.println();<br><br>        list.delete(<span class="hljs-number">9</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c : list)&#123;<br>            StdOut.print(c + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        StdOut.println();<br><br>        StdOut.println(list.find(<span class="hljs-number">2</span>) + <span class="hljs-string">&quot; &quot;</span> + list.find(<span class="hljs-number">11</span>));<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-22-假设-x-是一条链表中的某个节点，下面这段代码做了什么？"><a href="#1-3-22-假设-x-是一条链表中的某个节点，下面这段代码做了什么？" class="headerlink" title="1.3.22 假设 x 是一条链表中的某个节点，下面这段代码做了什么？"></a>1.3.22 假设 x 是一条链表中的某个节点，下面这段代码做了什么？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">t.next = x.next;<br>x.next = t;<br></code></pre></td></tr></table></figure><p>答：插入节点 t 并使它成为 x 的后续节点。</p><h5 id="1-3-23-为什么下面这段代码和上一道题中的代码效果不同？"><a href="#1-3-23-为什么下面这段代码和上一道题中的代码效果不同？" class="headerlink" title="1.3.23 为什么下面这段代码和上一道题中的代码效果不同？"></a>1.3.23 为什么下面这段代码和上一道题中的代码效果不同？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">x.net = t;<br>t.next = x.next;<br></code></pre></td></tr></table></figure><p>答：在更新 <code>t.next</code> 时，<code>x.next</code> 已经不再指向 x 的后续节点，而是指向 t 本身！</p><h5 id="1-3-24-编写一个方法"><a href="#1-3-24-编写一个方法" class="headerlink" title="1.3.24 编写一个方法"></a>1.3.24 编写一个方法</h5>]]></content>
    
    
    <categories>
      
      <category>算法第四版</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法-第四版》答案系列-1.3 练习篇</title>
    <link href="/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-3%E7%BB%83%E4%B9%A0%E7%AF%87/"/>
    <url>/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-3%E7%BB%83%E4%B9%A0%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近开始学习《算法-第四版》一书，将我自己做的书后习题分享给大家，本篇是这一系列的第二篇，包含了书上&lt;1.3 背包、队列和栈&gt;的习题的练习部分,本篇习题位于 P101 ~ P107 ，如有错误，还请指正。</p></blockquote><blockquote><p>本篇答案中部分 java 代码用到了书中的包，如需使用请去书中配套网站安装。</p></blockquote><a id="more"></a><p>以下的答案在电脑端查看可以显示目录</p><h5 id="为-FixedCapacityStackOfStrings-添加一个方法-isFull-。"><a href="#为-FixedCapacityStackOfStrings-添加一个方法-isFull-。" class="headerlink" title="为 FixedCapacityStackOfStrings 添加一个方法 isFull()。"></a>为 <code>FixedCapacityStackOfStrings</code> 添加一个方法 <code>isFull()</code>。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> N == a.length;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-2-给定以下输入，java-Stack-的输出是什么"><a href="#1-3-2-给定以下输入，java-Stack-的输出是什么" class="headerlink" title="1.3.2 给定以下输入，java Stack 的输出是什么?"></a>1.3.2 给定以下输入，<code>java Stack</code> 的输出是什么?</h5><pre><code>was best  times of the was the it </code></pre><h5 id="1-3-3-假设某个用例程序会进行一系列入栈和出栈的混合栈操作。入栈操作会将证书-0-到-9-按顺序压入栈；出栈操作会打印出返回值。下面哪种序列是不可能产生的？"><a href="#1-3-3-假设某个用例程序会进行一系列入栈和出栈的混合栈操作。入栈操作会将证书-0-到-9-按顺序压入栈；出栈操作会打印出返回值。下面哪种序列是不可能产生的？" class="headerlink" title="1.3.3 假设某个用例程序会进行一系列入栈和出栈的混合栈操作。入栈操作会将证书 0 到 9 按顺序压入栈；出栈操作会打印出返回值。下面哪种序列是不可能产生的？"></a>1.3.3 假设某个用例程序会进行一系列入栈和出栈的混合栈操作。入栈操作会将证书 0 到 9 按顺序压入栈；出栈操作会打印出返回值。下面哪种序列是不可能产生的？</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>. <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">b</span>. <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">c</span>. <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">d</span>. <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">e</span>. <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">f</span>. <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">8</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">g</span>. <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">h</span>. <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>编写以下程序帮助我们判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q133</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        StdOut.println(<span class="hljs-string">&quot;请输入判断的数据：&quot;</span>)；<br>        <span class="hljs-keyword">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">//选项数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            num[i] = StdIn.readInt();<br>        &#125;<br>        Stack&lt;Integer&gt; detection = <span class="hljs-keyword">new</span> Stack&lt;Integer&gt;(); <span class="hljs-comment">//检测栈</span><br>        <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">//结果数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>, a = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span> (i != num[n])&#123;<br>                detection.push(i);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">do</span> &#123;<br>                    ans[a] = num[n];<br>                    a++;<br>                    n++;<br>                    <span class="hljs-keyword">if</span> (!detection.isEmpty())&#123;<br>                        c = detection.pop();<br>                        detection.push(c);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">while</span> (!detection.isEmpty() &amp;&amp; detection.pop() == num[n]);<br>                <span class="hljs-keyword">if</span> (!detection.isEmpty())&#123;<br>                    detection.push(c);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>; p &lt; <span class="hljs-number">10</span>; p++ )&#123;<br>            <span class="hljs-keyword">if</span> (ans[p] != num[p])&#123;<br>                s = <span class="hljs-number">1</span>;<br>                StdOut.print(<span class="hljs-string">&quot;false&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>)&#123;<br>            StdOut.print(<span class="hljs-string">&quot;true&quot;</span>);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">运行结果：</span><br><span class="hljs-attr">a:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">b:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">c:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">d:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">e:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">f:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">g:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">h:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h5 id="1-3-4-编写一个-Stack-的用例-Parehtheses-从标准输入中读取文本流并使用栈判定其中的括号是否配对完整。例如，对于-程序应该打印-true-对于-则应打印-false。"><a href="#1-3-4-编写一个-Stack-的用例-Parehtheses-从标准输入中读取文本流并使用栈判定其中的括号是否配对完整。例如，对于-程序应该打印-true-对于-则应打印-false。" class="headerlink" title="1.3.4 编写一个 Stack 的用例 Parehtheses 从标准输入中读取文本流并使用栈判定其中的括号是否配对完整。例如，对于 [()]{}{[()()]()} 程序应该打印 true 对于 [(]) 则应打印 false。"></a>1.3.4 编写一个 <code>Stack</code> 的用例 <code>Parehtheses</code> 从标准输入中读取文本流并使用栈判定其中的括号是否配对完整。例如，对于 <code>[()]&#123;&#125;&#123;[()()]()&#125;</code> 程序应该打印 <code>true</code> 对于 <code>[(])</code> 则应打印 <code>false</code>。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.Stack;<br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdIn;<br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdOut;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q134</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Stack&lt;String&gt; sta = <span class="hljs-keyword">new</span> Stack&lt;String&gt;();<br>        <span class="hljs-keyword">boolean</span> ans = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">while</span> (!StdIn.isEmpty())&#123;<br>            <span class="hljs-comment">//读取字符串，如果是左括号则压入栈</span><br>            <span class="hljs-comment">//括号之间以空格分开</span><br>            String s = StdIn.readString();<br>            <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;(&quot;</span>))&#123;<br>                sta.push(s);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;&#123;&quot;</span>))&#123;<br>                sta.push(s);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;[&quot;</span>))&#123;<br>                sta.push(s);<br>                <span class="hljs-comment">// 如果是右括号则弹出一个运算符</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;]&quot;</span>))&#123;<br>                ans = s.equals(sta.pop());<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;&#125;&quot;</span>))&#123;<br>                ans = s.equals(sta.pop());<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;)&quot;</span>))&#123;<br>                ans = s.equals(sta.pop());<br>            &#125;<br>        &#125;<br>        StdOut.print(ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-5-当-N-为-50-时下面段代码会打印什么？从较高抽象层次描述给定正整数-N-时这段代码的行为。"><a href="#1-3-5-当-N-为-50-时下面段代码会打印什么？从较高抽象层次描述给定正整数-N-时这段代码的行为。" class="headerlink" title="1.3.5 当 N 为 50 时下面段代码会打印什么？从较高抽象层次描述给定正整数 N 时这段代码的行为。"></a>1.3.5 当 N 为 50 时下面段代码会打印什么？从较高抽象层次描述给定正整数 N 时这段代码的行为。</h5><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">Stack</span>&lt;<span class="hljs-built_in">Integer</span>&gt; <span class="hljs-built_in">stack</span> = <span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;<span class="hljs-built_in">Integer</span>&gt;;<br><span class="hljs-keyword">while</span> (N &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-built_in">stack</span>.push(N % <span class="hljs-number">2</span>);<br>    N = N / <span class="hljs-number">2</span>；<br>&#125;<br>for (int d : <span class="hljs-built_in">stack</span>)&#123;<br>    StdOut.println();<br>&#125;<br></code></pre></td></tr></table></figure><p>答：打印 N 的二进制表示（当 N 为 50 时打印 110010）。</p><h5 id="1-3-6-下面这段代码对队列-q-进行了什么操作？"><a href="#1-3-6-下面这段代码对队列-q-进行了什么操作？" class="headerlink" title="1.3.6 下面这段代码对队列 q 进行了什么操作？"></a>1.3.6 下面这段代码对队列 q 进行了什么操作？</h5><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">Stack</span>&lt;<span class="hljs-built_in">String</span>&gt; <span class="hljs-built_in">stack</span> = <span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;<span class="hljs-built_in">String</span>&gt;();<br><span class="hljs-keyword">while</span> (!q.isEmpty())&#123;<br>    <span class="hljs-built_in">stack</span>.push(q.dequeue());<br>&#125;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">stack</span>.isEmpty())&#123;<br>    q.enqueue(<span class="hljs-built_in">stack</span>.pop());<br>&#125;<br></code></pre></td></tr></table></figure><p>答：对队列 q 进行了前后颠倒位置的操作。</p><h5 id="1-3-7-为-Stack-添加一个方法-peek-，返回栈中最近添加的元素（而不弹出它）。"><a href="#1-3-7-为-Stack-添加一个方法-peek-，返回栈中最近添加的元素（而不弹出它）。" class="headerlink" title="1.3.7 为 Stack 添加一个方法 peek()，返回栈中最近添加的元素（而不弹出它）。"></a>1.3.7 为 <code>Stack</code> 添加一个方法 <code>peek()</code>，返回栈中最近添加的元素（而不弹出它）。</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> Item <span class="hljs-function"><span class="hljs-title">peek</span>(<span class="hljs-params"></span>)</span>&#123;<br>    Item item = a[N];<br>    <span class="hljs-keyword">return</span> item;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-8-给定以下输入，给出-DoublingStackOfStrings-的数组的内容和大小。"><a href="#1-3-8-给定以下输入，给出-DoublingStackOfStrings-的数组的内容和大小。" class="headerlink" title="1.3.8 给定以下输入，给出 DoublingStackOfStrings 的数组的内容和大小。"></a>1.3.8 给定以下输入，给出 <code>DoublingStackOfStrings</code> 的数组的内容和大小。</h5><pre><code>it was - the best - of times - - - it was - the - -</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment">*  Compilation:  javac DoublingStackOfStrings.java</span><br><span class="hljs-comment">*  Execution:    java DoublingStackOfStrings</span><br><span class="hljs-comment">*  </span><br><span class="hljs-comment">*  Stack of strings implementation with an array.</span><br><span class="hljs-comment">*  Resizes by doubling and halving.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*************************************************************************/</span><br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.NoSuchElementException;<br><br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdIn;<br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdOut;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoublingStackOfStrings</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> String[] a;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> N;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoublingStackOfStrings</span><span class="hljs-params">()</span> </span>&#123;<br>        a = <span class="hljs-keyword">new</span> String[<span class="hljs-number">2</span>];<br>        N = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// is the stack empty?</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-keyword">return</span> (N == <span class="hljs-number">0</span>);  &#125;<br>    <br>    <span class="hljs-comment">// resize the underlying array holding the elements</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>        String[] temp = <span class="hljs-keyword">new</span> String[capacity];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            temp[i] = a[i];<br>        &#125;<br>        a = temp;<br>    &#125;<br>    <br>    <span class="hljs-comment">// push a new item onto the stack</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(String item)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (N == a.length) resize(<span class="hljs-number">2</span>*a.length);<br>        a[N++] = item;<br>    &#125;<br>    <br>    <span class="hljs-comment">// delete and return the item most recently added</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Stack underflow error&quot;</span>);<br>        &#125;<br>        String item = a[--N];<br>        a[N] = <span class="hljs-keyword">null</span>;  <span class="hljs-comment">// to avoid loitering</span><br>        <span class="hljs-keyword">if</span> (N &gt; <span class="hljs-number">0</span> &amp;&amp; N == a.length/<span class="hljs-number">4</span>) resize(a.length/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> item;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;String&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReverseArrayIterator();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <br>    <span class="hljs-comment">// an iterator, doesn&#x27;t implement remove() since it&#x27;s optional</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseArrayIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> i = N;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> i &gt; <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnsupportedOperationException();<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (!hasNext()) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>            <span class="hljs-keyword">return</span> a[--i];<br>        &#125;<br><br>    &#125;<br>    <br>    <span class="hljs-comment">// test client</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        DoublingStackOfStrings s = <span class="hljs-keyword">new</span> DoublingStackOfStrings();<br>        <span class="hljs-keyword">while</span> (!StdIn.isEmpty()) &#123;<br>            String item = StdIn.readString();<br>            <span class="hljs-keyword">if</span> (!item.equals(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>                s.push(item);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.isEmpty()) &#123;<br>                StdOut.println(<span class="hljs-string">&quot;BAD INPUT&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                s.pop();<br>            &#125;<br>        &#125;<br>        StdOut.println(s.size());<br><br>        <span class="hljs-keyword">while</span> (!s.isEmpty())&#123;<br>            StdOut.println(s.pop());<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span><br><span class="hljs-keyword">it</span><br></code></pre></td></tr></table></figure><h5 id="编写一段程序，从标准输入得到一个缺少左括号的表达式并打印出补全括号之后的中序表达式。"><a href="#编写一段程序，从标准输入得到一个缺少左括号的表达式并打印出补全括号之后的中序表达式。" class="headerlink" title="编写一段程序，从标准输入得到一个缺少左括号的表达式并打印出补全括号之后的中序表达式。"></a>编写一段程序，从标准输入得到一个缺少左括号的表达式并打印出补全括号之后的中序表达式。</h5><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap"><br>例如，给定输入：<br>1 +<span class="hljs-number"> 2 </span>) *<span class="hljs-number"> 3 </span>-<span class="hljs-number"> 4 </span>) *<span class="hljs-number"> 5 </span>-<span class="hljs-number"> 6 </span>) ) )<br><br>你的程序应该输出：<br>( (<span class="hljs-number"> 1 </span>+ 2)  *  ( (<span class="hljs-number"> 3 </span>- 4) * (<span class="hljs-number"> 5 </span>-<span class="hljs-number"> 6 </span>) ) )<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.Stack;<br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdIn;<br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdOut;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">algs1v3v9</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">// 运算符</span><br>        Stack&lt;String&gt; ops = <span class="hljs-keyword">new</span> Stack&lt;String&gt;();<br>        <span class="hljs-comment">// 数</span><br>        Stack&lt;String&gt; vals = <span class="hljs-keyword">new</span> Stack&lt;String&gt;();<br>        <span class="hljs-keyword">while</span> (!StdIn.isEmpty())&#123;<br>            <span class="hljs-comment">// 将运算符压入栈</span><br>            String s = StdIn.readString();<br>            <span class="hljs-keyword">boolean</span> isOps = s.equals(<span class="hljs-string">&quot;+&quot;</span>) || s.equals(<span class="hljs-string">&quot;-&quot;</span>) || s.equals(<span class="hljs-string">&quot;*&quot;</span>) || s.equals(<span class="hljs-string">&quot;sqrt&quot;</span>);<br>            <span class="hljs-keyword">if</span> (isOps)&#123;<br>                ops.push(s);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;)&quot;</span>))&#123;<br>                <span class="hljs-comment">// 拼接并压入栈</span><br>                String op = ops.pop();<br>                String v = vals.pop();<br>                v = <span class="hljs-string">&quot;( &quot;</span> + vals.pop() + <span class="hljs-string">&quot; &quot;</span> + op + <span class="hljs-string">&quot; &quot;</span> + v + <span class="hljs-string">&quot; )&quot;</span>;<br>                vals.push(v);<br>            &#125;<br>            <span class="hljs-keyword">else</span> vals.push(s);<br>        &#125;<br>        StdOut.println(vals.pop());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-10-编写一个过滤器-InfixToPostFix，将算数表达式由中序表达式转为后续表达式。"><a href="#1-3-10-编写一个过滤器-InfixToPostFix，将算数表达式由中序表达式转为后续表达式。" class="headerlink" title="1.3.10 编写一个过滤器 InfixToPostFix，将算数表达式由中序表达式转为后续表达式。"></a>1.3.10 编写一个过滤器 <code>InfixToPostFix</code>，将算数表达式由中序表达式转为后续表达式。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.Stack;<br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdIn;<br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdOut;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InfixToPostfix</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">// 运算符</span><br>        Stack&lt;String&gt; ops = <span class="hljs-keyword">new</span> Stack&lt;String&gt;();<br>        <span class="hljs-comment">// 数</span><br>        Stack&lt;String&gt; vals = <span class="hljs-keyword">new</span> Stack&lt;String&gt;();<br>        <span class="hljs-keyword">while</span> (!StdIn.isEmpty())&#123;<br>            <span class="hljs-comment">// 将运算符压入栈</span><br>            String s = StdIn.readString();<br>            <span class="hljs-keyword">boolean</span> isOps = s.equals(<span class="hljs-string">&quot;+&quot;</span>) || s.equals(<span class="hljs-string">&quot;-&quot;</span>) || s.equals(<span class="hljs-string">&quot;*&quot;</span>) || s.equals(<span class="hljs-string">&quot;sqrt&quot;</span>) ||s.equals(<span class="hljs-string">&quot;/&quot;</span>);<br>            <br>            <span class="hljs-keyword">if</span> (isOps)&#123;<br>                ops.push(s);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;)&quot;</span>))&#123;<br>                <span class="hljs-comment">// 拼接并压入栈</span><br>                String op = ops.pop();<br>                String v = vals.pop();<br>                v = vals.pop() + <span class="hljs-string">&quot; &quot;</span> + v + <span class="hljs-string">&quot; &quot;</span> + op;<br>                vals.push(v);<br>            &#125;<br>            <span class="hljs-keyword">else</span> vals.push(s);<br>        &#125;<br>        StdOut.println(vals.pop());<br>    &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> + <span class="hljs-number">3</span> <span class="hljs-number">4</span> - <span class="hljs-number">5</span> <span class="hljs-number">6</span> - * *<br></code></pre></td></tr></table></figure><h5 id="1-3-11-编写一段程序-EvaluatePostfix，从标准输入中得到一个后序表达式，求值并打印结果（将上一题的程序中得到的输出用管道传递给这一段程序可以得到和-Evaluate-相同的行为）。"><a href="#1-3-11-编写一段程序-EvaluatePostfix，从标准输入中得到一个后序表达式，求值并打印结果（将上一题的程序中得到的输出用管道传递给这一段程序可以得到和-Evaluate-相同的行为）。" class="headerlink" title="1.3.11 编写一段程序 EvaluatePostfix，从标准输入中得到一个后序表达式，求值并打印结果（将上一题的程序中得到的输出用管道传递给这一段程序可以得到和 Evaluate 相同的行为）。"></a>1.3.11 编写一段程序 <code>EvaluatePostfix</code>，从标准输入中得到一个后序表达式，求值并打印结果（将上一题的程序中得到的输出用管道传递给这一段程序可以得到和 <code>Evaluate</code> 相同的行为）。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.Stack;<br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdIn;<br><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.StdOut;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evaluate</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Stack&lt;Double&gt; vals = <span class="hljs-keyword">new</span> Stack&lt;Double&gt;();<br>        <span class="hljs-keyword">while</span> (!StdIn.isEmpty())&#123;<br>            String s = StdIn.readString();<br>            <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">&quot;+&quot;</span>))&#123;<br>                <span class="hljs-keyword">double</span> v = vals.pop();<br>                v = vals.pop() + v;<br>                vals.push(v);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;-&quot;</span>))&#123;<br>                <span class="hljs-keyword">double</span> v = vals.pop();<br>                v = vals.pop() - v;<br>                vals.push(v);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;*&quot;</span>))&#123;<br>                <span class="hljs-keyword">double</span> v = vals.pop();<br>                v = vals.pop() * v;<br>                vals.push(v);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>                <span class="hljs-keyword">double</span> v = vals.pop();<br>                v = vals.pop() / v;<br>                vals.push(v);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;sqrt&quot;</span>))&#123;<br>                <span class="hljs-keyword">double</span> v = vals.pop();<br>                v = Math.sqrt(v);<br>                vals.push(v);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                vals.push(Double.parseDouble(s));<br>            &#125;<br>        &#125;<br>        StdOut.println(vals.pop());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>未完待续···</p>]]></content>
    
    
    <categories>
      
      <category>算法第四版</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法-第四版》答案系列-1-2 提高题篇</title>
    <link href="/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-2%E6%8F%90%E9%AB%98%E9%A2%98%E7%AF%87/"/>
    <url>/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-2%E6%8F%90%E9%AB%98%E9%A2%98%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近开始学习《算法-第四版》一书，将我自己做的书后习题分享给大家，本篇是这一系列的第二篇，包含了书上&lt;1.2 数据抽象&gt;的习题的提高题部分,本篇习题位于 P71 ~ P73 ，如有错误，还请指正。</p></blockquote><blockquote><p>本篇答案中部分 java 代码用到了书中的包，如需使用请去书中配套网站安装。</p></blockquote><p>以下的答案在电脑端查看可以显示目录</p><a id="more"></a><h3 id="提高题"><a href="#提高题" class="headerlink" title="提高题"></a>提高题</h3><h5 id="文件输入。基于-String-的-split-方法实现-In-中的静态方法-readInts-。"><a href="#文件输入。基于-String-的-split-方法实现-In-中的静态方法-readInts-。" class="headerlink" title="文件输入。基于 String 的 split() 方法实现 In 中的静态方法 readInts()。"></a>文件输入。基于 <code>String</code> 的 <code>split()</code> 方法实现 <code>In</code> 中的静态方法 <code>readInts()</code>。</h5><p>解答：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] readInts(String name)&#123;<br>    IN in = <span class="hljs-keyword">new</span> In(name);<br>    String input = in.readAll();<br>    String[] words = input.split(<span class="hljs-string">&quot;\\s+&quot;</span>);<br>    <span class="hljs-keyword">int</span>[] ints = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[words.length];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; words.length; i++)&#123;<br>        ints[i] = Integer.parseInt(words[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ints;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们会在 1.3 节中学习另一个不同的实现，（请见 1.3.1.5 节）。</p><h5 id="1-2-16-有理数。为有理数实现一个不可变数据类型-Rational，支持加减乘除操作。"><a href="#1-2-16-有理数。为有理数实现一个不可变数据类型-Rational，支持加减乘除操作。" class="headerlink" title="1.2.16 有理数。为有理数实现一个不可变数据类型 Rational，支持加减乘除操作。"></a>1.2.16 有理数。为有理数实现一个不可变数据类型 <code>Rational</code>，支持加减乘除操作。</h5><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs julia">=============================================================================<br>    public class <span class="hljs-built_in">Rational</span><br>-----------------------------------------------------------------------------<br>            <span class="hljs-built_in">Rational</span>(int numerator, int denominator)<br>        <span class="hljs-built_in">Rational</span>    plus(<span class="hljs-built_in">Rational</span> b)                    该数与 b 之和<br>        <span class="hljs-built_in">Rational</span>    minus(<span class="hljs-built_in">Rational</span> b)                   该数与 b 之差<br>        <span class="hljs-built_in">Rational</span>    times(<span class="hljs-built_in">Rational</span> b)                   该数与 b 之积<br>        <span class="hljs-built_in">Rational</span>    divides(<span class="hljs-built_in">Rational</span> b)                 该数与 b 之商<br>        boolean     equals(<span class="hljs-built_in">Rational</span> that)               该数与 that 相等码<br>        <span class="hljs-built_in">String</span>      toString()                          对象的字符串表示<br>=============================================================================<br></code></pre></td></tr></table></figure><p>无需测试溢出（请见练习 1.2.17），只需使用两个 <code>long</code> 型实例变量表示分子和分母来控制溢出的可能性。使用欧几里得算法来保证分子和分母没有公因子。编写一个测试用例检测你实现的所有方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rational</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> numerator;  <span class="hljs-comment">//分子</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> denominator;  <span class="hljs-comment">//分母</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rational</span><span class="hljs-params">(<span class="hljs-keyword">long</span> numerator, <span class="hljs-keyword">long</span> denominator)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (denominator == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Denominator is zero&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> f = euclidean(numerator, denominator);<br>        <span class="hljs-keyword">this</span>.numerator = numerator / f;<br>        <span class="hljs-keyword">this</span>.denominator = denominator / f;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">euclidean</span><span class="hljs-params">(<span class="hljs-keyword">long</span> a, <span class="hljs-keyword">long</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span>) a = -a;<br>        <span class="hljs-keyword">if</span> (b &lt; <span class="hljs-number">0</span>) b = -b;<br>        <span class="hljs-keyword">if</span> (a &lt; b)&#123;<br>            <span class="hljs-keyword">long</span> d = a;<br>            a = b;<br>            b = d;<br>        &#125;<br>        <span class="hljs-keyword">long</span> c = a % b;<br>        <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> euclidean(b, c);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> b;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Rational <span class="hljs-title">plus</span><span class="hljs-params">(Rational b)</span></span>&#123;<br>        <span class="hljs-keyword">long</span> u = numerator * b.denominator + denominator * b.numerator;<br>        <span class="hljs-keyword">long</span> d = denominator * b.denominator;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Rational(u, d);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Rational <span class="hljs-title">minus</span><span class="hljs-params">(Rational b)</span></span>&#123;<br>        <span class="hljs-keyword">long</span> u = numerator * b.denominator - denominator * b.numerator;<br>        <span class="hljs-keyword">long</span> d = denominator * b.denominator;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Rational(u, d);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Rational <span class="hljs-title">times</span><span class="hljs-params">(Rational b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Rational(numerator * b.numerator, denominator * b.denominator);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Rational <span class="hljs-title">divides</span><span class="hljs-params">(Rational b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Rational(numerator * b.denominator, denominator * b.numerator);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Rational b)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == b) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> (numerator == b.numerator &amp;&amp; denominator == b.denominator); <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.denominator == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-keyword">this</span>.numerator);<br>        &#125;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%d/%d&quot;</span>, <span class="hljs-keyword">this</span>.numerator, <span class="hljs-keyword">this</span>.denominator);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1216</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        System.out.println(<span class="hljs-number">6</span>/ -<span class="hljs-number">3</span>);<br>        Rational r = <span class="hljs-keyword">new</span> Rational(<span class="hljs-number">2</span>, -<span class="hljs-number">6</span>);<br>        System.out.println(r);<br>        Rational r1 = <span class="hljs-keyword">new</span> Rational(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>        Rational r2 = <span class="hljs-keyword">new</span> Rational(-<span class="hljs-number">1</span>, <span class="hljs-number">15</span>);<br>        System.out.println(r.plus(r1));<br>        System.out.println(r.plus(r2).plus(r1));<br>        System.out.println(r.minus(r1));<br>        System.out.println(r.times(r1));<br>        System.out.println(r.divides(r1));<br>        System.out.println(r.times(r1).equals(r2));<br>        r = <span class="hljs-keyword">new</span> Rational(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>        System.out.println(r);<br>        System.out.println(r.plus(r1));<br>        <br>        r1 = <span class="hljs-keyword">new</span> Rational(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>        r2 = <span class="hljs-keyword">new</span> Rational(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        System.out.println(r1.plus(r2));<br>        <br>        r1 = <span class="hljs-keyword">new</span> Rational(<span class="hljs-number">1</span>, <span class="hljs-number">200000000</span>);<br>        r2 = <span class="hljs-keyword">new</span> Rational(<span class="hljs-number">1</span>, <span class="hljs-number">300000000</span>);<br>        System.out.println(r1.plus(r2));<br>        <br>        r1 = <span class="hljs-keyword">new</span> Rational(<span class="hljs-number">1073741789</span>, <span class="hljs-number">20</span>);<br>        r2 = <span class="hljs-keyword">new</span> Rational(<span class="hljs-number">1073741789</span>, <span class="hljs-number">30</span>);<br>        System.out.println(r1.plus(r2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="有理数实现的健壮性。在-Rational-请见练习题-1-2-16-的开发中使用断言来防止溢出。"><a href="#有理数实现的健壮性。在-Rational-请见练习题-1-2-16-的开发中使用断言来防止溢出。" class="headerlink" title="有理数实现的健壮性。在 Rational (请见练习题 1.2.16) 的开发中使用断言来防止溢出。"></a>有理数实现的健壮性。在 <code>Rational</code> (请见练习题 1.2.16) 的开发中使用断言来防止溢出。</h5><p>再议</p><h5 id="累加器的方差。以下代码为-Accumulator-类添加了-var-和-stddev-方法，他们计算了-addDataValue-方法的参数的方差和标准差，验证这段代码。"><a href="#累加器的方差。以下代码为-Accumulator-类添加了-var-和-stddev-方法，他们计算了-addDataValue-方法的参数的方差和标准差，验证这段代码。" class="headerlink" title="累加器的方差。以下代码为 Accumulator 类添加了 var() 和 stddev() 方法，他们计算了 addDataValue() 方法的参数的方差和标准差，验证这段代码。"></a>累加器的方差。以下代码为 <code>Accumulator</code> 类添加了 <code>var()</code> 和 <code>stddev()</code> 方法，他们计算了 <code>addDataValue()</code> 方法的参数的方差和标准差，验证这段代码。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Accumulator</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> m;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> s;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> N;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDataValue</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x)</span></span>&#123;<br>        N++;<br>        s = s + <span class="hljs-number">1.0</span> * (N-<span class="hljs-number">1</span>) / N * (x-m) * (x -m);<br>        m = m + (x - m) / N;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">mean</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> m;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">var</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> s/(N - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">stddev</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Math.aprt(<span class="hljs-keyword">this</span>.<span class="hljs-keyword">var</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与直接对所有数据的平方求和的方法相比较，这种实现能够更好地避免四舍五入产生的误差。</p><h5 id="1-2-19-字符串解析。为练习-1-2-13-中实现的-Date-和-Transaction-类型编写能够解析字符串数据的构造函数。它接受一个-String-参数指定的初始值，格式如表-1-2-20-所示。"><a href="#1-2-19-字符串解析。为练习-1-2-13-中实现的-Date-和-Transaction-类型编写能够解析字符串数据的构造函数。它接受一个-String-参数指定的初始值，格式如表-1-2-20-所示。" class="headerlink" title="1.2.19 字符串解析。为练习 1.2.13 中实现的 Date 和 Transaction 类型编写能够解析字符串数据的构造函数。它接受一个 String 参数指定的初始值，格式如表 1.2.20 所示。"></a>1.2.19 字符串解析。为练习 1.2.13 中实现的 <code>Date</code> 和 <code>Transaction</code> 类型编写能够解析字符串数据的构造函数。它接受一个 <code>String</code> 参数指定的初始值，格式如表 1.2.20 所示。</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">                         表 1.2.20 被解析的字符串格式</span><br>=================================================================================<br><span class="hljs-code">      类    型                  格    式                       举    例</span><br>---------------------------------------------------------------------------------<br><span class="hljs-code">    Date             由斜杠分隔的整数                    5/22/1939</span><br><span class="hljs-code">    Transaction      客户、日期和金额，由空白字符分隔      Turing 5/22/1939 11.99</span><br>=================================================================================<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">部分解答：<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(String date)</span></span>&#123;<br>    String[] fields = date.split(<span class="hljs-string">&quot;/&quot;</span>);<br>    month = Integer.parseInt(fields[<span class="hljs-number">0</span>]);<br>    day = Integer.parseInt(fields[<span class="hljs-number">1</span>]);<br>    year = Integer.parseInt(fields[<span class="hljs-number">2</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(String date)</span> </span>&#123;<br>        String[] fields = date.split(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-keyword">if</span> (fields.length != <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid date&quot;</span>);<br>        &#125;<br>        month = Integer.parseInt(fields[<span class="hljs-number">0</span>]);<br>        day   = Integer.parseInt(fields[<span class="hljs-number">1</span>]);<br>        year  = Integer.parseInt(fields[<span class="hljs-number">2</span>]);<br>    &#125;<br><span class="hljs-comment">//--------------------------------------------------------------------------------</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Transaction</span><span class="hljs-params">(String transaction)</span> </span>&#123;<br>        String[] a = transaction.split(<span class="hljs-string">&quot;\\s+&quot;</span>);<br>        who    = a[<span class="hljs-number">0</span>];<br>        when   = <span class="hljs-keyword">new</span> Date(a[<span class="hljs-number">1</span>]);<br>        amount = Double.parseDouble(a[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">if</span> (Double.isNaN(amount) || Double.isInfinite(amount))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Amount cannot be NaN or infinite&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法第四版</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法-第四版》答案系列-1.2 练习篇</title>
    <link href="/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-2%E7%BB%83%E4%B9%A0%E7%AF%87/"/>
    <url>/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-2%E7%BB%83%E4%B9%A0%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近开始学习《算法-第四版》一书，将我自己做的书后习题分享给大家，本篇是这一系列的第二篇，包含了书上&lt;1.2 数据抽象&gt;的习题的练习部分,本篇习题位于 P71 ~ P73 ，如有错误，还请指正。</p></blockquote><blockquote><p>本篇答案中部分 java 代码用到了书中的包，如需使用请去书中配套网站安装。</p></blockquote><p>以下的答案在电脑端查看可以显示目录</p><a id="more"></a><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h5 id="1-2-1-编写一个-Point2D-的用例，从命令行接受一个整数-N-。在单位正方形中生成-N-个随机点，然后计算两点之间的最接近距离。"><a href="#1-2-1-编写一个-Point2D-的用例，从命令行接受一个整数-N-。在单位正方形中生成-N-个随机点，然后计算两点之间的最接近距离。" class="headerlink" title="1.2.1 编写一个 Point2D 的用例，从命令行接受一个整数 N 。在单位正方形中生成 N 个随机点，然后计算两点之间的最接近距离。"></a>1.2.1 编写一个 <code>Point2D</code> 的用例，从命令行接受一个整数 N 。在单位正方形中生成 N 个随机点，然后计算两点之间的最接近距离。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q121</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> N = Integer.parseInt(args[<span class="hljs-number">0</span>]);<br>        Point2D[] p = <span class="hljs-keyword">new</span> Point2D[N];<br>        <span class="hljs-keyword">double</span> min = <span class="hljs-number">2.00</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>; t &lt; N; t++)&#123;<br>            <span class="hljs-keyword">double</span> x = Math.random();<br>            <span class="hljs-keyword">double</span> y = Math.random();<br>            p[t] = <span class="hljs-keyword">new</span> Point2D(x, y);<br>            p[t].draw();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N-<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; N; j++)&#123;<br>                <span class="hljs-keyword">if</span> (p[i].distanceTo(p[j]) &lt; min)&#123;<br>                    min = p[i].distanceTo(p[j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        StdOut.print(<span class="hljs-string">&quot;两点之间最近的距离是：&quot;</span> + min);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-2-2-编写一个-Interval1D-的用例，从命令行接受一个整数-N-。从保准输入中读取-N-个间隔（每个间隔有一对-double-值定义）并打印出所有相交的间隔对。"><a href="#1-2-2-编写一个-Interval1D-的用例，从命令行接受一个整数-N-。从保准输入中读取-N-个间隔（每个间隔有一对-double-值定义）并打印出所有相交的间隔对。" class="headerlink" title="1.2.2 编写一个 Interval1D 的用例，从命令行接受一个整数 N 。从保准输入中读取 N 个间隔（每个间隔有一对 double 值定义）并打印出所有相交的间隔对。"></a>1.2.2 编写一个 <code>Interval1D</code> 的用例，从命令行接受一个整数 N 。从保准输入中读取 N 个间隔（每个间隔有一对 double 值定义）并打印出所有相交的间隔对。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q122</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> N = Integer.parseInt(args[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">double</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">2</span>*N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d.length; i++)&#123;<br>            d[i] = StdIn.readDouble();<br>        &#125;<br>        <br>        Interval1D[] interval = <span class="hljs-keyword">new</span> Interval1D[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>            interval[i] = <span class="hljs-keyword">new</span> Interval1D(d[<span class="hljs-number">2</span>*i], d[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N-<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; N; j++)&#123;<br>                <span class="hljs-keyword">if</span> (interval[i].intersects(interval[j]))&#123;<br>                StdOut.println(<span class="hljs-string">&quot;Interval(&quot;</span> + d[<span class="hljs-number">2</span>*i] + <span class="hljs-string">&quot;, &quot;</span> + d[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]+ <span class="hljs-string">&quot;) intersects with interval(&quot;</span> + d[<span class="hljs-number">2</span>*j] +<span class="hljs-string">&quot;, &quot;</span>+ d[<span class="hljs-number">2</span>*j+<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;).&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">运行结果：<br><br>java q122 <span class="hljs-number">5</span><br><span class="hljs-number">.3</span> <span class="hljs-number">.5</span> <span class="hljs-number">.7</span> <span class="hljs-number">.9</span> <span class="hljs-number">.1</span> <span class="hljs-number">.3</span> <span class="hljs-number">.6</span> <span class="hljs-number">.8</span> <span class="hljs-number">.8</span> <span class="hljs-number">.9</span><br><br><span class="hljs-type">Interval</span>(<span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>) intersects <span class="hljs-keyword">with</span> <span class="hljs-type">interval</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>).<br><span class="hljs-type">Interval</span>(<span class="hljs-number">0.7</span>, <span class="hljs-number">0.9</span>) intersects <span class="hljs-keyword">with</span> <span class="hljs-type">interval</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.8</span>).<br><span class="hljs-type">Interval</span>(<span class="hljs-number">0.7</span>, <span class="hljs-number">0.9</span>) intersects <span class="hljs-keyword">with</span> <span class="hljs-type">interval</span>(<span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>).<br><span class="hljs-type">Interval</span>(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.8</span>) intersects <span class="hljs-keyword">with</span> <span class="hljs-type">interval</span>(<span class="hljs-number">0.8</span>, <span class="hljs-number">0.9</span>).<br></code></pre></td></tr></table></figure><h5 id="1-2-3-编写一个-Interval2D-的用例，从命令行接受参数-N、-min-和-max-。生成-N-个随机的-2D-间隔，其宽和高均匀地分布在单位正方形中的-min-和-max-之间。用-StdDraw-画出他们并打印出相交的间隔对的数量以及有包含关系的间隔对数量。"><a href="#1-2-3-编写一个-Interval2D-的用例，从命令行接受参数-N、-min-和-max-。生成-N-个随机的-2D-间隔，其宽和高均匀地分布在单位正方形中的-min-和-max-之间。用-StdDraw-画出他们并打印出相交的间隔对的数量以及有包含关系的间隔对数量。" class="headerlink" title="1.2.3 编写一个 Interval2D 的用例，从命令行接受参数 N、 min 和 max 。生成 N 个随机的 2D 间隔，其宽和高均匀地分布在单位正方形中的 min 和 max 之间。用 StdDraw 画出他们并打印出相交的间隔对的数量以及有包含关系的间隔对数量。"></a>1.2.3 编写一个 <code>Interval2D</code> 的用例，从命令行接受参数 N、 min 和 max 。生成 N 个随机的 2D 间隔，其宽和高均匀地分布在单位正方形中的 min 和 max 之间。用 <code>StdDraw</code> 画出他们并打印出相交的间隔对的数量以及有包含关系的间隔对数量。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q123</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> N = Integer.parseInt(args[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">double</span> min = Double.parseDouble(args[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">double</span> max = Double.parseDouble(args[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">double</span>[] point = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[N*<span class="hljs-number">4</span>];<br>        Point2D[] point2D = <span class="hljs-keyword">new</span> Point2D[N*<span class="hljs-number">2</span>];<span class="hljs-comment">//每个框对角线上的点 </span><br>        Interval1D[] interval1D = <span class="hljs-keyword">new</span> Interval1D[N*<span class="hljs-number">2</span>];<br>        Interval2D[] interval2D = <span class="hljs-keyword">new</span> Interval2D[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; interval1D.length; i++)&#123;<br>            <span class="hljs-keyword">double</span> a;<br>            <span class="hljs-keyword">double</span> b;<br>            <span class="hljs-keyword">do</span>&#123;<br>                a = StdRandom.uniform(min, max);<br>                b = StdRandom.uniform(min, max);<br>            &#125;<span class="hljs-keyword">while</span> (a &gt;= b);<br>            point[i*<span class="hljs-number">2</span>] = a;<br>            point[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = b;<br>            interval1D[i] = <span class="hljs-keyword">new</span> Interval1D(a, b);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt; interval2D.length; i++)&#123;<br>        interval2D[i] = <span class="hljs-keyword">new</span> Interval2D(interval1D[<span class="hljs-number">2</span>*i], interval1D[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]);<br>        interval2D[i].draw();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt; interval2D.length; i++)&#123;<br>            point2D[i*<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> Point2D(point[i*<span class="hljs-number">4</span>], point[i*<span class="hljs-number">4</span>+<span class="hljs-number">3</span>]);<br>            point2D[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> Point2D(point[i*<span class="hljs-number">4</span>+<span class="hljs-number">1</span>], point[i*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>]);<br>            <br>        &#125;<br>        <span class="hljs-keyword">int</span> intersectnum = <span class="hljs-number">0</span>;<span class="hljs-comment">//相交的个数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, k = -<span class="hljs-number">1</span>; i &lt; N-<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; N; j++)&#123;<br>                <span class="hljs-keyword">if</span> (interval2D[i].intersects(interval2D[j]))&#123;<br>                    intersectnum++;<br>                 &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> includenum = <span class="hljs-number">0</span>;<span class="hljs-comment">//包含的个数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<span class="hljs-comment">//从不相交的中选出包含的</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; N; j++)&#123;<br>                <span class="hljs-keyword">if</span>(interval2D[i].contains(point2D[<span class="hljs-number">2</span>*j]) &amp;&amp; interval2D[i].contains(point2D[<span class="hljs-number">2</span>*j+<span class="hljs-number">1</span>]) &amp;&amp; i != j)&#123;<br>                    includenum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        StdOut.println(<span class="hljs-string">&quot;inersect:&quot;</span> + intersectnum + <span class="hljs-string">&quot;;includenum:&quot;</span> + includenum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">命令：<br><span class="hljs-keyword">java </span>q123 <span class="hljs-number">10</span> <span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">0</span>.<span class="hljs-number">9</span><br>运行结果：<br><span class="hljs-symbol">inersect:</span><span class="hljs-number">27</span><span class="hljs-comment">;includenum:1</span><br></code></pre></td></tr></table></figure><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630222821.jpg"/><p><img src="%5Cimg%5Cin-post%5C2018%5C8%5C4%5Cq123.jpg"></p><h5 id="1-2-4-以下这段代码会打印出什么？"><a href="#1-2-4-以下这段代码会打印出什么？" class="headerlink" title="1.2.4 以下这段代码会打印出什么？"></a>1.2.4 以下这段代码会打印出什么？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String string1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>String string2 = string1;<br>string1 = <span class="hljs-string">&quot;world&quot;</span>;<br>StdOut.println(string1);<br>StdOut.println(string2);<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">world</span><br><span class="hljs-attribute">hello</span><br></code></pre></td></tr></table></figure><h5 id="1-2-5-以下这段代码会打印出什么？"><a href="#1-2-5-以下这段代码会打印出什么？" class="headerlink" title="1.2.5 以下这段代码会打印出什么？"></a>1.2.5 以下这段代码会打印出什么？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;Hello World&quot;</span><br>s.toUpperCase();<br>s.substring(<span class="hljs-number">6</span>,<span class="hljs-number">11</span>);<br>StdOut.println(s);<br></code></pre></td></tr></table></figure><p>答： <code>&quot;Hello World&quot;</code> 。<code>String</code> 对象是不可变的—————所有字符串方法都会返回一个新的 <code>String</code> 对象（但他们不会改变参数对象的值）。这段代码忽略了返回的对象并直接打印了原字符串。要打印出 <code>&quot;WORD&quot;</code> ,请用 <code>s = s.tuUpperCase()</code> 和 <code>s = s.substring(6.11)</code> .</p><h5 id="1-2-6-如果字符串-s-中的字符循环移动任意位置之后得到另一个字符串-t-，那么-s-就被称为-t-的回环变位（circular-rotation）。例如，ACTGACG-就是-TGACGAC-的一个回环变位，反之亦然。判定这个条件在基因组排序的研究中是很重要的。编写一个程序检查给定的两个字符串-s-和-t-是否为回环变位。"><a href="#1-2-6-如果字符串-s-中的字符循环移动任意位置之后得到另一个字符串-t-，那么-s-就被称为-t-的回环变位（circular-rotation）。例如，ACTGACG-就是-TGACGAC-的一个回环变位，反之亦然。判定这个条件在基因组排序的研究中是很重要的。编写一个程序检查给定的两个字符串-s-和-t-是否为回环变位。" class="headerlink" title="1.2.6 如果字符串 s 中的字符循环移动任意位置之后得到另一个字符串 t ，那么 s 就被称为 t 的回环变位（circular rotation）。例如，ACTGACG 就是 TGACGAC 的一个回环变位，反之亦然。判定这个条件在基因组排序的研究中是很重要的。编写一个程序检查给定的两个字符串 s 和 t 是否为回环变位。"></a>1.2.6 如果字符串 s 中的字符循环移动任意位置之后得到另一个字符串 t ，那么 s 就被称为 t 的回环变位（circular rotation）。例如，ACTGACG 就是 TGACGAC 的一个回环变位，反之亦然。判定这个条件在基因组排序的研究中是很重要的。编写一个程序检查给定的两个字符串 s 和 t 是否为回环变位。</h5><p>提示：答案只需要一行用到 <code>indexOf()</code> 、 <code>length()</code> 和字符串链接的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q126</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断两个字符串是否为回环变位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s 字符串一</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> t 字符串二     </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCircularRotation</span><span class="hljs-params">(String s, String t)</span></span>&#123;<br>        <span class="hljs-comment">//将 t 和 t 自身连接，这样如果 t 是 s 的回环变位，那么s肯定是 “t+t” 的一个子串！</span><br>        <span class="hljs-keyword">return</span> (s.length() == t.length()) &amp;&amp; ((t + t).indexOf(s) &gt; <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        String s = args[<span class="hljs-number">0</span>];<br>        String t = args[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (isCircularRotation(s, t))&#123;<br>            System.out.println(<span class="hljs-string">&quot;二者是回环变位&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;二者不是回环变位&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>q126 ACTGACG TGACGAC<br>二者是回环变位<br></code></pre></td></tr></table></figure><h5 id="1-2-7-以下递归函数的返回值是什么？"><a href="#1-2-7-以下递归函数的返回值是什么？" class="headerlink" title="1.2.7 以下递归函数的返回值是什么？"></a>1.2.7 以下递归函数的返回值是什么？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">mystery</span><span class="hljs-params">(String s)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> N = s.length();<br>    <span class="hljs-keyword">if</span> (N &lt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    String a = s.substring(<span class="hljs-number">0</span>, N/<span class="hljs-number">2</span>);<br>    String b = s.substring(N/<span class="hljs-number">2</span>, N);<br>    <span class="hljs-keyword">return</span> mystery(b) + mystery(a);<br>&#125;<br></code></pre></td></tr></table></figure><p>答：会将字符串的后半部分移到前边<br>例：abcdefg =&gt; gfedcba</p><h5 id="1-2-8-设-a-和-b-均为长数百万的整形数组。以下代码的作用是什么？有效吗？"><a href="#1-2-8-设-a-和-b-均为长数百万的整形数组。以下代码的作用是什么？有效吗？" class="headerlink" title="1.2.8 设 a[] 和 b[] 均为长数百万的整形数组。以下代码的作用是什么？有效吗？"></a>1.2.8 设 a[] 和 b[] 均为长数百万的整形数组。以下代码的作用是什么？有效吗？</h5><pre><code>int t = a; a = b; b = t;</code></pre><p>答：这段代码会将他们交换。它的效率不可能再高了，因为它复制的是引用而不需要复制数百万个元素。</p><h5 id="1-2-9-修改-BinarySearch-（请见-1-1-10-1-节中的二分查找代码），使用-Counter-统计在有查找中被检查的键的总数并在查找全部结束后打印该值。"><a href="#1-2-9-修改-BinarySearch-（请见-1-1-10-1-节中的二分查找代码），使用-Counter-统计在有查找中被检查的键的总数并在查找全部结束后打印该值。" class="headerlink" title="1.2.9 修改 BinarySearch （请见 1.1.10.1 节中的二分查找代码），使用 Counter 统计在有查找中被检查的键的总数并在查找全部结束后打印该值。"></a>1.2.9 修改 <code>BinarySearch</code> （请见 1.1.10.1 节中的二分查找代码），使用 <code>Counter</code> 统计在有查找中被检查的键的总数并在查找全部结束后打印该值。</h5><p>提示：在 <code>main()</code> 中创建一个 <code>Counter</code> 对象并将他作为参数传给 <code>rank()</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q129</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span>[] a, Counter counter)</span></span>&#123;<br>        <span class="hljs-comment">//数组必须是有序的</span><br>        <span class="hljs-keyword">int</span> lo = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> hi = a.length-<span class="hljs-number">1</span>;<br>        counter.increment();<br>        <span class="hljs-keyword">while</span>(lo &lt;= hi)&#123;<br>            <span class="hljs-comment">//被查找的键要么不存在，要么必然存在于 a[lo..hi] 之中</span><br>            <span class="hljs-keyword">int</span> mid = lo + (hi - lo) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (key &lt; a[mid])&#123;<br>                hi = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; a[mid])&#123;<br>                lo = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] whitelist = In.readInts(args[<span class="hljs-number">0</span>]);<br>        Arrays.sort(whitelist);<br>        Counter counter = <span class="hljs-keyword">new</span> Counter(<span class="hljs-string">&quot;BinarySearch&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!StdIn.isEmpty())&#123;<br>            <span class="hljs-comment">//读取键值，如果不存在于白名单中则将其打印</span><br>            <span class="hljs-keyword">int</span> key = StdIn.readInt();<br>            <span class="hljs-keyword">if</span> (rank(key, whitelist, counter) &lt; <span class="hljs-number">0</span>)&#123;<br>                StdOut.println(key);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;总数：&quot;</span> + counter);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java q129 tinyW<span class="hljs-selector-class">.txt</span> &lt; tinyT.txt<br><span class="hljs-number">50</span><br><span class="hljs-number">99</span><br><span class="hljs-number">13</span><br>总数：<span class="hljs-number">18</span> BinarySearch<br></code></pre></td></tr></table></figure><h5 id="1-2-10-编写一个类-VisualCounter-，支持加一和减一操作。它的构造函数接受两个参数-N-和-max-，其中-N-指定了操作的最大次数，-max-指定了计数器的最大绝对值。作为副作用，用图像显示每次计数器变化后的值。"><a href="#1-2-10-编写一个类-VisualCounter-，支持加一和减一操作。它的构造函数接受两个参数-N-和-max-，其中-N-指定了操作的最大次数，-max-指定了计数器的最大绝对值。作为副作用，用图像显示每次计数器变化后的值。" class="headerlink" title="1.2.10 编写一个类 VisualCounter ，支持加一和减一操作。它的构造函数接受两个参数 N 和 max ，其中 N 指定了操作的最大次数， max 指定了计数器的最大绝对值。作为副作用，用图像显示每次计数器变化后的值。"></a>1.2.10 编写一个类 <code>VisualCounter</code> ，支持加一和减一操作。它的构造函数接受两个参数 N 和 max ，其中 N 指定了操作的最大次数， max 指定了计数器的最大绝对值。作为副作用，用图像显示每次计数器变化后的值。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VisualCounter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VisualCounter</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> max)</span></span>&#123;<br>        StdDraw.setXscale(<span class="hljs-number">0</span>, N);<br>        StdDraw.setYscale(-max, max);<br>        StdDraw.setPenRadius(<span class="hljs-number">.007</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">increment</span><span class="hljs-params">()</span></span>&#123;<br>        count++;<br>        x++;<br>        StdDraw.point(x, count);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decrement</span><span class="hljs-params">()</span></span>&#123;<br>        count--;<br>        x++;<br>        StdDraw.point(x, count);<br>    &#125;<br>&#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1210</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> N = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">int</span> max = <span class="hljs-number">50</span>;<br>        <span class="hljs-keyword">double</span> p = <span class="hljs-number">0.7</span>;<br>        VisualCounter vc = <span class="hljs-keyword">new</span> VisualCounter(N, max);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>; t &lt; <span class="hljs-number">100</span>; t++)&#123;<br>            <span class="hljs-keyword">boolean</span> padd = StdRandom.bernoulli(p);<span class="hljs-comment">//加的概率为p</span><br>            <span class="hljs-keyword">if</span> (padd)&#123;<br>                vc.increment();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                vc.decrement();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630223133.jpg"/><p><img src="%5Cimg%5Cin-post%5C2018%5C8%5C4%5Cq1210.jpg"></p><h5 id="1-2-11-根据-Date-的-API-实现一个-smartDate-类型，在日期非法时抛出一个异常。"><a href="#1-2-11-根据-Date-的-API-实现一个-smartDate-类型，在日期非法时抛出一个异常。" class="headerlink" title="1.2.11 根据 Date 的 API 实现一个 smartDate 类型，在日期非法时抛出一个异常。"></a>1.2.11 根据 <code>Date</code> 的 API 实现一个 <code>smartDate</code> 类型，在日期非法时抛出一个异常。</h5><p>答案见 1.2.12</p><h5 id="1-2-12-为-smartDate-添加一个方法-dayOfTheWeek-，为日期中每周的日返回-Monday、-Tuesday、-Wednesday、-Thursday、-Friday、-Saturday-和-Sunday-中的适当值。你可以假定时间是21世纪。"><a href="#1-2-12-为-smartDate-添加一个方法-dayOfTheWeek-，为日期中每周的日返回-Monday、-Tuesday、-Wednesday、-Thursday、-Friday、-Saturday-和-Sunday-中的适当值。你可以假定时间是21世纪。" class="headerlink" title="1.2.12 为 smartDate 添加一个方法 dayOfTheWeek() ，为日期中每周的日返回 Monday、 Tuesday、 Wednesday、 Thursday、 Friday、 Saturday 和 Sunday 中的适当值。你可以假定时间是21世纪。"></a>1.2.12 为 <code>smartDate</code> 添加一个方法 <code>dayOfTheWeek()</code> ，为日期中每周的日返回 Monday、 Tuesday、 Wednesday、 Thursday、 Friday、 Saturday 和 Sunday 中的适当值。你可以假定时间是21世纪。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Date</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">day</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">month</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">year</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object that)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(smartDate that)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">smartDate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Date</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span>[] DAYS = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span> &#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> month;   <span class="hljs-comment">// month (between 1 and 12)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> day;     <span class="hljs-comment">// day   (between 1 and DAYS[month]</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> year;    <span class="hljs-comment">// year</span><br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Initializes a new date from the month, day, and year.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> month the month (between 1 and 12)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> day the day (between 1 and 28-31, depending on the month)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> year the year</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if this date is invalid</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">smartDate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day, <span class="hljs-keyword">int</span> year)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!isValid(month, day, year)) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid date&quot;</span>);<br>        <span class="hljs-keyword">this</span>.month = month;<br>        <span class="hljs-keyword">this</span>.day   = day;<br>        <span class="hljs-keyword">this</span>.year  = year;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Initializes new date specified as a string in form MM/DD/YYYY.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date the string representation of this date</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if this date is invalid</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">smartDate</span><span class="hljs-params">(String date)</span> </span>&#123;<br>        String[] fields = date.split(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-keyword">if</span> (fields.length != <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid date&quot;</span>);<br>        &#125;<br>        month = Integer.parseInt(fields[<span class="hljs-number">0</span>]);<br>        day   = Integer.parseInt(fields[<span class="hljs-number">1</span>]);<br>        year  = Integer.parseInt(fields[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">if</span> (!isValid(month, day, year)) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid date&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return the month.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the month (an integer between 1 and 12)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">month</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the day.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the day (an integer between 1 and 31)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">day</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> day;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the year.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the year</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">year</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br><br><br>    <span class="hljs-comment">// is the given date valid?</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> d, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">1</span> || m &gt; <span class="hljs-number">12</span>)      <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> (d &lt; <span class="hljs-number">1</span> || d &gt; DAYS[m]) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">2</span> &amp;&amp; d == <span class="hljs-number">29</span> &amp;&amp; !isLeapYear(y)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// is y a leap year?</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLeapYear</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (y % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (y % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">return</span> y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns a string representation of this date.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the string representation in the format MM/DD/YYYY</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> month + <span class="hljs-string">&quot;/&quot;</span> + day + <span class="hljs-string">&quot;/&quot;</span> + year;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Compares this date to the specified date.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  other the other date</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if this date equals &#123;<span class="hljs-doctag">@code</span> other&#125;; &#123;<span class="hljs-doctag">@code</span> false&#125; otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object other)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (other == <span class="hljs-keyword">this</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (other == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> (other.getClass() != <span class="hljs-keyword">this</span>.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        smartDate that = (smartDate) other;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.month == that.month) &amp;&amp; (<span class="hljs-keyword">this</span>.day == that.day) &amp;&amp; (<span class="hljs-keyword">this</span>.year == that.year);<br>    &#125;<br>    <br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the next date in the calendar.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a date that represents the next day after this day</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> smartDate <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isValid(month, day + <span class="hljs-number">1</span>, year))    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> smartDate(month, day + <span class="hljs-number">1</span>, year);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isValid(month + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, year)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> smartDate(month + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, year);<br>        <span class="hljs-keyword">else</span>                                  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> smartDate(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, year + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Compares two dates chronologically.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  that the other date</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if this date is after that date; &#123;<span class="hljs-doctag">@code</span> false&#125; otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAfter</span><span class="hljs-params">(smartDate that)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> compareTo(that) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Compares two dates chronologically.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  that the other date</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if this date is before that date; &#123;<span class="hljs-doctag">@code</span> false&#125; otherwise</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBefore</span><span class="hljs-params">(smartDate that)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> compareTo(that) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Compares two dates chronologically.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the value &#123;<span class="hljs-doctag">@code</span> 0&#125; if the argument date is equal to this date;</span><br><span class="hljs-comment">     *         a negative integer if this date is chronologically less than</span><br><span class="hljs-comment">     *         the argument date; and a positive ineger if this date is chronologically</span><br><span class="hljs-comment">     *         after the argument date</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(smartDate that)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.year  &lt; that.year)  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.year  &gt; that.year)  <span class="hljs-keyword">return</span> +<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.month &lt; that.month) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.month &gt; that.month) <span class="hljs-keyword">return</span> +<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.day   &lt; that.day)   <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.day   &gt; that.day)   <span class="hljs-keyword">return</span> +<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Difference between a and b</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the number of days between a and b</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numBetween</span><span class="hljs-params">(smartDate b)</span></span>&#123;<br>        smartDate t = <span class="hljs-keyword">new</span> smartDate(<span class="hljs-keyword">this</span>.month, <span class="hljs-keyword">this</span>.day, <span class="hljs-keyword">this</span>.year);<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (t.isBefore(b))&#123;<br>            t=t.next();<br>            num++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * week</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> The week of the smartDay</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">week</span><span class="hljs-params">()</span></span>&#123;<br>        smartDate a = <span class="hljs-keyword">new</span> smartDate(<span class="hljs-number">12</span>, <span class="hljs-number">31</span>, <span class="hljs-number">1999</span>);<br>        <span class="hljs-keyword">final</span> String[] WEEK = &#123;<span class="hljs-string">&quot;Saturday&quot;</span>, <span class="hljs-string">&quot;Sunday&quot;</span>, <span class="hljs-string">&quot;Monday&quot;</span>, <span class="hljs-string">&quot;Tuesday&quot;</span>, <span class="hljs-string">&quot;Wednesday&quot;</span>, <span class="hljs-string">&quot;Thurday&quot;</span>, <span class="hljs-string">&quot;Friday&quot;</span>&#125;;<br>        <span class="hljs-keyword">return</span> WEEK[a.numBetween(<span class="hljs-keyword">this</span>)%<span class="hljs-number">7</span>-<span class="hljs-number">1</span>];<br>        <br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns an integer hash code for this date.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> an integer hash code for this date</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> hash = <span class="hljs-number">17</span>;<br>        hash = <span class="hljs-number">31</span>*hash + month;<br>        hash = <span class="hljs-number">31</span>*hash + day;<br>        hash = <span class="hljs-number">31</span>*hash + year;<br>        <span class="hljs-keyword">return</span> hash;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1211</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        smartDate today = <span class="hljs-keyword">new</span> smartDate(<span class="hljs-number">2</span>, <span class="hljs-number">25</span>, <span class="hljs-number">2018</span>);<br>        smartDate birthday = <span class="hljs-keyword">new</span> smartDate(<span class="hljs-number">10</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1971</span>);<br>        StdOut.println(today);<br>        StdOut.println(birthday);<br>        StdOut.println(birthday.equals(today));<br>        StdOut.println(today.week());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> q<span class="hljs-number">1211</span><br><span class="hljs-attribute">2</span>/<span class="hljs-number">25</span>/<span class="hljs-number">2018</span><br><span class="hljs-attribute">10</span>/<span class="hljs-number">16</span>/<span class="hljs-number">1971</span><br><span class="hljs-attribute">false</span><br><span class="hljs-attribute">Sunday</span><br></code></pre></td></tr></table></figure><h5 id="1-2-13-用我们对-Date-的实现（请见表1-2-12）作为模板实现-Translation-类型。"><a href="#1-2-13-用我们对-Date-的实现（请见表1-2-12）作为模板实现-Translation-类型。" class="headerlink" title="1.2.13 用我们对 Date 的实现（请见表1.2.12）作为模板实现 Translation 类型。"></a>1.2.13 用我们对 <code>Date</code> 的实现（请见表1.2.12）作为模板实现 <code>Translation</code> 类型。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Transactions</span></span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">who</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//客户名</span><br>    <span class="hljs-function">Date <span class="hljs-title">when</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//交易日期</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">amount</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//交易金额</span><br>    <span class="hljs-function">String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Transaction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Transactions</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String  who;      <span class="hljs-comment">// customer</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Date    when;     <span class="hljs-comment">// date</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span>  amount;   <span class="hljs-comment">// amount</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Transaction</span><span class="hljs-params">(String who, Date when, <span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (Double.isNaN(amount) || Double.isInfinite(amount))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Amount cannot be NaN or infinite&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.who    = who;<br>        <span class="hljs-keyword">this</span>.when   = when;<br>        <span class="hljs-keyword">this</span>.amount = amount;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">when</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> when;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">who</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> who;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">amount</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> amount;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%-10s %10s %8.2f&quot;</span>, who, when, amount);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Transaction a = <span class="hljs-keyword">new</span> Transaction(<span class="hljs-string">&quot;Turing&quot;</span>, <span class="hljs-keyword">new</span> Date(<span class="hljs-string">&quot;6/17/1990&quot;</span>), <span class="hljs-number">644.08</span>);<br>        StdOut.println(a);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-2-14-用我我们对-Date-中的-equals-方法的实现（请见-1-2-5-8-节中的-Date-类代码框）作为模板，实现-Translation-中的-equals-方法。"><a href="#1-2-14-用我我们对-Date-中的-equals-方法的实现（请见-1-2-5-8-节中的-Date-类代码框）作为模板，实现-Translation-中的-equals-方法。" class="headerlink" title="1.2.14 用我我们对 Date 中的 equals() 方法的实现（请见 1.2.5.8 节中的 Date 类代码框）作为模板，实现 Translation 中的 equals() 方法。"></a>1.2.14 用我我们对 <code>Date</code> 中的 <code>equals()</code> 方法的实现（请见 1.2.5.8 节中的 <code>Date</code> 类代码框）作为模板，实现 <code>Translation</code> 中的 <code>equals()</code> 方法。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object other)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (other == <span class="hljs-keyword">this</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (other == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (other.getClass() != <span class="hljs-keyword">this</span>.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    Transaction that = (Transaction) other;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.amount == that.amount) &amp;&amp; (<span class="hljs-keyword">this</span>.who.equals(that.who))<br>                                        &amp;&amp; (<span class="hljs-keyword">this</span>.when.equals(that.when));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法第四版</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法-第四版》答案系列-1.1 实验题篇</title>
    <link href="/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-1%E5%AE%9E%E9%AA%8C%E9%A2%98%E7%AF%87/"/>
    <url>/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-1%E5%AE%9E%E9%AA%8C%E9%A2%98%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近开始学习《算法-第四版》一书，将我自己做的书后习题分享给大家，本篇是这一系列的第一篇，包含了书上&lt;1.1 基础编程模型&gt;的习题的实验题部分,本篇习题位于 P32 ~ P37 ，如有错误，还请指正。</p></blockquote><blockquote><p>本篇答案中部分 java 代码用到了书中的包，如需使用请去书中配套网站安装。</p></blockquote><p>以下的答案在电脑端查看可以显示目录</p><h3 id="实验题"><a href="#实验题" class="headerlink" title="实验题"></a>实验题</h3><h5 id="1-1-35-模拟掷骰子。以下代码能够计算每种两个骰子之和的准确概率分布："><a href="#1-1-35-模拟掷骰子。以下代码能够计算每种两个骰子之和的准确概率分布：" class="headerlink" title="1.1.35 模拟掷骰子。以下代码能够计算每种两个骰子之和的准确概率分布："></a>1.1.35 模拟掷骰子。以下代码能够计算每种两个骰子之和的准确概率分布：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> SIDES = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">double</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">2</span>*SIDES+<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= SIDES; i++)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= SIDES; j++)&#123;<br>        dist[i+j] += <span class="hljs-number">1.0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">2</span>; k &lt;= <span class="hljs-number">2</span>*SIDES; k++)&#123;<br>    disk[k] /= <span class="hljs-number">36.0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>dist[i]</code> 的值就是两个骰子之和为 i 的概率。用实验模拟 N 次掷骰子，并在计算两个 1 到 6 之间的随机整数之和时记录每个值出现的频率以验证他们的概率。 N 要多大才能保证你的经验数据和准确数据的吻合程度达到小数点后三位？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1135</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> SIDES = <span class="hljs-number">6</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算每种两个骰子之和的准确概率分布</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span>[] theoryThrow()&#123;<br>         <span class="hljs-keyword">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>*SIDES+<span class="hljs-number">1</span>];<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;=  SIDES; i++)&#123;<br>             <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= SIDES; j++)&#123;<br>                 dist[i+j] ++;<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">double</span>[] disk = frequency(dist);<br>         <span class="hljs-keyword">return</span> disk;<br>     &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算概率</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num[] 投掷频数数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span>[] frequency(<span class="hljs-keyword">int</span>[] num)&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">double</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">2</span>*SIDES+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>*SIDES; i++)&#123;<br>            sum += num[i];<br>        &#125;<br>        <span class="hljs-keyword">double</span> dsume = sum*<span class="hljs-number">1.0</span>;<br>        <span class="hljs-keyword">double</span>[] disk = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">2</span>*SIDES+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">2</span>; k &lt;= <span class="hljs-number">2</span>*SIDES; k++)&#123;<br>            disk[k] = (num[k]*<span class="hljs-number">1.0</span>)/dsume;<br>        &#125;<br>        <span class="hljs-keyword">return</span> disk;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 掷骰子 n 次，返回得到的所有可能值得数目</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n 投掷得次数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] dice(<span class="hljs-keyword">int</span> n)&#123;<br>        <span class="hljs-keyword">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>*SIDES+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">int</span> a = StdRandom.uniform(<span class="hljs-number">1</span>, SIDES+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> b = StdRandom.uniform(<span class="hljs-number">1</span>, SIDES+<span class="hljs-number">1</span>);<br>            dist[a+b]++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dist;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 比较a与b的误差是否在10的-k次方之内</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a[]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b[]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> k 10的-k次方</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">statisticalError</span><span class="hljs-params">(<span class="hljs-keyword">double</span>[] a, <span class="hljs-keyword">double</span>[] b, <span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(a.length != b.length)&#123;<br>            System.exit(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">double</span> m = <span class="hljs-number">1.0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)&#123;<br>            m /= <span class="hljs-number">10.0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (a[i]-b[i] &gt; m)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> timesall = <span class="hljs-number">10000</span>;<span class="hljs-comment">//试验次数</span><br>        <span class="hljs-keyword">double</span>[] average = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[timesall];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> times = <span class="hljs-number">0</span>; times &lt; timesall; times++)&#123;<br>            <span class="hljs-keyword">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>*SIDES+<span class="hljs-number">1</span>];<span class="hljs-comment">//保存总频数</span><br>            <span class="hljs-keyword">int</span> n = <span class="hljs-number">100</span>;<span class="hljs-comment">//每次增加的次数</span><br>            <span class="hljs-keyword">int</span> N = <span class="hljs-number">0</span>;<span class="hljs-comment">//实验总次数</span><br>            <span class="hljs-keyword">int</span> k = <span class="hljs-number">3</span>;<span class="hljs-comment">//10的-3次方</span><br>            <span class="hljs-keyword">double</span>[] thought = theoryThrow();<br>            <span class="hljs-keyword">double</span>[] actual = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">2</span>*SIDES+<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">do</span>&#123;<br>                <span class="hljs-keyword">int</span>[] a = dice(n);<span class="hljs-comment">//掷骰子n次</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++)&#123;<br>                    count[i] += a[i];<br>                &#125;<br>                N += n;<span class="hljs-comment">//统计总数</span><br>                actual = frequency(count);<span class="hljs-comment">//计算频率</span><br>            &#125; <span class="hljs-keyword">while</span> (!statisticalError(thought, actual, k));<br>            average[times] = N;<br>        &#125;<br>        System.out.println(StdStats.mean(average));<br>    &#125;     <br>&#125;<br></code></pre></td></tr></table></figure><p>答：在运行一万次后，发现平均 128639.41 次就可保证经验数据和准确数据的吻合程度达到小数点后三位</p><h5 id="1-1-36-乱序检查。通过实验检查表-1-1-10-中的乱序代码是否能够产生预期的效果。编写一个程序-ShuffleTest-接受命令行参数-M-和-N-，将大小为-M-的数组打乱-N-次切每次打乱之前都将数组重新初始化为-a-i-i-。打印一个-M×M-的表格，对于所欲的列-j-，行-i-表示的是-i-在打乱之后落到-j-的位置的次数。-数组中的所有元素的值都应该接近于N-M。"><a href="#1-1-36-乱序检查。通过实验检查表-1-1-10-中的乱序代码是否能够产生预期的效果。编写一个程序-ShuffleTest-接受命令行参数-M-和-N-，将大小为-M-的数组打乱-N-次切每次打乱之前都将数组重新初始化为-a-i-i-。打印一个-M×M-的表格，对于所欲的列-j-，行-i-表示的是-i-在打乱之后落到-j-的位置的次数。-数组中的所有元素的值都应该接近于N-M。" class="headerlink" title="1.1.36 乱序检查。通过实验检查表 1.1.10 中的乱序代码是否能够产生预期的效果。编写一个程序 ShuffleTest ,接受命令行参数 M 和 N ，将大小为 M 的数组打乱 N 次切每次打乱之前都将数组重新初始化为 a[i] = i 。打印一个 M×M 的表格，对于所欲的列 j ，行 i 表示的是 i 在打乱之后落到 j 的位置的次数。 数组中的所有元素的值都应该接近于N/M。"></a>1.1.36 乱序检查。通过实验检查表 1.1.10 中的乱序代码是否能够产生预期的效果。编写一个程序 <code>ShuffleTest</code> ,接受命令行参数 M 和 N ，将大小为 M 的数组打乱 N 次切每次打乱之前都将数组重新初始化为 a[i] = i 。打印一个 M×M 的表格，对于所欲的列 j ，行 i 表示的是 i 在打乱之后落到 j 的位置的次数。 数组中的所有元素的值都应该接近于N/M。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1136</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 随机将 double 数组中的元素排序</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> N = a.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>            <span class="hljs-comment">//将 a[i] 和 a[i..N-i] 中任意一个元素交换</span><br>            <span class="hljs-keyword">int</span> r = i + StdRandom.uniform(N-i);<br>            <span class="hljs-keyword">int</span> temp = a[i];<br>            a[i] = a[r];<br>            a[r] = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> M = StdIn.readInt();<span class="hljs-comment">//数组大小</span><br>        <span class="hljs-keyword">int</span> N = StdIn.readInt();<span class="hljs-comment">//打乱次数</span><br>        <span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[M];<br>        <span class="hljs-keyword">int</span>[][] exal = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[M][M];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; M; j++)&#123;<br>                <span class="hljs-comment">//System.out.println(&quot;j:&quot;+j);</span><br>                array[j] = j;<br>            &#125;<br>            shuffle(array);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; M; k++)&#123;<br>                exal [array[k]][k]++;<br>                <span class="hljs-comment">//System.out.println(array[k]);</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; M; j++)&#123;<br>                System.out.print(exal[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns">M=<span class="hljs-number">10</span><br>N=<span class="hljs-number">10000000</span><br>运行结果：<br><span class="hljs-number">1000125</span> <span class="hljs-number">1002701</span> <span class="hljs-number">1000123</span> <span class="hljs-number">999941</span>  <span class="hljs-number">998460</span>  <span class="hljs-number">998247</span>  <span class="hljs-number">1001654</span> <span class="hljs-number">998478</span>  <span class="hljs-number">1000194</span> <span class="hljs-number">1000077</span><br><span class="hljs-number">998618</span>  <span class="hljs-number">1001400</span> <span class="hljs-number">1000146</span> <span class="hljs-number">1000526</span> <span class="hljs-number">999514</span>  <span class="hljs-number">1000185</span> <span class="hljs-number">1000057</span> <span class="hljs-number">1000484</span> <span class="hljs-number">998135</span>  <span class="hljs-number">1000935</span><br><span class="hljs-number">998984</span>  <span class="hljs-number">1001470</span> <span class="hljs-number">1000030</span> <span class="hljs-number">999937</span>  <span class="hljs-number">1000037</span> <span class="hljs-number">999900</span>  <span class="hljs-number">999298</span>  <span class="hljs-number">1000187</span> <span class="hljs-number">1000275</span> <span class="hljs-number">999882</span><br><span class="hljs-number">999302</span>  <span class="hljs-number">997559</span>  <span class="hljs-number">999851</span>  <span class="hljs-number">1000042</span> <span class="hljs-number">1000360</span> <span class="hljs-number">1000301</span> <span class="hljs-number">1001621</span> <span class="hljs-number">1000925</span> <span class="hljs-number">1000557</span> <span class="hljs-number">999482</span><br><span class="hljs-number">999465</span>  <span class="hljs-number">997970</span>  <span class="hljs-number">999940</span>  <span class="hljs-number">1001040</span> <span class="hljs-number">999667</span>  <span class="hljs-number">1001078</span> <span class="hljs-number">1000853</span> <span class="hljs-number">999033</span>  <span class="hljs-number">1001058</span> <span class="hljs-number">999896</span><br><span class="hljs-number">1000576</span> <span class="hljs-number">999557</span>  <span class="hljs-number">999687</span>  <span class="hljs-number">1000324</span> <span class="hljs-number">998885</span>  <span class="hljs-number">1000500</span> <span class="hljs-number">1000763</span> <span class="hljs-number">1000869</span> <span class="hljs-number">999800</span>  <span class="hljs-number">999039</span><br><span class="hljs-number">1001858</span> <span class="hljs-number">1000688</span> <span class="hljs-number">999901</span>  <span class="hljs-number">999096</span>  <span class="hljs-number">999045</span>  <span class="hljs-number">1000684</span> <span class="hljs-number">998944</span>  <span class="hljs-number">999273</span>  <span class="hljs-number">1000210</span> <span class="hljs-number">1000301</span><br><span class="hljs-number">1001321</span> <span class="hljs-number">998768</span>  <span class="hljs-number">1001317</span> <span class="hljs-number">998415</span>  <span class="hljs-number">1001425</span> <span class="hljs-number">1000167</span> <span class="hljs-number">999267</span>  <span class="hljs-number">999064</span>  <span class="hljs-number">999873</span>  <span class="hljs-number">1000383</span><br><span class="hljs-number">999501</span>  <span class="hljs-number">999099</span>  <span class="hljs-number">998095</span>  <span class="hljs-number">1000804</span> <span class="hljs-number">1001714</span> <span class="hljs-number">999615</span>  <span class="hljs-number">999237</span>  <span class="hljs-number">1000303</span> <span class="hljs-number">1000350</span> <span class="hljs-number">1001282</span><br><span class="hljs-number">1000250</span> <span class="hljs-number">1000788</span> <span class="hljs-number">1000910</span> <span class="hljs-number">999875</span>  <span class="hljs-number">1000893</span> <span class="hljs-number">999323</span>  <span class="hljs-number">998306</span>  <span class="hljs-number">1001384</span> <span class="hljs-number">999548</span>  <span class="hljs-number">998723</span><br></code></pre></td></tr></table></figure><p>答：打乱10000000次后，数组中所有元素的值都接近 N/M ，该乱序代码可以产生预期的效果。</p><h5 id="1-1-37-糟糕的打乱。假设在我们的乱序代码中你选择的是一个-0-到-N-1-而非-i-到-N-1-之间的随机整数。证明得到的结果并非均匀地分布在-N-种可能性之间。用上一题中的测试检验这个版本。"><a href="#1-1-37-糟糕的打乱。假设在我们的乱序代码中你选择的是一个-0-到-N-1-而非-i-到-N-1-之间的随机整数。证明得到的结果并非均匀地分布在-N-种可能性之间。用上一题中的测试检验这个版本。" class="headerlink" title="1.1.37 糟糕的打乱。假设在我们的乱序代码中你选择的是一个 0 到 N-1 而非 i 到 N-1 之间的随机整数。证明得到的结果并非均匀地分布在 N! 种可能性之间。用上一题中的测试检验这个版本。"></a>1.1.37 糟糕的打乱。假设在我们的乱序代码中你选择的是一个 0 到 N-1 而非 i 到 N-1 之间的随机整数。证明得到的结果并非均匀地分布在 N! 种可能性之间。用上一题中的测试检验这个版本。</h5><p>答：将1.1.36中 <code>int r = i + StdRandom.uniform(N-i);</code> 替换为 <code>int r = i + StdRandom.uniform(N-i);</code> 后，再次运行10000000次，可以发现，结果不是均匀分布。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">M=10<br>N=10000000<br>运行结果：<br>1000512<span class="hljs-number"> 998403 </span><span class="hljs-number"> 998755 </span><span class="hljs-number"> 1001409 </span>999491 <span class="hljs-number"> 1001334 </span>999986 <span class="hljs-number"> 999791 </span><span class="hljs-number"> 1000627 </span>999692<br>0      <span class="hljs-number"> 1015798 </span>1035054<span class="hljs-number"> 1069850 </span>1131659<span class="hljs-number"> 1201769 </span>1166053<span class="hljs-number"> 1144051 </span>1124908 1110858<br>0      <span class="hljs-number"> 638419 </span><span class="hljs-number"> 1070539 </span>1142224<span class="hljs-number"> 1266417 </span>1401483<span class="hljs-number"> 1333772 </span>1287170<span class="hljs-number"> 1248904 </span>611072<br>0      <span class="hljs-number"> 472150 </span><span class="hljs-number"> 1024152 </span>1216205<span class="hljs-number"> 1401275 </span>1599316<span class="hljs-number"> 1498780 </span>1426079<span class="hljs-number"> 917823 </span> 444220<br>0      <span class="hljs-number"> 388051 </span><span class="hljs-number"> 857665 </span><span class="hljs-number"> 1464177 </span>1533597<span class="hljs-number"> 1799259 </span>1666849<span class="hljs-number"> 1178928 </span>749903  361571<br>0      <span class="hljs-number"> 388336 </span><span class="hljs-number"> 858027 </span><span class="hljs-number"> 1464694 </span>2333409<span class="hljs-number"> 1000428 </span>1666780<span class="hljs-number"> 1177122 </span>750201  361003<br>0      <span class="hljs-number"> 638571 </span><span class="hljs-number"> 1355932 </span>2214444<span class="hljs-number"> 533755 </span><span class="hljs-number"> 798620 </span><span class="hljs-number"> 666697 </span><span class="hljs-number"> 1929717 </span>1250644 611620<br>0      <span class="hljs-number"> 1305738 </span>2692216<span class="hljs-number"> 213467 </span><span class="hljs-number"> 399844 </span><span class="hljs-number"> 598315 </span><span class="hljs-number"> 500518 </span><span class="hljs-number"> 428702 </span><span class="hljs-number"> 2582851 </span>1278349<br>0      <span class="hljs-number"> 4140574 </span>71709  <span class="hljs-number"> 142410 </span><span class="hljs-number"> 267287 </span><span class="hljs-number"> 399491 </span><span class="hljs-number"> 333710 </span><span class="hljs-number"> 285574 </span><span class="hljs-number"> 249436 </span> 4109809<br>8999488<span class="hljs-number"> 13960 </span> <span class="hljs-number"> 35951 </span> <span class="hljs-number"> 71120 </span> <span class="hljs-number"> 133266 </span><span class="hljs-number"> 199985 </span><span class="hljs-number"> 166855 </span><span class="hljs-number"> 142866 </span><span class="hljs-number"> 124703 </span> 111806<br></code></pre></td></tr></table></figure><h5 id="1-1-38-二分查找与暴力查找。根据-1-1-10-4-节给出的暴力查找法编写一个程序-BruteForceSearch-，在你的计算机上比较它和-BinartSearch-处理-largeW-txt-和-largeT-txt-所需的时间。"><a href="#1-1-38-二分查找与暴力查找。根据-1-1-10-4-节给出的暴力查找法编写一个程序-BruteForceSearch-，在你的计算机上比较它和-BinartSearch-处理-largeW-txt-和-largeT-txt-所需的时间。" class="headerlink" title="1.1.38 二分查找与暴力查找。根据 1.1.10.4 节给出的暴力查找法编写一个程序 BruteForceSearch ，在你的计算机上比较它和 BinartSearch 处理 largeW.txt 和 largeT.txt 所需的时间。"></a>1.1.38 二分查找与暴力查找。根据 1.1.10.4 节给出的暴力查找法编写一个程序 <code>BruteForceSearch</code> ，在你的计算机上比较它和 <code>BinartSearch</code> 处理 largeW.txt 和 largeT.txt 所需的时间。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1138</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二分查找</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">BinarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key,<span class="hljs-keyword">int</span>[] a)</span></span>&#123;<br>        <span class="hljs-comment">//数组必须是有序的</span><br>        <span class="hljs-keyword">int</span> lo = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> hi = a.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(lo &lt;= hi)&#123;<br>            <span class="hljs-comment">//被查找的键要么不存在，要么必然存在与a[lo~hi]之中</span><br>            <span class="hljs-keyword">int</span> mid = lo + (hi - lo) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(key &lt; a[mid])&#123;<br>                hi = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; a[mid]) &#123;<br>                lo = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 暴力查找</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">BruteForceSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span>[] a)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (a[i] == key)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] whitelist = In.readInts(args[<span class="hljs-number">0</span>]);<br>        Arrays.sort(whitelist);<br>        <span class="hljs-keyword">long</span> t1=System.currentTimeMillis();<br>        <span class="hljs-keyword">while</span>(!StdIn.isEmpty())&#123;<br>            <span class="hljs-comment">//读取键值，如果不存在与白名单中则将其打印</span><br>            <span class="hljs-keyword">int</span> key = StdIn.readInt();<br>            BinarySearch(key,whitelist);<span class="hljs-comment">//二分</span><br>            <span class="hljs-comment">//BruteForceSearch(key,whitelist);//暴力</span><br>        &#125;<br>        <span class="hljs-keyword">long</span> t2=System.currentTimeMillis();<br>        System.out.println(t2 - t1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在阿里云Ecs学生机上运行：</p><ol><li>二分查找：13701毫秒 = 13.701秒</li><li>暴力查找：1925849毫秒 = 1925.849秒 大约半小时</li></ol><h5 id="1-1-39-随机匹配。编写一个使用-BinarySearch-的程序，它从命令行接受一个整形参数-T-，并分别会针对-N-103-104-105-和-106-将一下实验运行-T-遍：生成两个大小为-N-的随机-6-位正整数数组并找出同时存在于两个数组中的整数的数量。-打印一个表格，对于每个-N-，给出-T-次实验中该数量的平均值。"><a href="#1-1-39-随机匹配。编写一个使用-BinarySearch-的程序，它从命令行接受一个整形参数-T-，并分别会针对-N-103-104-105-和-106-将一下实验运行-T-遍：生成两个大小为-N-的随机-6-位正整数数组并找出同时存在于两个数组中的整数的数量。-打印一个表格，对于每个-N-，给出-T-次实验中该数量的平均值。" class="headerlink" title="1.1.39 随机匹配。编写一个使用 BinarySearch 的程序，它从命令行接受一个整形参数 T ，并分别会针对 N = 103, 104, 105 和 106 将一下实验运行 T 遍：生成两个大小为 N 的随机 6 位正整数数组并找出同时存在于两个数组中的整数的数量。 打印一个表格，对于每个 N ，给出 T 次实验中该数量的平均值。"></a>1.1.39 随机匹配。编写一个使用 <code>BinarySearch</code> 的程序，它从命令行接受一个整形参数 T ，并分别会针对 N = 10<sup>3</sup>, 10<sup>4</sup>, 10<sup>5</sup> 和 10<sup>6</sup> 将一下实验运行 T 遍：生成两个大小为 N 的随机 6 位正整数数组并找出同时存在于两个数组中的整数的数量。 打印一个表格，对于每个 N ，给出 T 次实验中该数量的平均值。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1139</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二分查找</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">BinarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key,<span class="hljs-keyword">int</span>[] a)</span></span>&#123;<br>        <span class="hljs-comment">//数组必须是有序的</span><br>        <span class="hljs-keyword">int</span> lo = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> hi = a.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(lo &lt;= hi)&#123;<br>            <span class="hljs-comment">//被查找的键要么不存在，要么必然存在与a[lo~hi]之中</span><br>            <span class="hljs-keyword">int</span> mid = lo + (hi - lo) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(key &lt; a[mid])&#123;<br>                hi = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; a[mid]) &#123;<br>                lo = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成大小为 N 的六位随机数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] buld (<span class="hljs-keyword">int</span> N)&#123;<br>        <span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>            StdOut.println(<span class="hljs-string">&quot;i&quot;</span>+ i);<br>            array[i] = StdRandom.uniform(<span class="hljs-number">100000</span>, <span class="hljs-number">1000000</span>);<br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 做实验</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> T 实验次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> N 生成数组大小</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span>[] running(<span class="hljs-keyword">int</span> T, <span class="hljs-keyword">int</span> N)&#123;<br>        <span class="hljs-keyword">double</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[T];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>; t &lt; T; t++)&#123;<br>            <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span>[] a = buld(N);<br>            <span class="hljs-keyword">int</span>[] b = buld(N);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>                <span class="hljs-keyword">int</span> c = BinarySearch(a[i], b);<br>                <span class="hljs-keyword">if</span>(c &gt;= <span class="hljs-number">0</span>)&#123;<br>                    ans++;<br>                &#125;<br>            &#125;<br>            num[t] = ans*<span class="hljs-number">1.0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        StdOut.print(<span class="hljs-string">&quot;实验次数：&quot;</span>);<br>        <span class="hljs-keyword">int</span> T = StdIn.readInt();<br>        StdOut.println();<br>        <span class="hljs-keyword">double</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[T];<span class="hljs-comment">//存储结果</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> N = <span class="hljs-number">1000</span>;<br>            <span class="hljs-keyword">double</span>[] answer = running(T, N);<br>            StdOut.println(<span class="hljs-string">&quot;N=&quot;</span> + N +<span class="hljs-string">&quot;，T=&quot;</span> + T + <span class="hljs-string">&quot;，平均值:&quot;</span>+StdStats.mean(answer));<br>        &#125;<br>        &#123;<br>            <span class="hljs-keyword">int</span> N = <span class="hljs-number">10000</span>;<br>            <span class="hljs-keyword">double</span>[] answer = running(T, N);<br>            StdOut.println(<span class="hljs-string">&quot;N=&quot;</span> + N +<span class="hljs-string">&quot;，T=&quot;</span> + T + <span class="hljs-string">&quot;，平均值:&quot;</span>+StdStats.mean(answer));<br>        &#125;<br>        &#123;<br>            <span class="hljs-keyword">int</span> N = <span class="hljs-number">100000</span>;<br>            <span class="hljs-keyword">double</span>[] answer = running(T, N);<br>            StdOut.println(<span class="hljs-string">&quot;N=&quot;</span> + N +<span class="hljs-string">&quot;，T=&quot;</span> + T + <span class="hljs-string">&quot;，平均值:&quot;</span>+StdStats.mean(answer));<br>        &#125;<br>        &#123;<br>            <span class="hljs-keyword">int</span> N = <span class="hljs-number">1000000</span>;<br>            <span class="hljs-keyword">double</span>[] answer = running(T, N);<br>            StdOut.println(<span class="hljs-string">&quot;N=&quot;</span> + N +<span class="hljs-string">&quot;，T=&quot;</span> + T + <span class="hljs-string">&quot;，平均值:&quot;</span>+StdStats.mean(answer));<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">实验次数：<span class="hljs-number">1000000</span><br><br>N=<span class="hljs-number">1000</span>，T=<span class="hljs-number">1000000</span>，平均值:<span class="hljs-number">0.010973</span><br>N=<span class="hljs-number">10000</span>，T=<span class="hljs-number">1000000</span>，平均值:<span class="hljs-number">0.148369</span><br>N=<span class="hljs-number">100000</span>，T=<span class="hljs-number">1000000</span>，平均值:<span class="hljs-number">1.838557</span><br>N=<span class="hljs-number">1000000</span>，T=<span class="hljs-number">1000000</span>，平均值:<span class="hljs-number">21.962084</span><br></code></pre></td></tr></table></figure><p>1.1习题完。</p>]]></content>
    
    
    <categories>
      
      <category>算法第四版</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法-第四版》答案系列-1.1 提高题篇</title>
    <link href="/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-1%E6%8F%90%E9%AB%98%E9%A2%98%E7%AF%87/"/>
    <url>/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-1%E6%8F%90%E9%AB%98%E9%A2%98%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近开始学习《算法-第四版》一书，将我自己做的书后习题分享给大家，本篇是这一系列的第一篇，包含了书上&lt;1.1 基础编程模型&gt;的习题的提高题部分,本篇习题位于 P32 ~ P37 ，如有错误，还请指正。</p></blockquote><blockquote><p>本篇答案中部分 java 代码用到了书中的包，如需使用请去书中配套网站安装。</p></blockquote><p>以下的答案在电脑端查看可以显示目录</p><h3 id="提高题"><a href="#提高题" class="headerlink" title="提高题"></a>提高题</h3><h5 id="1-1-26-将三个数字排序。假设-a、b、c-和-t-都是同一种原始数字类型的变量。证明以下代码能够将-a、b、c-按照升序排列："><a href="#1-1-26-将三个数字排序。假设-a、b、c-和-t-都是同一种原始数字类型的变量。证明以下代码能够将-a、b、c-按照升序排列：" class="headerlink" title="1.1.26 将三个数字排序。假设 a、b、c 和 t 都是同一种原始数字类型的变量。证明以下代码能够将 a、b、c 按照升序排列："></a>1.1.26 将三个数字排序。假设 a、b、c 和 t 都是同一种原始数字类型的变量。证明以下代码能够将 a、b、c 按照升序排列：</h5><pre><code>if (a &gt; b) &#123; t = a; a = b; b = t &#125;    ==&gt; 此时，a一定为 a、b 中的较小者if (a &gt; c) &#123; t = a; a = c; c = t &#125;    ==&gt; 此时，a一定为 a、b、c 中的最小者if (b &gt; c) &#123; t = b; b = c; c = t &#125;    ==&gt; 此时，c一定为 a、b、c 中的最大者，a、b、c 按照升序排列</code></pre><h5 id="1-1-27-二项分布。估计用以下代码计算-binomial-100-50-0-25-将会发生的递归调用次数："><a href="#1-1-27-二项分布。估计用以下代码计算-binomial-100-50-0-25-将会发生的递归调用次数：" class="headerlink" title="1.1.27 二项分布。估计用以下代码计算 binomial(100, 50, 0.25) 将会发生的递归调用次数："></a>1.1.27 二项分布。估计用以下代码计算 <code>binomial(100, 50, 0.25)</code> 将会发生的递归调用次数：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">binomial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">double</span> p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (N == <span class="hljs-number">0</span> &amp;&amp; k == <span class="hljs-number">0</span>) return1<span class="hljs-number">.0</span>;<br>    <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">0</span> || k &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1.0</span> - p)*binomial(N-<span class="hljs-number">1</span>, k, p) + p*binomial(N-<span class="hljs-number">1</span>, k-<span class="hljs-number">1</span>, p);<br>&#125;<br></code></pre></td></tr></table></figure><p>将已经已经计算过的值保存在数组中并给出一个更好的实现。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">在阿里云<span class="hljs-variable">Ecs</span>学生机中运行的结果为：<br>运行了一天，放弃了。<br><br>下面程序的计算结果：<br><span class="hljs-number">4.507310875086383</span><span class="hljs-built_in">E</span><span class="hljs-operator">-</span><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过将计算过的值保存在数组中得到更好的实现：</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1127</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> K = <span class="hljs-number">50</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[N + <span class="hljs-number">1</span>][K + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">binomial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">double</span> p)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(N &lt; <span class="hljs-number">0</span> || k &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(N == <span class="hljs-number">0</span> &amp;&amp; k == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span>(array[N][k] == -<span class="hljs-number">1.0</span>)<br>                array[N][k] = <span class="hljs-number">1.0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (array[N][k] == -<span class="hljs-number">1.0</span>)&#123;<br>                array[N][k] = (<span class="hljs-number">1.0</span> - p) * binomial(N - <span class="hljs-number">1</span>, k, p) + p * binomial(N - <span class="hljs-number">1</span>, k - <span class="hljs-number">1</span>, p);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array[N][k];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 数组array初始化</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= K; ++j)&#123;<br>                array[i][j] = -<span class="hljs-number">1.0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 计算概率</span><br>        <span class="hljs-keyword">double</span> res = binomial(N, K, <span class="hljs-number">0.25</span>);<br>        System.out.println(res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1-28-删除重复元素。修改-BinarySearch-类的测试用例来删去排序之后白名单中的所有重复元素。"><a href="#1-1-28-删除重复元素。修改-BinarySearch-类的测试用例来删去排序之后白名单中的所有重复元素。" class="headerlink" title="1.1.28 删除重复元素。修改 BinarySearch 类的测试用例来删去排序之后白名单中的所有重复元素。"></a>1.1.28 删除重复元素。修改 <code>BinarySearch</code> 类的测试用例来删去排序之后白名单中的所有重复元素。</h5><p>答：在 <code>BinarySearch</code> 类中添加该方法并在测试用例中调用,传入 <code>whitelist</code> .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] clean(<span class="hljs-keyword">int</span>[] wlsort)&#123;<br>    <span class="hljs-keyword">int</span> m = wlsort.length;<br>    <span class="hljs-keyword">int</span>[] bfnum = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m];<span class="hljs-comment">//不重复的元素的位置；</span><br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;<br>    bfnum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">if</span>(wlsort[i-<span class="hljs-number">1</span>] != wlsort[i])&#123;<br>            bfnum[j] = i;<br>            j++;<br>        &#125;<br>    &#125;<br>    bfnum[j] = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span>[] afclean = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[--j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; j; i++)&#123;<br>        afclean[i] = wlsort[bfnum[i]];<br>    &#125;<br>    <span class="hljs-keyword">return</span> afclean;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1-29-等值键。为-BinarySearch-类添加一个静态方法-rank-，他接受一个键和一个整形有序数组（可能存在重复键）作为参数并返回数组中小于该键的元素数量，以及一个类似的方法-count-来返回数组中等于该键的元素的数量。注意：如果-i-和-j-分别是-rank-key-a-和-cout-key-a-的返回值，那么-a-i-i-j-1-就是数组中所有和-key-相等的元素。"><a href="#1-1-29-等值键。为-BinarySearch-类添加一个静态方法-rank-，他接受一个键和一个整形有序数组（可能存在重复键）作为参数并返回数组中小于该键的元素数量，以及一个类似的方法-count-来返回数组中等于该键的元素的数量。注意：如果-i-和-j-分别是-rank-key-a-和-cout-key-a-的返回值，那么-a-i-i-j-1-就是数组中所有和-key-相等的元素。" class="headerlink" title="1.1.29 等值键。为 BinarySearch 类添加一个静态方法 rank() ，他接受一个键和一个整形有序数组（可能存在重复键）作为参数并返回数组中小于该键的元素数量，以及一个类似的方法 count() 来返回数组中等于该键的元素的数量。注意：如果 i 和 j 分别是 rank(key, a) 和 cout(key, a) 的返回值，那么 a[i..i+j-1] 就是数组中所有和 key 相等的元素。"></a>1.1.29 等值键。为 <code>BinarySearch</code> 类添加一个静态方法 <code>rank()</code> ，他接受一个键和一个整形有序数组（可能存在重复键）作为参数并返回数组中小于该键的元素数量，以及一个类似的方法 <code>count()</code> 来返回数组中等于该键的元素的数量。注意：如果 i 和 j 分别是 <code>rank(key, a)</code> 和 <code>cout(key, a)</code> 的返回值，那么 a[i..i+j-1] 就是数组中所有和 key 相等的元素。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.lang.Math;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1129</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回数组中小于该键的元素数量(绝对值)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span>[] a)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> lo = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> hi = a.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(key &lt; a[<span class="hljs-number">0</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &gt; a[a.length-<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-keyword">return</span> a.length;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(lo &lt; hi)&#123;<br>            mid = lo + (hi - lo)/ <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (key &lt; a[mid])&#123;<br>                hi = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; a[mid])&#123;<br>                lo = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span>(mid &gt; <span class="hljs-number">0</span> &amp;&amp; a[mid] == a[mid - <span class="hljs-number">1</span>])&#123;<br>                    mid--;<br>                &#125;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -((lo+hi)/<span class="hljs-number">2</span>+mid)/<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回数组中等于该键的元素数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span>[] a)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> rank = rank(key, a);<br>        <span class="hljs-keyword">int</span> big = rank;<br>        <span class="hljs-keyword">if</span>(key &lt; a[<span class="hljs-number">0</span>] || key &gt; a[a.length-<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rank &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">while</span>(big+<span class="hljs-number">1</span> &lt;= a.length-<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(a[big] == a[big+<span class="hljs-number">1</span>])&#123;<br>                big++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> big-rank+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] whitelist = In.readInts(args[<span class="hljs-number">0</span>]);<br>        Arrays.sort(whitelist);<span class="hljs-comment">//升序排序</span><br>        StdOut.println(<span class="hljs-string">&quot;请输入一个整数，返回白名单中小于和等于这个数的个数：&quot;</span>);<br>        <span class="hljs-keyword">int</span> key = StdIn.readInt();<br>        <span class="hljs-keyword">int</span> ranknum = Math.abs(rank(key, whitelist));<br>        <span class="hljs-keyword">int</span> countnum = count(key, whitelist);<br>        System.out.println(<span class="hljs-string">&quot;数组中小于这个数的个数：&quot;</span> + ranknum);<br>        System.out.println(<span class="hljs-string">&quot;数组中等于这个数的个数：&quot;</span> + countnum);<br>        <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="1-1-30-数组练习。编写一段程序，创建一个-N-×-N-的布尔数组-a-。其中当-i-和-j-互质时（没有相同因子），a-i-j-为-true-，否则为-false-。"><a href="#1-1-30-数组练习。编写一段程序，创建一个-N-×-N-的布尔数组-a-。其中当-i-和-j-互质时（没有相同因子），a-i-j-为-true-，否则为-false-。" class="headerlink" title="1.1.30 数组练习。编写一段程序，创建一个 N × N 的布尔数组 a[][] 。其中当 i 和 j 互质时（没有相同因子），a[i][j] 为 true ，否则为 false 。"></a>1.1.30 数组练习。编写一段程序，创建一个 N × N 的布尔数组 <code>a[][]</code> 。其中当 i 和 j 互质时（没有相同因子），<code>a[i][j]</code> 为 <code>true</code> ，否则为 <code>false</code> 。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1130</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 判断两数是否互质，若两数的最大公约数是1则两数互质</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> b</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span>  若互质则true，否则false</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCoprime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (gcd(a, b) == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 使用欧几里得算法求解两数的最大公约数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> p 数一</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> q 数二</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span>  最大公约数</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(q == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> p;<br>        <span class="hljs-keyword">int</span> r = p % q;<br>        <span class="hljs-keyword">return</span> gcd(q, r);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 N×N的布尔二维数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> N 数组的维数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span>[][] boolArray(<span class="hljs-keyword">int</span> N) &#123;<br>        <span class="hljs-keyword">boolean</span>[][] boolArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[N][N];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; N; j++)&#123;<br>                boolArr[i][j] = isCoprime(i,j);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> boolArr;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = StdIn.readInt();<br>        <span class="hljs-keyword">boolean</span>[][] boolArr = boolArray(N);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; N; ++j)&#123;<br>                StdOut.print(boolArr[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            StdOut.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1-31-随机连接。编写一段程序，从命令行接受一个整数-N-和-double-值-p（-0-到-1-之间）作为参数，在一个圆上画出大小为-0-05-且间距相等的-N-个点，然后将每对点按照概率-p-用灰线链接。"><a href="#1-1-31-随机连接。编写一段程序，从命令行接受一个整数-N-和-double-值-p（-0-到-1-之间）作为参数，在一个圆上画出大小为-0-05-且间距相等的-N-个点，然后将每对点按照概率-p-用灰线链接。" class="headerlink" title="1.1.31 随机连接。编写一段程序，从命令行接受一个整数 N 和 double 值 p（ 0 到 1 之间）作为参数，在一个圆上画出大小为 0.05 且间距相等的 N 个点，然后将每对点按照概率 p 用灰线链接。"></a>1.1.31 随机连接。编写一段程序，从命令行接受一个整数 N 和 double 值 p（ 0 到 1 之间）作为参数，在一个圆上画出大小为 0.05 且间距相等的 N 个点，然后将每对点按照概率 p 用灰线链接。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1131</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 画圆</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x 圆心x坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y 圆心y坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r 半径r</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">double</span> y, <span class="hljs-keyword">double</span> r)</span> </span>&#123;<br>        StdDraw.setXscale(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> * x);<br>        StdDraw.setYscale(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> * y);<br>        StdDraw.setPenRadius(<span class="hljs-number">0.003</span>);<br>        StdDraw.setPenColor(StdDraw.BLACK);<br>        StdDraw.circle(x, y, r);<br>       <br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在圆上描点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x0 圆心x坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y0 圆心y坐标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r 半径r</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> N N个点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span>[][] drawPoints(<span class="hljs-keyword">double</span> x0, <span class="hljs-keyword">double</span> y0, <span class="hljs-keyword">double</span> r, <span class="hljs-keyword">int</span> N) &#123;<br>        <span class="hljs-keyword">double</span>[][] points = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[N][<span class="hljs-number">2</span>];<br>        StdDraw.setPenRadius(<span class="hljs-number">0.005</span>);<br>        StdDraw.setPenColor(StdDraw.GRAY);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> idx = <span class="hljs-number">0</span>; idx &lt; N; ++idx) &#123;<br>            <span class="hljs-keyword">double</span> x = x0 + r * Math.cos(<span class="hljs-number">2</span> * Math.PI * idx / N);<br>            <span class="hljs-keyword">double</span> y = y0 + r * Math.sin(<span class="hljs-number">2</span> * Math.PI * idx / N);<br>            StdDraw.point(x, y);<br>            points[idx][<span class="hljs-number">0</span>] = x;<br>            points[idx][<span class="hljs-number">1</span>] = y;<br>        &#125;<br>        <span class="hljs-keyword">return</span> points;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 以概率p随机连接顶点集points中的点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> points    点集</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p 概率p</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">randomLinkPoints</span><span class="hljs-params">(<span class="hljs-keyword">double</span>[][] points, <span class="hljs-keyword">double</span> p)</span> </span>&#123;<br>        StdDraw.setPenRadius(<span class="hljs-number">0.002</span>);<br>        StdDraw.setPenColor(StdDraw.RED);<span class="hljs-comment">//按照题目要求，此处应该是灰色。</span><br>        <span class="hljs-keyword">int</span> length = points.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; length; ++j)<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">true</span> == StdRandom.bernoulli(p))<br>                    StdDraw.line(points[i][<span class="hljs-number">0</span>], points[i][<span class="hljs-number">1</span>], points[j][<span class="hljs-number">0</span>], points[j][<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> N = <span class="hljs-number">25</span>;  <span class="hljs-comment">//在圆上描点的个数</span><br>        <span class="hljs-keyword">double</span> p = <span class="hljs-number">1</span>;  <span class="hljs-comment">//链接概率</span><br>        <span class="hljs-keyword">double</span> x = <span class="hljs-number">16.0</span>;<br>        <span class="hljs-keyword">double</span> y = <span class="hljs-number">16.0</span>;<br>        <span class="hljs-keyword">double</span> r = <span class="hljs-number">15.0</span>;<br>        drawCircle(x, y, r);<br>        <span class="hljs-keyword">double</span>[][] points = drawPoints(x, y, r, N);<br>        randomLinkPoints(points, p);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果（改成了红线，概率为 1 时）：</p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210216204531.jpeg"/><p><img src="%5Cimg%5Cin-post%5C2018%5C7%5C28%5Cq1131.jpg"></p><h5 id="1-1-32-直方图。假设标准输入流中含有一系列-double-值。编写一段程序，从命令行接受一个整数-N-和两个-double-值-l-和-r。将-l-r-分为-N-段并使用-StdDraw-画出输入流中的值落入每段的数量的直方图。"><a href="#1-1-32-直方图。假设标准输入流中含有一系列-double-值。编写一段程序，从命令行接受一个整数-N-和两个-double-值-l-和-r。将-l-r-分为-N-段并使用-StdDraw-画出输入流中的值落入每段的数量的直方图。" class="headerlink" title="1.1.32 直方图。假设标准输入流中含有一系列 double 值。编写一段程序，从命令行接受一个整数 N 和两个 double 值 l 和 r。将 (l, r) 分为 N 段并使用 StdDraw 画出输入流中的值落入每段的数量的直方图。"></a>1.1.32 直方图。假设标准输入流中含有一系列 <code>double</code> 值。编写一段程序，从命令行接受一个整数 N 和两个 <code>double</code> 值 l 和 r。将 <code>(l, r)</code> 分为 N 段并使用 <code>StdDraw</code> 画出输入流中的值落入每段的数量的直方图。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1132</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将接受到的数组分配到段落中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> N</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> l</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> r</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] allocation (<span class="hljs-keyword">double</span>[] dargs, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">double</span> l, <span class="hljs-keyword">double</span> r)&#123;<br>         Arrays.sort(dargs);<br>         <span class="hljs-keyword">double</span>[] xnum = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[N+<span class="hljs-number">1</span>];<span class="hljs-comment">//每一段的端点坐标</span><br>         <span class="hljs-keyword">double</span> a = (r - l)/ N;<span class="hljs-comment">//每一段长度</span><br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; i++)&#123;<br>             xnum[i] = l + i*a;<br>         &#125;<br>         <span class="hljs-keyword">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[N];<span class="hljs-comment">//每一段的个数</span><br>         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; xnum.length; i++)&#123;<br>             num[i-<span class="hljs-number">1</span>] = number(dargs, xnum[i-<span class="hljs-number">1</span>], xnum[i]);<br>         &#125;<br>         <span class="hljs-keyword">return</span> num;<br>     &#125;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回数组中小于该键的元素数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rank</span><span class="hljs-params">(<span class="hljs-keyword">double</span>[] a, <span class="hljs-keyword">double</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> lo = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> hi = a.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(key &lt; a[<span class="hljs-number">0</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &gt; a[a.length-<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-keyword">return</span> a.length;<br>        &#125;<span class="hljs-keyword">int</span> mid = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(lo &lt; hi)&#123;<br>            mid = lo + (hi - lo)/ <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (key &lt; a[mid])&#123;<br>                hi = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; a[mid])&#123;<br>                lo = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span>(mid &gt; <span class="hljs-number">0</span> &amp;&amp; a[mid] == a[mid - <span class="hljs-number">1</span>])&#123;<br>                    mid--;<br>                &#125;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ((lo+hi)/<span class="hljs-number">2</span>+mid)/<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算一个升序排列double数组中大于等于 a 小于 b 的元素个数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">number</span> <span class="hljs-params">(<span class="hljs-keyword">double</span>[] args, <span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> n1 = rank(args, a);<br>        <span class="hljs-keyword">int</span> n2 = rank(args, b);<br>        <span class="hljs-keyword">return</span> n2 - n1;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绘制直方图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> N 分段个数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a 取值在 0~1 的double数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">histogram</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> N, <span class="hljs-keyword">double</span>[] a)</span></span>&#123;<br>        StdDraw.setPenColor(StdDraw.BOOK_BLUE);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; N; i++)&#123;<br>            <span class="hljs-keyword">double</span> x = <span class="hljs-number">1.0</span>*i/N;<br>            <span class="hljs-keyword">double</span> y = a[i]/<span class="hljs-number">2.0</span>;<br>            <span class="hljs-keyword">double</span> rw = <span class="hljs-number">0.5</span>/N;<br>            <span class="hljs-keyword">double</span> rh = a[i]/<span class="hljs-number">2.0</span>;<br>            StdDraw.filledRectangle(x, y, rw, rh);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//读取N的值</span><br>        StdOut.print(<span class="hljs-string">&quot;请输入要分割的段数N：&quot;</span>);<br>        <span class="hljs-keyword">int</span> N = StdIn.readInt();<br>        StdOut.println();<br>        <span class="hljs-comment">//读取l的值</span><br>        StdOut.print(<span class="hljs-string">&quot;图像的最小x值l(double)：&quot;</span>);<br>        <span class="hljs-keyword">double</span> l = StdIn.readDouble();<br>        StdOut.println();<br>        <span class="hljs-comment">//读取r的值</span><br>        StdOut.print(<span class="hljs-string">&quot;请输入图像的最大x值r(double)：&quot;</span>);<br>        <span class="hljs-keyword">double</span> r = StdIn.readDouble();<br>        StdOut.println();<br>        <br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">2000</span>;<span class="hljs-comment">//double样本的数量</span><br>        <span class="hljs-keyword">double</span> lo = <span class="hljs-number">0.0</span>;<span class="hljs-comment">//样本的最小值</span><br>        <span class="hljs-keyword">double</span> hi = <span class="hljs-number">100.0</span>;<span class="hljs-comment">//样本的最大值</span><br>        <span class="hljs-keyword">double</span>[] an = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[n];<span class="hljs-comment">//样本数组</span><br>         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            an[i] = StdRandom.uniform(lo, hi);<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] num = allocation(an, N, l, r);<span class="hljs-comment">//得到每段的数目</span><br>        <span class="hljs-comment">//求每段的概率</span><br>        <span class="hljs-keyword">double</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>            StdOut.println();<br>            b[i] = (num[i]*<span class="hljs-number">1.0</span>)/n;<br>        &#125;<br>        histogram(N, b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20200630222630.jpg"/><p><img src="%5Cimg%5Cin-post%5C2018%5C7%5C28%5Cq1132.jpg"></p><h5 id="1-1-33-矩阵库。编写一个-Matrix-库并实现以下API："><a href="#1-1-33-矩阵库。编写一个-Matrix-库并实现以下API：" class="headerlink" title="1.1.33 矩阵库。编写一个 Matrix 库并实现以下API："></a>1.1.33 矩阵库。编写一个 <code>Matrix</code> 库并实现以下API：</h5><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs d">==================================================================================<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Matrix<br>----------------------------------------------------------------------------------<br>        <span class="hljs-keyword">static</span>     <span class="hljs-built_in">double</span> dot(<span class="hljs-built_in">double</span>[] x, <span class="hljs-built_in">double</span>[] y)        向量点乘<br>        <span class="hljs-keyword">static</span> <span class="hljs-built_in">double</span>[][] mult(<span class="hljs-built_in">double</span>[][] a, <span class="hljs-built_in">double</span>[][] b)   矩阵和矩阵之积<br>        <span class="hljs-keyword">static</span> <span class="hljs-built_in">double</span>[][] transpose(<span class="hljs-built_in">double</span>[][] a)            转置矩阵<br>        <span class="hljs-keyword">static</span>   <span class="hljs-built_in">double</span>[] mult(<span class="hljs-built_in">double</span>[][] a, <span class="hljs-built_in">double</span>[] x)     矩阵和向量之积<br>        <span class="hljs-keyword">static</span>   <span class="hljs-built_in">double</span>[] mult(<span class="hljs-built_in">double</span>[] y, <span class="hljs-built_in">double</span>[][] a)     向量和矩阵之积<br>==================================================================================<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1133</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向量点乘</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x x向量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y y向量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  向量点乘</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">dot</span><span class="hljs-params">(<span class="hljs-keyword">double</span>[] x, <span class="hljs-keyword">double</span>[] y)</span> </span>&#123;<br>        <span class="hljs-comment">// 点乘必须是向量a的长度等于向量b的长度才能运算</span><br>        <span class="hljs-keyword">if</span>(x.length != y.length)<br>            System.exit(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">double</span> res = <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x.length; i++)&#123;<br>            res += x[i] * y[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 矩阵和矩阵之积</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span>[][] multiple(<span class="hljs-keyword">double</span>[][] a, <span class="hljs-keyword">double</span>[][] b) &#123;<br>        <span class="hljs-comment">// 只有矩阵a的列数等于矩阵b的行数时，相乘才有意义</span><br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>].length != b.length)<br>            System.exit(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">double</span>[][] matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[a.length][b[<span class="hljs-number">0</span>].length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; b[<span class="hljs-number">0</span>].length; j++)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; b.length; ++k)&#123;<br>                    matrix[i][j] += a[i][k] * b[k][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> matrix;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 矩阵和向量之积</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span>[] multiple(<span class="hljs-keyword">double</span>[][] a, <span class="hljs-keyword">double</span>[] x) &#123;<br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>].length != x.length)<br>            System.exit(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">double</span>[] matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[x.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; x.length; j++)&#123;<br>                matrix[i] += a[i][j] * x[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> matrix;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向量和矩阵之积</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> y</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span>[] multiple(<span class="hljs-keyword">double</span>[] y, <span class="hljs-keyword">double</span>[][] a) &#123;<br>        <span class="hljs-keyword">double</span>[] matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[y.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; y.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i].length; j++)&#123;<br>                matrix[i] += y[j] * a[j][i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> matrix;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转置矩阵</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span>[][] transpose(<span class="hljs-keyword">double</span>[][] a) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">double</span> temp = a[i][j];<br>                a[i][j] = a[j][i];<br>                a[j][i] = temp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StdOut.println(<span class="hljs-string">&quot;-------- 向量点乘 ---------&quot;</span>);<br>        <span class="hljs-keyword">double</span>[] a0 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">double</span>[] b0 = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-keyword">double</span> res0 = dot(a0, b0);<br>        StdOut.println(res0);<br><br>        StdOut.println(<span class="hljs-string">&quot;-------- 矩阵乘法 ---------&quot;</span>);<br>        <span class="hljs-keyword">double</span>[][] a1 = &#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br>        &#125;;<br>        <span class="hljs-keyword">double</span>[][] b1 = &#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br>        &#125;;<br>        <span class="hljs-keyword">double</span>[][] res1 = multiple(a1, b1);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; res1[i].length; j++)&#123;<br>                StdOut.printf(<span class="hljs-string">&quot;%-10.3f&quot;</span>, res1[i][j]);<br>            &#125;<br>            StdOut.println();<br>        &#125;<br><br>        StdOut.println(<span class="hljs-string">&quot;-------- 矩阵转置 ---------&quot;</span>);<br>        <span class="hljs-keyword">double</span>[][] a2 = &#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;,<br>                &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>        &#125;;<br>        <span class="hljs-keyword">double</span>[][] c2 = transpose(a2);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a2.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a2[i].length; j++)&#123;<br>                StdOut.printf(<span class="hljs-string">&quot;%-10.3f&quot;</span>, a2[i][j]);<br>            &#125;<br>            StdOut.println();<br>        &#125;<br><br>        StdOut.println(<span class="hljs-string">&quot;----- 矩阵和向量之积 ------&quot;</span>);<br>        <span class="hljs-keyword">double</span>[][] a3 = &#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;,<br>                &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>        &#125;;<br>        <span class="hljs-keyword">double</span>[] b3 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">double</span>[] c3 = multiple(a3, b3);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c3.length; i++)&#123;<br>            StdOut.printf(<span class="hljs-string">&quot;%-10.3f\n&quot;</span>, c3[i]);<br>        &#125;<br><br>        StdOut.println(<span class="hljs-string">&quot;----- 向量和矩阵之积 ------&quot;</span>);<br>        <span class="hljs-keyword">double</span>[] a4 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">double</span>[][] b4 = &#123;<br>                &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;,<br>                &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>        &#125;;<br>        <span class="hljs-keyword">double</span>[] c4 = multiple(a4, b4);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; c4.length; i++)&#123;<br>            StdOut.printf(<span class="hljs-string">&quot;%-10.3f&quot;</span>, c4[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1-34-过滤。以下哪些任务需要以下哪些任务需要（在数组中，比如）保存标准输入中的所有值？哪些可以被实现为一个过滤器且仅使用固定数量的变量和固定大小的数组（和N无关）？在每个问题中，输入都来自于标准输入且含有N个0到1的实数。"><a href="#1-1-34-过滤。以下哪些任务需要以下哪些任务需要（在数组中，比如）保存标准输入中的所有值？哪些可以被实现为一个过滤器且仅使用固定数量的变量和固定大小的数组（和N无关）？在每个问题中，输入都来自于标准输入且含有N个0到1的实数。" class="headerlink" title="1.1.34 过滤。以下哪些任务需要以下哪些任务需要（在数组中，比如）保存标准输入中的所有值？哪些可以被实现为一个过滤器且仅使用固定数量的变量和固定大小的数组（和N无关）？在每个问题中，输入都来自于标准输入且含有N个0到1的实数。"></a>1.1.34 过滤。以下哪些任务需要以下哪些任务需要（在数组中，比如）保存标准输入中的所有值？哪些可以被实现为一个过滤器且仅使用固定数量的变量和固定大小的数组（和N无关）？在每个问题中，输入都来自于标准输入且含有N个0到1的实数。</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>.保存标准输入中的所有值<br><span class="hljs-selector-tag">B</span>.被实现为一个过滤器且仅使用固定数量的变量和固定大小的数组（和N无关）<br>    　　<br>        (<span class="hljs-selector-tag">B</span>)       打印出最大和最小的数<br>        (<span class="hljs-selector-tag">A</span>)       打印出所有数的中位数<br>        (<span class="hljs-selector-tag">B</span>)       打印出第 k 小的数，k 小于<span class="hljs-number">100</span><br>        (<span class="hljs-selector-tag">B</span>)       打印出所有数的平方和<br>        (<span class="hljs-selector-tag">B</span>)       打印出 N 数的平均值<br>        (<span class="hljs-selector-tag">A</span>)       打印出大于平均值的数的百分比<br>        (<span class="hljs-selector-tag">A</span>)       将 N 个数按照升序打印 <br>        (<span class="hljs-selector-tag">A</span>)       将 N 个数按照随机顺序打印 <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法第四版</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法-第四版》答案系列-1.1 练习篇</title>
    <link href="/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-1%E7%BB%83%E4%B9%A0%E7%AF%87/"/>
    <url>/2021/02/16/%E7%AE%97%E6%B3%95-%E7%AC%AC%E5%9B%9B%E7%89%88%E7%AD%94%E6%A1%88%E7%B3%BB%E5%88%97-1-1%E7%BB%83%E4%B9%A0%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近开始学习《算法-第四版》一书，将我自己做的书后习题分享给大家，本篇是这一系列的第一篇，包含了书上&lt;1.1 基础编程模型&gt;的习题的练习部分,本篇习题位于 P32 ~ P37 ，如有错误，还请指正。</p></blockquote><blockquote><p>本篇答案中部分 java 代码用到了书中的包，如需使用请去书中配套网站安装。</p></blockquote><p>以下的答案在电脑端查看可以显示目录</p><a id="more"></a><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h5 id="1-1-1-给出下列表达式的值"><a href="#1-1-1-给出下列表达式的值" class="headerlink" title="1.1.1 给出下列表达式的值"></a>1.1.1 给出下列表达式的值</h5><pre><code>a. (0 + 15)/ 2                     ==&gt; 7             // 类型是整形b. 2.0e-6 * 100000000.1            ==&gt; 200.0000002   // e-6为科学计数法，即10的-6次方c. true &amp;&amp; false || true &amp;&amp; true   ==&gt; true          // &amp;&amp;-短路与  ||-短路或</code></pre><h5 id="1-1-2-给出下列表达式的类型和值"><a href="#1-1-2-给出下列表达式的类型和值" class="headerlink" title="1.1.2 给出下列表达式的类型和值"></a>1.1.2 给出下列表达式的类型和值</h5><pre><code>a. (1 + 2.236)/ 2                  ==&gt; double   1.618b. 1 + 2 + 3 + 4.0                 ==&gt; double   10.0c. 4.1 &gt;= 4                        ==&gt; boolean  trued. 1 + 2 + &quot;3&quot;                     ==&gt; string   33</code></pre><h5 id="1-1-3-编写一个程序，从命令行得到三个整数参数。如果他们都相等则打印-equal-，否则打印-not-equal-。"><a href="#1-1-3-编写一个程序，从命令行得到三个整数参数。如果他们都相等则打印-equal-，否则打印-not-equal-。" class="headerlink" title="1.1.3 编写一个程序，从命令行得到三个整数参数。如果他们都相等则打印 equal ，否则打印 not equal 。"></a>1.1.3 编写一个程序，从命令行得到三个整数参数。如果他们都相等则打印 <code>equal</code> ，否则打印 <code>not equal</code> 。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*; <span class="hljs-comment">//书上的包</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q113</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> a = StdIn.readInt();<br>        <span class="hljs-keyword">int</span> b = StdIn.readInt();<br>        <span class="hljs-keyword">int</span> c = StdIn.readInt();<br>        <span class="hljs-keyword">if</span>(a == b &amp;&amp; a == c)&#123;<br>            StdOut.println(<span class="hljs-string">&quot;equal&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            StdOut.println(<span class="hljs-string">&quot;not equal&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1-4-下列语句各有什么问题（如果有的话）？"><a href="#1-1-4-下列语句各有什么问题（如果有的话）？" class="headerlink" title="1.1.4 下列语句各有什么问题（如果有的话）？"></a>1.1.4 下列语句各有什么问题（如果有的话）？</h5><pre><code>a. if (a &gt; b) then c = 0;          ==&gt; java中没有thenb. if a &gt; b &#123; c = 0; &#125;             ==&gt; a &gt; b应该用括号c. if (a &gt; b) c = 0;               ==&gt; 正确d. if (a &gt; b) c = 0 else b = 0;    ==&gt; c = 0后添加“;”</code></pre><h5 id="1-1-5-编写一段程序，如果double类型的变量x和y都严格位于0和1之间则打印-true-，否则打印-false-。"><a href="#1-1-5-编写一段程序，如果double类型的变量x和y都严格位于0和1之间则打印-true-，否则打印-false-。" class="headerlink" title="1.1.5 编写一段程序，如果double类型的变量x和y都严格位于0和1之间则打印 true ，否则打印 false 。"></a>1.1.5 编写一段程序，如果double类型的变量x和y都严格位于0和1之间则打印 <code>true</code> ，否则打印 <code>false</code> 。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q115</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        StdOut.println(<span class="hljs-string">&quot;请输入double类型的数x：&quot;</span>);<br>        <span class="hljs-keyword">double</span> x = StdIn.readDouble();<br>        StdOut.println(<span class="hljs-string">&quot;请输入double类型的数y；&quot;</span>);<br>        <span class="hljs-keyword">double</span> y = StdIn.readDouble();<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> ((x &gt; <span class="hljs-number">0</span> &amp;&amp; x &lt; <span class="hljs-number">1</span>) &amp;&amp; (y &gt; <span class="hljs-number">0</span> &amp;&amp; y &lt; <span class="hljs-number">1</span>))&#123;<br>            flag = <span class="hljs-keyword">true</span>;<br>        &#125;<br>        StdOut.printf(<span class="hljs-string">&quot;结果是：&quot;</span>);<br>        StdOut.println(flag);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1-6-下面这段程序会打印出什么？"><a href="#1-1-6-下面这段程序会打印出什么？" class="headerlink" title="1.1.6 下面这段程序会打印出什么？"></a>1.1.6 下面这段程序会打印出什么？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> g = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; i++) &#123;<br>    StdOut.println(f);<br>    f = f + g;<br>    g = f - g;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">结果是:</span><br>0<br>1<br>1<br>2<br>3<br>5<br>8<br>13<br>21<br>34<br>55<br>89<br>144<br>233<br>377<br>610<br>斐波那契数列<br></code></pre></td></tr></table></figure><h5 id="1-1-7-分别给出以下代码段打印出的值"><a href="#1-1-7-分别给出以下代码段打印出的值" class="headerlink" title="1.1.7 分别给出以下代码段打印出的值"></a>1.1.7 分别给出以下代码段打印出的值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">a.        ==&gt; <span class="hljs-number">3.00009</span><br><br><span class="hljs-keyword">double</span> t = <span class="hljs-number">9.0</span>;<br><span class="hljs-keyword">while</span> (Math.abs(t - <span class="hljs-number">9.0</span>/t) &gt; <span class="hljs-number">.001</span>)<br>    t = (<span class="hljs-number">9.0</span>/t + t) / <span class="hljs-number">2.0</span>;<br>StdOut.printf(<span class="hljs-string">&quot;%.5f\n&quot;</span>,t);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">b.        ==&gt; <span class="hljs-number">499500</span><br><br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">1000</span>; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>        sum++;<br>StdOut.println(sum);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">c.        ==&gt; <span class="hljs-number">10000</span><br><br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;<span class="hljs-number">1000</span>; i *= <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1000</span>; j++)<br>        sum++;<br>StdOut.println(sum);<br></code></pre></td></tr></table></figure><h5 id="1-1-8-下列语句会打印出什么结果？给出解释。"><a href="#1-1-8-下列语句会打印出什么结果？给出解释。" class="headerlink" title="1.1.8 下列语句会打印出什么结果？给出解释。"></a>1.1.8 下列语句会打印出什么结果？给出解释。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">a. System.out.println(<span class="hljs-string">&#x27;b&#x27;</span>);              ==&gt; b      <span class="hljs-comment">// &#x27;b&#x27;为字符型直接输出</span><br>b. System.out.println(<span class="hljs-string">&#x27;b&#x27;</span>+<span class="hljs-string">&#x27;c&#x27;</span>);          ==&gt; <span class="hljs-number">197</span>    <span class="hljs-comment">// &#x27;b&#x27;+&#x27;c&#x27;为ascll码值相加，即98+99=197</span><br>c. System.out.println((<span class="hljs-keyword">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">4</span>));   ==&gt; e      <span class="hljs-comment">// &#x27;a&#x27;+4后强制转换为字符型</span><br></code></pre></td></tr></table></figure><h5 id="1-1-9-编写一段代码，将一个正整数N用二进制表示并转换为一个-String-类型的值s。"><a href="#1-1-9-编写一段代码，将一个正整数N用二进制表示并转换为一个-String-类型的值s。" class="headerlink" title="1.1.9 编写一段代码，将一个正整数N用二进制表示并转换为一个 String 类型的值s。"></a>1.1.9 编写一段代码，将一个正整数N用二进制表示并转换为一个 <code>String</code> 类型的值s。</h5><p>解答：Java有一个内置方法 <code>Integer.toBinaryString(N)</code> 专门完成这个任务，但该题的就是给出这个方法的其他实现方法。下面就是一个特别简洁的答案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n= N; n &gt; <span class="hljs-number">0</span>; n /= <span class="hljs-number">2</span>)<br>    s = (n % <span class="hljs-number">2</span>) + s;<br></code></pre></td></tr></table></figure><h5 id="1-1-10-下面这段代码有什么问题？"><a href="#1-1-10-下面这段代码有什么问题？" class="headerlink" title="1.1.10 下面这段代码有什么问题？"></a>1.1.10 下面这段代码有什么问题？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> [] a;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    a[i] = i * i;<br></code></pre></td></tr></table></figure><p>解答：它没有用 <code>new</code> 为 <code>a[]</code> 分配内存。这段代码会产生一个 <code>variable a might not have been initialized</code> 的编译错误。</p><h5 id="1-1-11-编写一段代码，打印出一个二维布尔数组的内容。其中，使用-表示真，空格表示假，打印出行号和列号。"><a href="#1-1-11-编写一段代码，打印出一个二维布尔数组的内容。其中，使用-表示真，空格表示假，打印出行号和列号。" class="headerlink" title="1.1.11 编写一段代码，打印出一个二维布尔数组的内容。其中，使用 * 表示真，空格表示假，打印出行号和列号。"></a>1.1.11 编写一段代码，打印出一个二维布尔数组的内容。其中，使用 * 表示真，空格表示假，打印出行号和列号。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1111</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">boolean</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[<span class="hljs-number">3</span>][];<br>        array [<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[] &#123;<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>&#125;;<br>        array [<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[]&#123;<span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>&#125;;<br>        array [<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[]&#123;<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>&#125;;<span class="hljs-comment">//使用常规方法赋值会导致博客软件jelyll报错。</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>        System.out.print(<span class="hljs-string">&quot;\\&quot;</span>);<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">1</span>; j &lt;= array[<span class="hljs-number">0</span>].length; j++)&#123;<br>            System.out.print(j);<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt; array[<span class="hljs-number">0</span>].length; i++)&#123;<br>            System.out.print(i+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt; array.length; j++)&#123;<br>                System.out.print(array[i][j] ? <span class="hljs-string">&quot;*&quot;</span> : <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">运行结果:<br>\123<br>1 <span class="hljs-emphasis">* </span><br><span class="hljs-emphasis">2*</span> <span class="hljs-emphasis">*</span><br><span class="hljs-emphasis">3 *</span> <br></code></pre></td></tr></table></figure><h5 id="1-1-12-以下代码会打印出什么结果？"><a href="#1-1-12-以下代码会打印出什么结果？" class="headerlink" title="1.1.12 以下代码会打印出什么结果？"></a>1.1.12 以下代码会打印出什么结果？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    a[i] = <span class="hljs-number">9</span> - i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    a[i] = a[a[i]];<br><span class="hljs-keyword">for</span> (inr i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    System.out.println(i);<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">运行结果：<br>0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br></code></pre></td></tr></table></figure><h5 id="1-1-13-编写一段代码，打印出一个M行N列的二位数组的转置（交换行和列）。"><a href="#1-1-13-编写一段代码，打印出一个M行N列的二位数组的转置（交换行和列）。" class="headerlink" title="1.1.13 编写一段代码，打印出一个M行N列的二位数组的转置（交换行和列）。"></a>1.1.13 编写一段代码，打印出一个M行N列的二位数组的转置（交换行和列）。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1113</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <br>        <span class="hljs-keyword">int</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][];<br>        array [<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>        array [<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br>        array [<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;转置之前&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array[<span class="hljs-number">0</span>].length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : array[i])&#123;<br>                System.out.print(num+<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array[<span class="hljs-number">0</span>].length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)&#123;<br>                array[i][j] = array[i][j] ^ array[j][i];<br>                array[j][i] = array[i][j] ^ array[j][i];<br>                array[i][j] = array[i][j] ^ array[j][i];<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;转置之后&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array[<span class="hljs-number">0</span>].length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : array[i])&#123;<br>                System.out.print(num+<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">转置之前<br>1<span class="hljs-number"> 2 </span>3<br>4<span class="hljs-number"> 5 </span>6<br>7<span class="hljs-number"> 8 </span>9<br>转置之后<br>1<span class="hljs-number"> 4 </span>7<br>2<span class="hljs-number"> 5 </span>8<br>3<span class="hljs-number"> 6 </span>9<br></code></pre></td></tr></table></figure><h5 id="1-1-14-编写一个静态方法-lg-，接受一个整型参数N，返回不大于-log2N-的最大整数。不要使用-Math-库。"><a href="#1-1-14-编写一个静态方法-lg-，接受一个整型参数N，返回不大于-log2N-的最大整数。不要使用-Math-库。" class="headerlink" title="1.1.14 编写一个静态方法 lg() ，接受一个整型参数N，返回不大于 log2N 的最大整数。不要使用 Math 库。"></a>1.1.14 编写一个静态方法 <code>lg()</code> ，接受一个整型参数N，返回不大于 log<sub>2</sub>N 的最大整数。不要使用 <code>Math</code> 库。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1114</span></span>&#123;<br>    <span class="hljs-comment">//***</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(ans &lt;= N)&#123;<br>            ans *= <span class="hljs-number">2</span>;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i-<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-comment">//***</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> n = scanner.nextInt();<br>        <span class="hljs-keyword">int</span> answer = lg(n);<br>        System.out.println(answer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1-15-编写一个静态方法-histogram-，接受一个整型数组a-和一个整数M为参数并返回一个大小为M的数组，其中第i个元素的值为整数i在参数数组中出现的次数。如果a-中的值均在0到M-1之间，返回数组所有元素之和应该和-a-length-相等。"><a href="#1-1-15-编写一个静态方法-histogram-，接受一个整型数组a-和一个整数M为参数并返回一个大小为M的数组，其中第i个元素的值为整数i在参数数组中出现的次数。如果a-中的值均在0到M-1之间，返回数组所有元素之和应该和-a-length-相等。" class="headerlink" title="1.1.15 编写一个静态方法 histogram() ，接受一个整型数组a[]和一个整数M为参数并返回一个大小为M的数组，其中第i个元素的值为整数i在参数数组中出现的次数。如果a[]中的值均在0到M-1之间，返回数组所有元素之和应该和 a.length 相等。"></a>1.1.15 编写一个静态方法 <code>histogram()</code> ，接受一个整型数组a[]和一个整数M为参数并返回一个大小为M的数组，其中第i个元素的值为整数i在参数数组中出现的次数。如果a[]中的值均在0到M-1之间，返回数组所有元素之和应该和 <code>a.length</code> 相等。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1115</span></span>&#123;<br>    <span class="hljs-comment">//***</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] histogram(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> M)&#123;<br>        <span class="hljs-keyword">int</span>[] args = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[M];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : a)&#123;<br>            <span class="hljs-keyword">if</span>(num &lt; M)&#123;<br>                args[num]++;<br>            &#125;            <br>        &#125;<br>        <span class="hljs-keyword">return</span> args;<br>    &#125;<br>    <span class="hljs-comment">//***</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] p = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">int</span>[] ans = histogram(p,n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a : ans)&#123;<br>            System.out.print(a+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">运行结果：0<span class="hljs-number"> 2 </span>2<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 3 </span>5 3<br></code></pre></td></tr></table></figure><h5 id="1-1-16-给出-exR1-6-的返回值："><a href="#1-1-16-给出-exR1-6-的返回值：" class="headerlink" title="1.1.16 给出 exR1(6) 的返回值："></a>1.1.16 给出 <code>exR1(6)</code> 的返回值：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">exR1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">return</span> exR1(n - <span class="hljs-number">3</span>) + n + exr1(n - <span class="hljs-number">2</span>) + n;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">运行结果：<span class="hljs-number">311361142246</span><br></code></pre></td></tr></table></figure><h5 id="1-1-17-找出以下递归函数的问题："><a href="#1-1-17-找出以下递归函数的问题：" class="headerlink" title="1.1.17 找出以下递归函数的问题："></a>1.1.17 找出以下递归函数的问题：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">exR2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    String s = exR2(n - <span class="hljs-number">3</span>) + n + exR2(n - <span class="hljs-number">2</span>) + n;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><p>答：这段代码中的基础情况永远不会被访问。调用 <code>exR2(3)</code> 会产生调用 <code>exR2(0)</code> 、<code>exR2(-3)</code> 和 <code>exR2(-6)</code> ，循环往复直到发生 <code>StackOverflowError</code> 。</p><h5 id="1-1-18-请看以下递归函数："><a href="#1-1-18-请看以下递归函数：" class="headerlink" title="1.1.18 请看以下递归函数："></a>1.1.18 请看以下递归函数：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mystery</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (b % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> mystery(a + a, b / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> mystery(a + a, b / <span class="hljs-number">2</span>) + a;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>mystery(2, 25)</code> 和 <code>mystery(3, 11)</code> 的返回值是多少？给定正数 a 和 b ，<code>mystery(a, b)</code> 的计算结果是什么？将代码中的 + 替换为 * 并将 <code>return 0</code> 改为 <code>return 1</code> ，然后回答相同的问题。</p><p>答：<br><code>mystery(2, 25)</code> 的返回值是50，<code>mystery(3, 11)</code> 的返回值是33.给定正数 a 和 b <code>mystery(a, b)</code> 的计算结果是 a*b；<br>将代码中的 + 替换为 * 并将 <code>return 0</code> 改为 <code>return 1</code> :<br><code>mystery(2, 25)</code> 的返回值是33554432，<code>mystery(3, 11)</code> 的返回值是177147.给定正数 a 和 b <code>mystery(a, b)</code> 的计算结果是 a<sup>b</sup></p><h5 id="1-1-19-在计算机上运行以下程序："><a href="#1-1-19-在计算机上运行以下程序：" class="headerlink" title="1.1.19 在计算机上运行以下程序："></a>1.1.19 在计算机上运行以下程序：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fibonacci</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (N == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (N == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> F(N - <span class="hljs-number">1</span>) + F(N - <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> N = <span class="hljs-number">0</span>; N &lt; <span class="hljs-number">100</span>; N++)<br>            System.out.println(N + <span class="hljs-string">&quot; &quot;</span> + F(N));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算机用这段程序在一个小时之内能够得到 F(N) 结果的最大 N 值是多少？开发 F(N) 的一个更好的实现，用数组保存已经计算过的值。</p><p>答：为了方便计算一个小时的时间，为此程序增加了时间戳如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fibonacci</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (N == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (N == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> F(N - <span class="hljs-number">1</span>) + F(N - <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">long</span> t1=System.currentTimeMillis();<br>        <span class="hljs-keyword">long</span> t2;<br>        <span class="hljs-keyword">long</span> s;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> N = <span class="hljs-number">0</span>; N &lt; <span class="hljs-number">100</span>; N++)&#123;<br>            s = F(N);<br>            t2=System.currentTimeMillis();<br>            <span class="hljs-keyword">if</span> (t2 - t1 &lt; <span class="hljs-number">3600000</span>)&#123;<br>                System.out.println(N + <span class="hljs-string">&quot; &quot;</span> + s);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将此程序在阿里云ECS学生机中后台运行得到F(N)最大值是 <code>55 139583862445</code> .<br>以下是一个更好的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FFibonacci</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span>[] fib = <span class="hljs-keyword">new</span> <span class="hljs-keyword">long</span>[M];<br>    <span class="hljs-comment">//***</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">FF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == N)<br>            fib[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> == N)<br>            fib[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>            fib[N] = fib[N - <span class="hljs-number">1</span>] + fib[N -<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">return</span> fib[N];<br>    &#125;<br>    <span class="hljs-comment">//***</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> N = <span class="hljs-number">0</span>; N &lt; <span class="hljs-number">100</span>; N++) &#123;<br>            System.out.println(N + <span class="hljs-string">&quot; &quot;</span> + FF(N));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1-20-编写一个递归的静态方法计算-ln-N-的值。"><a href="#1-1-20-编写一个递归的静态方法计算-ln-N-的值。" class="headerlink" title="1.1.20 编写一个递归的静态方法计算 ln(N!) 的值。"></a>1.1.20 编写一个递归的静态方法计算 ln(N!) 的值。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.Math;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1120</span> </span>&#123;<br>    <span class="hljs-comment">//***</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> <span class="hljs-title">factorial</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> N)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (N == <span class="hljs-number">0</span> || N == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> N * factorial(N - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">ln</span> <span class="hljs-params">(<span class="hljs-keyword">long</span> N)</span></span>&#123;<br>        <span class="hljs-keyword">long</span> s = factorial(N);<br>        <span class="hljs-keyword">return</span> Math.log(s);<br>    &#125;<br>    <span class="hljs-comment">//***</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> n = scanner.nextInt();<br>        System.out.println(ln(n));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1-21-编写一段程序，从标准输入按行读取数据，其中每行都包含一个名字和两个整数。然后用-printf-打印一张表格。每行的若干列数据包括名字、两个整数和第一个整数除以第二个整数的结果，精确到小数点后三位。可以用这种程序将棒球球手的击球名中率或者学生的考试分数制成表格。"><a href="#1-1-21-编写一段程序，从标准输入按行读取数据，其中每行都包含一个名字和两个整数。然后用-printf-打印一张表格。每行的若干列数据包括名字、两个整数和第一个整数除以第二个整数的结果，精确到小数点后三位。可以用这种程序将棒球球手的击球名中率或者学生的考试分数制成表格。" class="headerlink" title="1.1.21 编写一段程序，从标准输入按行读取数据，其中每行都包含一个名字和两个整数。然后用 printf() 打印一张表格。每行的若干列数据包括名字、两个整数和第一个整数除以第二个整数的结果，精确到小数点后三位。可以用这种程序将棒球球手的击球名中率或者学生的考试分数制成表格。"></a>1.1.21 编写一段程序，从标准输入按行读取数据，其中每行都包含一个名字和两个整数。然后用 <code>printf()</code> 打印一张表格。每行的若干列数据包括名字、两个整数和第一个整数除以第二个整数的结果，精确到小数点后三位。可以用这种程序将棒球球手的击球名中率或者学生的考试分数制成表格。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1121</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        ArrayList name = <span class="hljs-keyword">new</span> ArrayList();<span class="hljs-comment">//保存名字的Arraylist</span><br>        ArrayList num1 = <span class="hljs-keyword">new</span> ArrayList();<span class="hljs-comment">//保存数字1的Arraylist</span><br>        ArrayList num2 = <span class="hljs-keyword">new</span> ArrayList();<span class="hljs-comment">//保存数字2的Arraylist</span><br>        System.out.println(<span class="hljs-string">&quot;请按照名字&lt;空格&gt;分数一&lt;空格&gt;分数二&lt;回车&gt;的格式输入&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;输入完成后另起一行输入over敲&lt;回车&gt;&quot;</span>);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            String aline = scan.nextLine();<span class="hljs-comment">//读取一行字符</span><br>            <span class="hljs-keyword">char</span>[] ach = aline.toCharArray();<span class="hljs-comment">//将字符转化为字符串数组</span><br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>            StringBuffer first = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//创建三个StringBuffer对象用于累加字符</span><br>            StringBuffer second = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;&quot;</span>);<br>            StringBuffer third = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-keyword">for</span>(;i &lt; ach.length &amp;&amp; ach[i] != <span class="hljs-string">&#x27; &#x27;</span>;i++)&#123;<br>                first.append(ach[i]);<span class="hljs-comment">//累加名字</span><br>            &#125;<br>            String over = <span class="hljs-string">&quot;over&quot;</span>;<br>            String kk = first.toString();<br>            <span class="hljs-keyword">if</span>(kk.equals(over))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span>(i++;ach[i] != <span class="hljs-string">&#x27; &#x27;</span>;i++)&#123;<br>                    second.append(ach[i]);<span class="hljs-comment">//累加分数一</span><br>                &#125;<br>                <span class="hljs-keyword">for</span>(i++; i &lt; ach.length; i++)&#123;<br>                    third.append(ach[i]);<span class="hljs-comment">//累加分数二</span><br>                &#125;<br>                String aa = first.toString();<br>                String bb = second.toString();<br>                String cc = third.toString();<br>                name.add(aa);<br>                num1.add(bb);<br>                num2.add(cc); <br>            &#125;<br>            <br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;==================================================&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;||%-10s||%-10s||%-10s||%-10s||\n&quot;</span>,<span class="hljs-string">&quot;姓名&quot;</span>,<span class="hljs-string">&quot;分数一&quot;</span>,<span class="hljs-string">&quot;分数二&quot;</span>,<span class="hljs-string">&quot;相除&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; name.size(); i++)&#123;<br>            <span class="hljs-keyword">double</span> n1 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">double</span> n2 = <span class="hljs-number">0</span>;<br>                n1 = Double.parseDouble(num1.get(i).toString());<br>                n2 = Double.parseDouble(num2.get(i).toString());<br>            <span class="hljs-keyword">double</span> n3 = n1 / n2;<br>            System.out.printf(<span class="hljs-string">&quot;||%-10s||%-10.0f||%-10.0f||%-10.3f||\n&quot;</span>,name.get(i),n1,n2,n3);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;==================================================&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">运行结果：<br><br>小红 98 76<br>小明 76 54<br>小兰 87 65<br>over<br>==================================================<br>||姓名        ||分数一       ||分数二       ||相除        ||<br>||小红        ||98        ||76        ||1.289     ||<br>||小明        ||76        ||54        ||1.407     ||<br>||小兰        ||87        ||65        ||1.338     ||<br>==================================================<br></code></pre></td></tr></table></figure><h5 id="1-1-22-使用-1-1-6-4-节中的-rank-递归方法重新实现-BinarySearch-并跟踪该方法调用。每当该方法被调用时，打印出他的参数-lo-和-hi-并按照递归的深度缩进。"><a href="#1-1-22-使用-1-1-6-4-节中的-rank-递归方法重新实现-BinarySearch-并跟踪该方法调用。每当该方法被调用时，打印出他的参数-lo-和-hi-并按照递归的深度缩进。" class="headerlink" title="1.1.22 使用 1.1.6.4 节中的 rank() 递归方法重新实现 BinarySearch 并跟踪该方法调用。每当该方法被调用时，打印出他的参数 lo 和 hi 并按照递归的深度缩进。"></a>1.1.22 使用 1.1.6.4 节中的 <code>rank()</code> 递归方法重新实现 <code>BinarySearch</code> 并跟踪该方法调用。每当该方法被调用时，打印出他的参数 <code>lo</code> 和 <code>hi</code> 并按照递归的深度缩进。</h5><p>提示：为该递归方法添加一个参数来保存递归的深度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1122</span> </span>&#123;<br>    <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二分查找 ： 递归描述</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span>[] a)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> rank(key, a, <span class="hljs-number">0</span>, a.length - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//0是深度信息</span><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归查找关键词的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hi</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> hi, <span class="hljs-keyword">int</span> depth)</span></span>&#123;<br>        printIndent(lo, hi, depth);<br>        <span class="hljs-comment">//如果key存在于a[]中，它的索引不会小于lo且不会大于hi</span><br>        <span class="hljs-keyword">if</span> (lo &gt; hi)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = lo + (hi - lo) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(key &lt; a[mid])&#123;<br>            <span class="hljs-keyword">return</span> rank(key, a, lo, mid-<span class="hljs-number">1</span>, ++depth);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; a[mid])&#123;<br>            <span class="hljs-keyword">return</span> rank(key, a, mid + <span class="hljs-number">1</span>, hi, ++depth);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按缩进打印调用信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hi</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> depth</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printIndent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lo, <span class="hljs-keyword">int</span> hi, <span class="hljs-keyword">int</span> depth)</span> </span>&#123;<br>        StdOut.print(depth + <span class="hljs-string">&quot;\t&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)&#123;<br>            StdOut.print(<span class="hljs-string">&quot;----------&quot;</span>);<br>        &#125;<br>        StdOut.println(lo + <span class="hljs-string">&quot;\t&quot;</span> + hi);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-keyword">int</span>[] whitelist = In.readInts(args[<span class="hljs-number">0</span>]);<br>        Arrays.sort(whitelist);<span class="hljs-comment">//升序排序</span><br>        <span class="hljs-keyword">while</span> (!StdIn.isEmpty())&#123;<br>            <span class="hljs-comment">//读取键值，如果不存在于白名单中则将其打印</span><br>            <span class="hljs-keyword">int</span> key  = StdIn.readInt();<br>            <span class="hljs-keyword">if</span> (rank(key, whitelist) &lt; <span class="hljs-number">0</span>)&#123;<br>                StdOut.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + key);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada">以下是运行教材的数据集 tinyW.txt 和 tinyT.txt 搜索到第一个数据时的结果：<br><br><span class="hljs-number">0</span>       <span class="hljs-number">0</span>       <span class="hljs-number">14</span><br><span class="hljs-number">1</span>       <span class="hljs-comment">----------0     6</span><br><span class="hljs-number">2</span>       <span class="hljs-comment">--------------------4   6</span><br><span class="hljs-number">0</span>       <span class="hljs-number">0</span>       <span class="hljs-number">14</span><br><span class="hljs-number">1</span>       <span class="hljs-comment">----------8     14</span><br><span class="hljs-number">2</span>       <span class="hljs-comment">--------------------8   10</span><br><span class="hljs-number">3</span>       <span class="hljs-comment">------------------------------8 8</span><br><span class="hljs-number">4</span>       <span class="hljs-comment">----------------------------------------9       8</span><br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><h5 id="1-1-23-为-BinarySearch-添加一个参数：-打印出标准输入中不在白名单上的值；-则打印出标准输入中在白名单上的值。"><a href="#1-1-23-为-BinarySearch-添加一个参数：-打印出标准输入中不在白名单上的值；-则打印出标准输入中在白名单上的值。" class="headerlink" title="1.1.23 为 BinarySearch 添加一个参数： + 打印出标准输入中不在白名单上的值； - 则打印出标准输入中在白名单上的值。"></a>1.1.23 为 <code>BinarySearch</code> 添加一个参数： <code>+</code> 打印出标准输入中不在白名单上的值； <code>-</code> 则打印出标准输入中在白名单上的值。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将此段代码替换 1.1.22 中的测试用例</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">//&#x27;+&#x27; ==&gt; 打印出标准输入中不在白名单上的值</span><br>        <span class="hljs-comment">//&#x27;-&#x27; ==&gt; 打印出标准输入中在白名单上的值</span><br>        <span class="hljs-keyword">char</span> symbol = <span class="hljs-string">&#x27;+&#x27;</span>;<br>        <span class="hljs-keyword">int</span>[] whitelist = In.readInts(args[<span class="hljs-number">0</span>]);<br>        Arrays.sort(whitelist);<span class="hljs-comment">//升序排序</span><br>        <span class="hljs-keyword">while</span> (!StdIn.isEmpty())&#123;<br>            <span class="hljs-comment">//读取键值，如果不存在于白名单中则将其打印</span><br>            <span class="hljs-keyword">int</span> key  = StdIn.readInt();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;+&#x27;</span> == symbol &amp;&amp; rank(key, whitelist) &gt;= <span class="hljs-number">0</span>)&#123;<br>                StdOut.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + key);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;-&#x27;</span> == symbol &amp;&amp; rank(key, whitelist) &lt; <span class="hljs-number">0</span>)&#123;<br>                StdOut.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + key);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">以下是运行教材的数据集 tinyW.txt 和 tinyT.txt 搜索到第一个数据时的结果：<br><br><span class="hljs-number">0</span>       <span class="hljs-number">0</span>       <span class="hljs-number">14</span><br><span class="hljs-number">1</span>       <span class="hljs-comment">----------0     6</span><br><span class="hljs-number">2</span>       <span class="hljs-comment">--------------------4   6</span><br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h5 id="1-1-24-给出使用欧几里得算法计算-105-和-24-的最大公约数的过程中得到的一系列-p-和-q-的值。扩展该算法中的代码得到一个程序-Euclid-，从命令行接受两个参数，-计算出他们的最大公约数并打印出每次调用递归方法是的两个参数。-使用你的程序计算-1-111-111-和-1-234-567-的最大公约数。"><a href="#1-1-24-给出使用欧几里得算法计算-105-和-24-的最大公约数的过程中得到的一系列-p-和-q-的值。扩展该算法中的代码得到一个程序-Euclid-，从命令行接受两个参数，-计算出他们的最大公约数并打印出每次调用递归方法是的两个参数。-使用你的程序计算-1-111-111-和-1-234-567-的最大公约数。" class="headerlink" title="1.1.24 给出使用欧几里得算法计算 105 和 24 的最大公约数的过程中得到的一系列 p 和 q 的值。扩展该算法中的代码得到一个程序 Euclid ，从命令行接受两个参数， 计算出他们的最大公约数并打印出每次调用递归方法是的两个参数。 使用你的程序计算 1 111 111 和 1 234 567 的最大公约数。"></a>1.1.24 给出使用欧几里得算法计算 105 和 24 的最大公约数的过程中得到的一系列 p 和 q 的值。扩展该算法中的代码得到一个程序 <code>Euclid</code> ，从命令行接受两个参数， 计算出他们的最大公约数并打印出每次调用递归方法是的两个参数。 使用你的程序计算 1 111 111 和 1 234 567 的最大公约数。</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">使用欧几里得算法计算 <span class="hljs-number">105</span> 和 <span class="hljs-number">24</span> 的最大公约数的过程中得到的一系列 p 和 q 的值为：<br><br><span class="hljs-number">0</span>       <span class="hljs-number">105</span>     <span class="hljs-number">24</span><br><span class="hljs-number">1</span>       <span class="hljs-comment">----------24    9</span><br><span class="hljs-number">2</span>       <span class="hljs-comment">--------------------9   6</span><br><span class="hljs-number">3</span>       <span class="hljs-comment">------------------------------6 3</span><br><span class="hljs-number">4</span>       <span class="hljs-comment">----------------------------------------3       0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> edu.princeton.cs.algs4.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">q1124</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按缩进打印调用信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> q</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> depth</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printIndent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q, <span class="hljs-keyword">int</span> depth)</span> </span>&#123;<br>        StdOut.print(depth + <span class="hljs-string">&quot;\t&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)&#123;<br>            StdOut.print(<span class="hljs-string">&quot;----------&quot;</span>);<br>        &#125;<br>        StdOut.println(p + <span class="hljs-string">&quot;\t&quot;</span> + q);<br>    &#125;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 使用欧几里得算法求解两数的最大公约数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> p 数一</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> q 数二</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span>  最大公约数</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Euclid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q, <span class="hljs-keyword">int</span> depth)</span> </span>&#123;<br>        printIndent(p, q, depth);<br>        <span class="hljs-keyword">if</span>(q == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> p;<br>        <span class="hljs-keyword">int</span> r = p % q;<br>        <span class="hljs-keyword">return</span> Euclid(q, r, ++depth);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> p = Integer.parseInt(args[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">int</span> q = Integer.parseInt(args[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">int</span> gcd = Euclid(p, q, <span class="hljs-number">0</span>);<br>        StdOut.println(<span class="hljs-string">&quot;\n&quot;</span> + p + <span class="hljs-string">&quot; 和 &quot;</span> + q + <span class="hljs-string">&quot; 的最大公约数是： &quot;</span> + gcd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns">计算 <span class="hljs-number">1 111 111</span> 和 <span class="hljs-number">1 234 567</span>:<br><br><span class="hljs-number">0</span>       <span class="hljs-number">1111111</span> <span class="hljs-number">1234567</span><br><span class="hljs-number">1</span>       ----------<span class="hljs-number">1234567</span>       <span class="hljs-number">1111111</span><br><span class="hljs-number">2</span>       --------------------<span class="hljs-number">1111111</span>     <span class="hljs-number">123456</span><br><span class="hljs-number">3</span>       ------------------------------<span class="hljs-number">123456</span>    <span class="hljs-number">7</span><br><span class="hljs-number">4</span>       ----------------------------------------<span class="hljs-number">7</span>       <span class="hljs-number">4</span><br><span class="hljs-number">5</span>       --------------------------------------------------<span class="hljs-number">4</span>     <span class="hljs-number">3</span><br><span class="hljs-number">6</span>       ------------------------------------------------------------<span class="hljs-number">3</span>   <span class="hljs-number">1</span><br><span class="hljs-number">7</span>       ----------------------------------------------------------------------<span class="hljs-number">1</span> <span class="hljs-number">0</span><br><br><span class="hljs-number">1111111</span> 和 <span class="hljs-number">1234567</span> 的最大公约数是： <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h5 id="1-1-25-用数学归纳法证明欧几里得算法能够计算任意一对非负整数-p-和-q-的最大公约数。"><a href="#1-1-25-用数学归纳法证明欧几里得算法能够计算任意一对非负整数-p-和-q-的最大公约数。" class="headerlink" title="1.1.25 用数学归纳法证明欧几里得算法能够计算任意一对非负整数 p 和 q 的最大公约数。"></a>1.1.25 用数学归纳法证明欧几里得算法能够计算任意一对非负整数 p 和 q 的最大公约数。</h5>]]></content>
    
    
    <categories>
      
      <category>算法第四版</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一篇散文</title>
    <link href="/2021/02/16/%7F%E4%B8%80%E7%AF%87%E6%95%A3%E6%96%87/"/>
    <url>/2021/02/16/%7F%E4%B8%80%E7%AF%87%E6%95%A3%E6%96%87/</url>
    
    <content type="html"><![CDATA[<p>樱花烂漫时节，一身利落的轻装，踏着新发的嫩草，悠悠的散步。</p><p>不知方向，不知目标，就只是静静的，慢慢的体会生活的美好，感悟生命的意义。听过一句话:人生总是太匆忙。的确，忙忙碌碌中，我们忽视了很多生活的美好。</p><p>草长莺飞,万物轮回。时间一点一滴，带走了我们的年少时光，回顾往昔，我们拥有什么?我们曾经拥有什么?跌跌撞撞的小学生活，恍恍惚惚的初中时代，坎坎坷坷的高中炼狱，仿佛都成为了泡沫，在阳光下消弭。现在的现在，我们拥有的只有当下。</p><p>如今，最重要的是梦想，是志向。很多人为了这些行走匆忙，但忽视了周围的风景。春意盎然，阳光微煦，微风轻暖。此时，踏一席春色，享无边烂漫。就像顾城说的那样:草在结它的种子，风在摇它的叶子。我们站着，不说话，就很美好。</p><p>这样单纯的美好，值得每个人记住。那么，在疾走的时候，为什么不停下来看看呢?在砥砺前行的同时，注意到周围的芬芳，人生会更加无憾。<br>所以，奔赴远方的少年啊，请在追寻未来的同时，把握住现在。你实现梦想的未来是很美好，但载歌载舞的如今，同样值得依恋。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Actions 自动部署 Hexo</title>
    <link href="/2021/02/16/GitHubActions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo/"/>
    <url>/2021/02/16/GitHubActions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo/</url>
    
    <content type="html"><![CDATA[<p>简单介绍下 GitHub Actions 中的术语：</p><ul><li><p>workflow：表示一次持续集成的过程</p></li><li><p>job：构建任务，一个 workflow 可以由一个或者多个 job 组成，可支持并发执行 job</p></li><li><p>step：一个 job 由一个或多个 step 组成，按顺序依次执行</p></li><li><p>action：每个 step 由一个或多个 action 组成，按顺序依次执行</p><h2 id="博客工程"><a href="#博客工程" class="headerlink" title="博客工程"></a>博客工程</h2><p>采用源码与部署放置在不同分支的方式，在本教程中</p></li><li><p>部署分支为：<code>master</code></p></li><li><p>源码分支为：<code>MyBlog2021</code></p><h2 id="生成公私钥"><a href="#生成公私钥" class="headerlink" title="生成公私钥"></a>生成公私钥</h2><p>在源码分支通过下面命令生成公钥私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout MyBlog2021<br>ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;<span class="hljs-subst">$(git config user.email)</span>&quot;</span> -f github-deploy-key -N <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>目录中生成两个文件：</p></li><li><p><code>github-deploy-key.pub</code> — 公钥文件</p></li><li><p><code>github-deploy-key</code> — 私钥文件</p></li></ul><blockquote><p>公钥和私钥切记要添加到 <code>.gitignore</code> 中！！！</p></blockquote><h2 id="GitHub-添加公钥"><a href="#GitHub-添加公钥" class="headerlink" title="GitHub 添加公钥"></a>GitHub 添加公钥</h2><p>在 GitHub 中博客工程中按照 <code>Settings-&gt;Deploye keys-&gt;Add deploy key</code> 找到对应的页面，然后进行公钥添加。该页面中 <code>Title</code> 自定义即可，<code>Key</code> 中添加 <code>github-deploy-key.pub</code> 文件中的内容。</p><p><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210328164046.png"></p><blockquote><p>注意：切记不要多复制空格!!!<br>切记要勾选 Allow write access，否则会出现无法部署的情况。</p></blockquote><h2 id="GitHub-添加私钥"><a href="#GitHub-添加私钥" class="headerlink" title="GitHub 添加私钥"></a>GitHub 添加私钥</h2><p>在 GitHub 中博客工程中按照 <code>Settings-&gt;Secrets-&gt;Add a new secrets</code> 找到对应的页面，然后进行私钥添加。该页面中 <code>Name</code> 自定义即可，<code>Value</code> 中添加 <code>github-deploy-key</code> 文件中的内容。</p><p>我的名字叫做 <code>HEXO_DEPLOY_PRI</code>，这个跟下文的配置文件保持一致就行<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210328164102.png"></p><h2 id="创建编译脚本"><a href="#创建编译脚本" class="headerlink" title="创建编译脚本"></a>创建编译脚本</h2><p>在博客源码分支（我这里是 <code>MyBlog2021</code> 分支）中创建 <code>.github/workflows/deployblog.yml</code> 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Blog</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MyBlog2021</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">node-version:</span> <br>          <span class="hljs-bullet">-</span> <span class="hljs-number">14.</span><span class="hljs-string">x</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">source</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">MyBlog2021</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configuration</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">ACTION_DEPLOY_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_PRI</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">~/.ssh/</span><br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$ACTION_DEPLOY_KEY&quot;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>          <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>          <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">github.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&quot;lujiahao0708@gmail.com&quot;</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&quot;lujiahao0708&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Config</span> <span class="hljs-string">hexo</span> <br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>  <br>          <span class="hljs-string">sudo</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-cli</span> <span class="hljs-string">-g</span><br>          <span class="hljs-string">sudo</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">deploy</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br>          <span class="hljs-string">hexo</span> <span class="hljs-string">d</span><br><br></code></pre></td></tr></table></figure><h2 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h2><p>在项目根目录中修改 <code>_config.yml</code> ，增加部署相关内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">博客项目的资源地址.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>push 好我们的分支之后，在项目 Action 目录即可看到<br><img src="https://ced-md-picture.oss-cn-beijing.aliyuncs.com/img/20210328164128.png"></p><hr><ul><li><a href="https://zhuanlan.zhihu.com/p/133764310">https://zhuanlan.zhihu.com/p/133764310</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文章排版指南</title>
    <link href="/2021/02/16/article-typesetting-guide/"/>
    <url>/2021/02/16/article-typesetting-guide/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们日常看文章的时候，其实已经在慢慢积累我们的审美意识，我们能分辨，哪篇推文看着舒服，哪篇文章看着辣眼睛。为了减少这种「辣眼睛」的情况出现，今天我就来谈谈关于文章排版的事情。</p></blockquote><h3 id="▎博客排版"><a href="#▎博客排版" class="headerlink" title="▎博客排版"></a>▎博客排版</h3><p>写博客的同学都知道，现在博客都是由 Markdown 排版。如果你还不知到 Markdown 的话就去学习一下吧，它可以很方便地帮助我们排版出漂亮的文章。但我们在写博文的时候，仍有一些细节是需要注意的。</p><h4 id="1-空格"><a href="#1-空格" class="headerlink" title="1. 空格"></a>1. 空格</h4><p>每次看到网页上的中文字和英文、数字、符号挤在一起，就会坐立不安，忍不住想在他们之间加个空格。</p><ul><li><p>中英文之间需要加空格</p><p>  <em>eg</em>. 大家可以微信搜一搜 solidSpoon 关注我。</p></li><li><p>中文与数字之间需要加空格</p><p>  <em>eg</em>. 不知不觉，我已经写博客 3 个月了。</p></li><li><p>数字与单位之间需要加空格</p><p>  <em>eg</em>. 我昨天买了一个 16 GB 的 U 盘。</p></li><li><p>完整的英文整句时标点后要加空格。</p><p>  <em>eg</em>. Love me, love my dog.</p></li></ul><p><strong>但是也有一些例外。</strong></p><ul><li><p>度的标志、百分号不加空格</p><p>  <em>eg</em>. 水的沸点是 100°。</p><p>  <em>eg</em>. 我的手机还有 75％ 的电量。</p></li><li><p>全角标点与其他字符之间不加空格</p><p>  <em>eg</em>. 大家好，我是 solidSpoon，欢迎访问我的博客。</p></li></ul><h4 id="2-标点"><a href="#2-标点" class="headerlink" title="2. 标点"></a>2. 标点</h4><p>说到标点，不得不说下全角和半角，很多人可能不了解全角和半角的概念，这里顺便介绍下。</p><p>全角和半角是英文和中文的编码规范不同遗留下的问题，简单来说，全角占两个字节，半角占一个字节，你可以理解成中文汉子是全角，英文字母是半角，不过半角全角主要是针对标点符号来说的，中文标点占两个字节，英文标点占一个字节。体现在排版上的差异就是，全角字符屏幕打印宽度是两个，而半角字符屏幕打印宽度是一个，如中文逗号和英文逗号他们的显示分别是「，」和「,」。</p><ul><li><p>使用全角中文标点</p><p>  中文排版中所有的标点都应该使用中文全角中文标点</p><p>  <em>eg</em>. 大家好，我是 solidSpoon。</p></li><li><p>遇到英文整句、特殊名词时使用半角标点。</p><p>  <em>eg</em>. 乔布斯说过：「Stay hungry, stay foolish.」</p><p>  <em>eg</em>. Facebook, Inc.</p></li><li><p>使用直角引号</p><ul><li><p>我国国家标准要求弯引号，但是个人建议在新媒体排版时使用直角引号。</p><p>  <em>eg</em>. 「我去吃饭了」，它起身说到。</p></li><li><p>如果引号再使用引号使用直角双引号。</p><p>  <em>eg</em>. 我对他说：「乔布斯说过：『Stay hungry, stay follish.』」</p></li></ul></li></ul><p><strong>微软拼音输入特殊符号方法：</strong></p><p>首先在中文输入界面输入 <code>u</code> 进入「u 模式输入」，然后跟着屏幕提示就可以找到你要输入的特殊符号了。</p><ul><li><em>eg</em>. 中文界面输入 <code>uubd</code> 就可以找到直角引号。</li></ul><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h4><p>除以上之外，还有一些其他标准推荐大家使用的。</p><ul><li><p>英文名词首字母尽量大写</p><p>  eg. Google、Android、Facebook</p></li><li><p>专有名词使用正确的大小写</p><p>  eg. GitHub、iOS、iPhone XS Max、MacBook Pro</p></li><li><p>首行不要缩进</p></li></ul><p>关于首行不缩进可能有人不太同意，但是我要在这里解释下，在说明之前我们必须弄明白「首行缩进」的目的是什么。</p><p>「每段之前空两格」是我们从小学写作文就养成的习惯，也是正式文体的格式要求，其目的是为了区分自然段。</p><p>但是像我们现在接触的阅读，都是没有固定的格式要求的，如微信公众号、电子文档等，所以大家一般都采用「空出一行」进行自然段与自然段之间的区分，这种写作方式非常省事，而且很整齐。</p><p>所以，我认为这种应该是最科学的方式，只要没有明确的格式要求，写作的排版无须首行缩进。</p><h3 id="▎公众号排版"><a href="#▎公众号排版" class="headerlink" title="▎公众号排版"></a>▎公众号排版</h3><p>用 Markdown 写作的确很方便。那么对于「不那么方便」的微信公众号，除了上面的那些外，又有什么是需要注意的呢？</p><h4 id="1-大小"><a href="#1-大小" class="headerlink" title="1. 大小"></a>1. 大小</h4><p>简单来说就是：标题要比正文大，正文要比标注大。</p><h4 id="2-颜色"><a href="#2-颜色" class="headerlink" title="2. 颜色"></a>2. 颜色</h4><p>颜色搭配保持统一，个别字体使用特殊色强调，字体颜色尽量不超过三种，颜色不要选取太亮的颜色，例如纯黑，纯红，亮红配亮绿，都是不建议的，看久了眼睛难免会疲惫，不利于阅读。</p><p><strong>建议使用字体颜色：</strong></p><ul><li>标题：使用公众号常用色，或者直接取 logo 或者行业色</li><li>正文：选择亮度没这么高的字体，这是纯黑 <code>#000000</code> ，比较偏灰会更加适合阅读 <code>#595757</code> <code>#3f3f3f</code> 等</li><li>批注：选择比正文亮度还低，更加浅的浅灰色，例如 <code>#595959</code> <code>#888888</code> <code>#d6d6d6</code> </li></ul><h4 id="3-形态"><a href="#3-形态" class="headerlink" title="3. 形态"></a>3. 形态</h4><p>和 word 编辑一样，公众号文字形态也可以做一些基本变化，例如 <strong>加粗</strong>、<em>斜体</em>、<u>下划线</u>、<del>删除线</del> 等，常用的是加粗，以及有趣（戏多）的删除线。</p><h4 id="4-对齐"><a href="#4-对齐" class="headerlink" title="4. 对齐"></a>4. 对齐</h4><p>对齐，可以说是拯救强迫症的最佳设置。这里推荐对齐方式为：<strong>两端对齐</strong>。</p><p>我们日常排版完会发现，因为句子的字符大小的原因，每行的最右边都会变得层次不齐，强迫症看着会非常的不舒服，这时候如果我们选择两端对齐，就会美观的多。</p><h4 id="5-小符号"><a href="#5-小符号" class="headerlink" title="5. 小符号"></a>5. 小符号</h4><p>就像前面对标题的处理一样，简单的符号也能划分空间，也要常用引号，以此突出重点等</p><h4 id="6-留白"><a href="#6-留白" class="headerlink" title="6. 留白"></a>6. 留白</h4><p>在经过了文字的排版以后，整个版面的风格已经出来了，但是我们会发现，推文里字句的间距太密了，看久了眼睛很不舒服。其实，这都是因为：<u>没有留白，没有呼吸感</u>。</p><p>留白可以包括：</p><ul><li>页面边距</li><li>段 / 字 / 行间距</li><li>缩进</li><li>空行</li></ul><p><strong>页面边距</strong></p><p>页面边距指的是推文与手机屏幕两侧的距离。</p><p>默认距离是 0，我们可以设置，让文字离屏幕远一点。我个人建议页边距设置为 0.5，或者 1，比较舒服。</p><p><strong>段距</strong></p><p>段落与段落之间，图片与文字之间，都可以使用段前距、段后距进行调整距离，当然也可以使用空格代替。</p><p><strong>字间距</strong></p><p>字体之间的距离太密，容易让人错过重点内容，调整文字间距会有意想不到的效果，呼吸感瞬间有了。和字间距一样，行间距是解放原有行与行之间的重要一步。</p><ul><li>推荐参数：行间距 1.5 ~ 1.75、字间距 1</li></ul><h4 id="7-图片与表情包"><a href="#7-图片与表情包" class="headerlink" title="7. 图片与表情包"></a>7. 图片与表情包</h4><p>适当的图片和表情可以增加阅读的兴趣</p><p><strong>浮动设置</strong></p><p>有的时候，我们会看到很多公众号通篇都是长图，而我们上传多图的时候，要么是图片太大上传不了，要么就是多图的时候出现空隙。这时候我们就只要让图片浮动就可以解决这个问题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/10/hello-world/"/>
    <url>/2021/02/10/hello-world/</url>
    
    <content type="html"><![CDATA[<hr><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
